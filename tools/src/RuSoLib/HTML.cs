using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace RuSoLib
{
    public static class HTML
    {
        public const string SiteURL = "https://github.com/MSDN-WhiteKnight/ruso-archive/";
        public const string LicenseURL = "https://github.com/MSDN-WhiteKnight/ruso-archive/blob/master/LICENSE";

        public static string GetOwnerString(object post)
        {
            dynamic owner = JSON.GetPropertyValue(post, "owner");
            dynamic owner_link = JSON.GetPropertyValue(owner, "link");
            string ownerstr;


            if (owner != null)
            {
                if (!String.IsNullOrEmpty(owner_link)) ownerstr = String.Format("<a href=\"{0}\">{1}</a>", owner_link, owner.display_name);
                else ownerstr = owner.display_name;
            }
            else ownerstr = "(unknown person)";
            return ownerstr;
        }

        public static string GetOwnerString(PostMarkdown post)
        {            
            string ownerstr;
            string link = post.UserLink;

            if (link == null) link = "";
            else link = link.Trim();

            if (!String.IsNullOrEmpty(post.UserName))
            {
                if (link != "") ownerstr = String.Format("<a href=\"{0}\">{1}</a>", link, post.UserName);
                else ownerstr = post.UserName;
            }
            else ownerstr = "(unknown person)";

            return ownerstr;
        }

        public static void RenderPost(object post, TextWriter wr)
        {
            dynamic data = post as dynamic;            
            string ownerstr = GetOwnerString(post);

            RenderHeader(data.post_id, wr);            
            wr.WriteLine("<p>Source: <a href=\"{0}\">{1}</a> - by {2}</p>",data.link, data.link, ownerstr);
            wr.WriteLine("<blockquote>");
            wr.WriteLine(data.body);
            wr.WriteLine("</blockquote>");
            RenderBottom(wr);            
        }

        public static void RenderPost(PostMarkdown post, TextWriter wr)
        {            
            string ownerstr = GetOwnerString(post);

            RenderHeader(post.Id, wr);
            wr.WriteLine("<p>Source: <a href=\"{0}\">{1}</a> - by {2}</p>", post.Link, post.Link, ownerstr);
            wr.WriteLine("<blockquote>");
            wr.WriteLine(post.Body);
            wr.WriteLine("</blockquote>");
            RenderBottom(wr);
        }

        public static void RenderHeader(int postid, TextWriter wr)
        {
            RenderHeader("Post " + postid.ToString(), wr);                      
        }

        public static void RenderHeader(string title, TextWriter wr)
        {
            string title_yml = System.Net.WebUtility.HtmlDecode(title);
            title_yml = title_yml.Replace("\\", "\\\\");
            title_yml = title_yml.Replace("\"", "\\\"");

            wr.WriteLine("---");
            wr.WriteLine("title: \"{0}\"", title_yml);
            wr.WriteLine("---");
            wr.WriteLine("<p><i><a href=\"{0}\">RuSO Archive</a></i></p>", SiteURL);
            wr.WriteLine("<h1>{0}</h1>", title);
        }

        public static void RenderBottom(TextWriter wr)
        {
            wr.WriteLine("<hr/>");
            wr.WriteLine("<p><i>Content is retrieved from StackExchange API. </i></p>");
            wr.WriteLine("<p><i>Auto-generated by ruso-archive tools. </i></p>");
        }

        public static void RenderTOC(string site, string title, PostSet posts, TextWriter wr)
        {
            string pagetitle = String.Format("{0}: {1}",site,title);
            RenderHeader(pagetitle,wr);            
            
            if(posts.Questions.Count + posts.MarkdownQuestions.Count>0) wr.WriteLine("<h2>Questions</h2>");

            foreach (int key in posts.Questions.Keys)
            {
                wr.WriteLine("<p><a href=\"{0}.md\">{1}</a></p>", key, posts.Questions[key].DataDynamic.title);
            }

            List<int> keys = posts.MarkdownQuestions.Keys.ToList();
            keys.Sort();

            for(int i = keys.Count-1;i>=0;i--)
            {
                int key = keys[i];
                wr.WriteLine("<p><a href=\"{0}.md\">{1}</a></p>", key, posts.MarkdownQuestions[key].Title);
            }

            if (posts.SingleAnswers.Count + posts.MarkdownAnswers.Count > 0) wr.WriteLine("<h2>Answers</h2>");

            foreach (int key in posts.SingleAnswers.Keys)
            {
                wr.WriteLine("<p><a href=\"{0}.md\">Answer {1}</a></p>", key, key);
            }

            keys = posts.MarkdownAnswers.Keys.ToList();
            keys.Sort();

            for (int i = keys.Count - 1; i >= 0; i--)
            {
                int key = keys[i];
                wr.WriteLine("<p><a href=\"{0}.md\">{1}</a></p>", key, posts.MarkdownAnswers[key].Title);
            }

            RenderBottom(wr);
        }

        public static void RenderYamlTOC(string site, string title, PostSet posts, TextWriter wr)
        {
            string pagetitle = String.Format("{0}: {1}", site, title);
            wr.WriteLine("- name: \"{0}\"", pagetitle);
            wr.WriteLine("  href: index.md");
            wr.WriteLine("  items:");
            
            foreach (int key in posts.Questions.Keys)
            {
                string s = System.Net.WebUtility.HtmlDecode(posts.Questions[key].DataDynamic.title);
                s = s.Replace("\\", "\\\\");
                s = s.Replace("\"","\\\"");
                wr.WriteLine("  - name: \"{0}\"", s);
                wr.WriteLine("    href: {0}.md", key);
            }

            List<int> keys = posts.MarkdownQuestions.Keys.ToList();
            keys.Sort();

            for (int i = keys.Count - 1; i >= 0; i--)
            {
                int key = keys[i];
                string s = System.Net.WebUtility.HtmlDecode(posts.MarkdownQuestions[key].Title);
                s = s.Replace("\\", "\\\\");
                s = s.Replace("\"", "\\\"");
                wr.WriteLine("  - name: \"{0}\"", s);
                wr.WriteLine("    href: {0}.md", key);
            }

            foreach (int key in posts.SingleAnswers.Keys)
            {
                wr.WriteLine("  - name: \"Answer {0}\"", key);
                wr.WriteLine("    href: {0}.md", key);
            }

            keys = posts.MarkdownAnswers.Keys.ToList();
            keys.Sort();

            for (int i = keys.Count - 1; i >= 0; i--)
            {
                int key = keys[i];
                string s = posts.MarkdownAnswers[key].Title;
                s = s.Replace("\\", "\\\\");
                s = s.Replace("\"", "\\\"");
                wr.WriteLine("  - name: \"{0}\"", s);
                wr.WriteLine("    href: {0}.md", key);
            }
        }
    }
}
