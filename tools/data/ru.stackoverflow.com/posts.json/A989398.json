{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1559711489,"creation_date":1559711489,"answer_id":989398,"question_id":988674,"body":"<p>Можно. Для этого необходимо использовать <a href=\"https://docs.microsoft.com/en-us/windows/desktop/Msi/windows-installer-portal\" rel=\"nofollow noreferrer\">Windows Installer API</a>. Например, так можно вывести в TextBox действия и возникающие ошибки в ходе установки:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Runtime.InteropServices;\nusing System.Threading.Tasks;\n\nnamespace WpfApp1\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();   \n        }\n\n        const string msipath = \"C:\\\\Distr\\\\1.msi\";\n\n        public int MyInstallUIHandler(IntPtr pvContext, uint iMessageType, string szMessage)\n        {\n            this.Dispatcher.Invoke(() =&gt; { textBox1.Text += szMessage + Environment.NewLine; });\n            return 1;\n        }\n\n        public void InstallMsi(string msipath, bool uninstall)\n        {\n            string pars = \"\";\n            if (uninstall) pars = \"REMOVE=ALL\"; \n\n            IntPtr ptr = IntPtr.Zero;\n            InstallUIHandler handler = new InstallUIHandler(MyInstallUIHandler);\n\n            //отключаем стандартный UI\n            MsiSetInternalUI(INSTALLUILEVEL.INSTALLUILEVEL_NONE, ref ptr);\n\n            //устанавливаем обработчик сообщений\n            MsiSetExternalUI(\n                handler,\n                INSTALLLOGMODE.INSTALLLOGMODE_ACTIONSTART  | INSTALLLOGMODE.INSTALLLOGMODE_ERROR,\n                IntPtr.Zero\n                );\n\n            //запускаем установку (удаление)\n            MsiInstallProduct(msipath, pars);\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            Task.Run(() =&gt; { InstallMsi(msipath, false); });            \n        }\n\n        enum INSTALLMESSAGE\n        {\n            INSTALLMESSAGE_FATALEXIT = 0x00000000, // premature termination, possibly fatal OOM\n            INSTALLMESSAGE_ERROR = 0x01000000, // formatted error message\n            INSTALLMESSAGE_WARNING = 0x02000000, // formatted warning message\n            INSTALLMESSAGE_USER = 0x03000000, // user request message\n            INSTALLMESSAGE_INFO = 0x04000000, // informative message for log\n            INSTALLMESSAGE_FILESINUSE = 0x05000000, // list of files in use that need to be replaced\n            INSTALLMESSAGE_RESOLVESOURCE = 0x06000000, // request to determine a valid source location\n            INSTALLMESSAGE_OUTOFDISKSPACE = 0x07000000, // insufficient disk space message\n            INSTALLMESSAGE_ACTIONSTART = 0x08000000, // start of action: action name &amp; description\n            INSTALLMESSAGE_ACTIONDATA = 0x09000000, // formatted data associated with individual action item\n            INSTALLMESSAGE_PROGRESS = 0x0A000000, // progress gauge info: units so far, total\n            INSTALLMESSAGE_COMMONDATA = 0x0B000000, // product info for dialog: language Id, dialog caption\n            INSTALLMESSAGE_INITIALIZE = 0x0C000000, // sent prior to UI initialization, no string data\n            INSTALLMESSAGE_TERMINATE = 0x0D000000, // sent after UI termination, no string data\n            INSTALLMESSAGE_SHOWDIALOG = 0x0E000000 // sent prior to display or authored dialog or wizard        \n        }\n\n        enum INSTALLLOGMODE  // bit flags for use with MsiEnableLog and MsiSetExternalUI\n        {\n            INSTALLLOGMODE_FATALEXIT = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_FATALEXIT &gt;&gt; 24)),\n            INSTALLLOGMODE_ERROR = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_ERROR &gt;&gt; 24)),\n            INSTALLLOGMODE_WARNING = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_WARNING &gt;&gt; 24)),\n            INSTALLLOGMODE_USER = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_USER &gt;&gt; 24)),\n            INSTALLLOGMODE_INFO = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_INFO &gt;&gt; 24)),\n            INSTALLLOGMODE_RESOLVESOURCE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_RESOLVESOURCE &gt;&gt; 24)),\n            INSTALLLOGMODE_OUTOFDISKSPACE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_OUTOFDISKSPACE &gt;&gt; 24)),\n            INSTALLLOGMODE_ACTIONSTART = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_ACTIONSTART &gt;&gt; 24)),\n            INSTALLLOGMODE_ACTIONDATA = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_ACTIONDATA &gt;&gt; 24)),\n            INSTALLLOGMODE_COMMONDATA = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_COMMONDATA &gt;&gt; 24)),\n            INSTALLLOGMODE_PROPERTYDUMP = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_PROGRESS &gt;&gt; 24)), // log only\n            INSTALLLOGMODE_VERBOSE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_INITIALIZE &gt;&gt; 24)), // log only\n            INSTALLLOGMODE_EXTRADEBUG = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_TERMINATE &gt;&gt; 24)), // log only\n            INSTALLLOGMODE_LOGONLYONERROR = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_SHOWDIALOG &gt;&gt; 24)), // log only    \n            INSTALLLOGMODE_PROGRESS = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_PROGRESS &gt;&gt; 24)), // external handler only\n            INSTALLLOGMODE_INITIALIZE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_INITIALIZE &gt;&gt; 24)), // external handler only\n            INSTALLLOGMODE_TERMINATE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_TERMINATE &gt;&gt; 24)), // external handler only\n            INSTALLLOGMODE_SHOWDIALOG = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_SHOWDIALOG &gt;&gt; 24)), // external handler only\n            INSTALLLOGMODE_FILESINUSE = (1 &lt;&lt; (INSTALLMESSAGE.INSTALLMESSAGE_FILESINUSE &gt;&gt; 24)), // external handler only\n        }\n\n        public enum INSTALLUILEVEL\n        {\n            INSTALLUILEVEL_NOCHANGE = 0,    // UI level is unchanged\n            INSTALLUILEVEL_DEFAULT = 1,    // default UI is used\n            INSTALLUILEVEL_NONE = 2,    // completely silent installation\n            INSTALLUILEVEL_BASIC = 3,    // simple progress and error handling\n            INSTALLUILEVEL_REDUCED = 4,    // authored UI, wizard dialogs suppressed\n            INSTALLUILEVEL_FULL = 5,    // authored UI with wizards, progress, errors\n            INSTALLUILEVEL_ENDDIALOG = 0x80, // display success/failure dialog at end of install\n            INSTALLUILEVEL_PROGRESSONLY = 0x40, // display only progress dialog\n            INSTALLUILEVEL_HIDECANCEL = 0x20, // do not display the cancel button in basic UI\n            INSTALLUILEVEL_SOURCERESONLY = 0x100, // force display of source resolution even if quiet\n        }\n\n        [DllImport(\"msi.dll\", CharSet = CharSet.Unicode, SetLastError = true)]        \n        static extern uint MsiInstallProduct(string packagePath, string commandLine);\n\n        [UnmanagedFunctionPointer(CallingConvention.Winapi, CharSet = CharSet.Unicode)]\n        public delegate int InstallUIHandler(\n            IntPtr pvContext,\n            uint iMessageType,\n            [MarshalAs(UnmanagedType.LPWStr)] string szMessage);\n\n        [DllImport(\"msi.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n        static extern uint MsiSetExternalUI(InstallUIHandler puiHandler, INSTALLLOGMODE dwMessageFilter,\n           IntPtr pvContext);\n\n        [DllImport(\"msi.dll\", SetLastError = true)]\n        static extern int MsiSetInternalUI(INSTALLUILEVEL dwUILevel, ref IntPtr phWnd);        \n    }    \n}\n</code></pre>\n\n<p>Пример вывода:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Action 10:11:18: INSTALL. \nAction 10:11:18: ValidateProductID. \nAction 10:11:18: CostInitialize. Computing space requirements\nAction 10:11:18: FileCost. Computing space requirements\nAction 10:11:18: CostFinalize. Computing space requirements\nAction 10:11:18: InstallValidate. Validating install\nAction 10:11:18: InstallInitialize. \nAction 10:11:18: GenerateScript. Generating script operations for action:\nAction 10:11:18: ProcessComponents. Updating component registration\nAction 10:11:18: MsiUnpublishAssemblies. Unpublishing assembly information\nAction 10:11:18: UnpublishFeatures. Unpublishing Product Features\nAction 10:11:18: RemoveRegistryValues. Removing system registry values\nAction 10:11:19: RemoveFiles. Removing files\nAction 10:11:19: InstallFiles. Copying new files\nAction 10:11:19: WriteRegistryValues. Writing system registry values\nAction 10:11:19: RegisterUser. Registering user\nAction 10:11:19: RegisterProduct. Registering product\nAction 10:11:19: MsiPublishAssemblies. Publishing assembly information\nAction 10:11:19: PublishFeatures. Publishing Product Features\nAction 10:11:19: PublishProduct. Publishing product information\nAction 10:11:19: InstallFinalize. \nAction 10:11:19: InstallInitialize. \nAction 10:11:19: ProcessComponents. Updating component registration\nAction 10:11:19: MsiUnpublishAssemblies. Unpublishing assembly information\nAction 10:11:19: UnpublishFeatures. Unpublishing Product Features\nAction 10:11:19: RemoveRegistryValues. Removing system registry values\nAction 10:11:19: RemoveFiles. Removing files\nAction 10:11:19: PublishProduct. Publishing product information\nAction 10:11:20: RollbackCleanup. Removing backup files\n</code></pre>\n\n<p>Информацию о том, какие события Windows Installer можно обрабатывать, см. в документации по <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/msi/nf-msi-msisetexternaluia\" rel=\"nofollow noreferrer\">MsiSetExternalUI</a></p>\n"}