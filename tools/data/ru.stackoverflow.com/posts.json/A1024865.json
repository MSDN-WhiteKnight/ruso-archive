{"owner":{"reputation":9630,"user_id":182162,"user_type":"registered","profile_image":"https://i.stack.imgur.com/JAEvg.jpg?s=128&g=1","display_name":"Mark Shevchenko","link":"https://ru.stackoverflow.com/users/182162/mark-shevchenko"},"is_accepted":false,"score":7,"last_activity_date":1568623411,"creation_date":1568623411,"answer_id":1024865,"question_id":1024325,"body":"<p>Класс в классе увеличивает размер файла. Если в файле более трёхсот строк, с ним уже не очень удобно работать. Если ваш класс становится слишком большим, это подсказывает, что, возможно, нарушен принцип <em>единственной ответственности</em> (single responsibility).</p>\n\n<p>Поэтому классы в классах используют только тогда, когда вы передаёте важную информацию для программиста, который будет поддерживать и изменять ваш код. Если класс <code>Bar</code> находится в <code>Foo</code>, значит, он должен знать, как устроен <code>Foo</code>.</p>\n\n<p>Пример: реализуем паттерн <a href=\"http://cpp-reference.ru/patterns/behavioral-patterns/memento/\" rel=\"noreferrer\">Memento</a>:</p>\n\n<blockquote>\n  <p>Клиент является \"посыльным\" за Memento, но только исходный объект может сохранять и извлекать информацию из Memento (Memento является \"непрозрачным\" для клиентов и других объектов). </p>\n</blockquote>\n\n<p>Из описания паттерна мы понимаем, что класс <code>Originator</code> и класс <code>Memento</code> должны знать друг о друге гораздо больше, чем остальные классы. Именно для подчёркивания этого факта нужно разместить один внутри другого. Я бы размещал <code>Memento</code> внутри <code>Originator</code> и вынес бы в него сохранение и восстановление состояния, чтобы оставить в <code>Originator</code> только его основную ответственность.</p>\n\n<p>Поскольку в подавляющем большинстве случаев мы всё-таки хотим скрыть детали реализации, мы не используем этот приём слишком часто.</p>\n"}