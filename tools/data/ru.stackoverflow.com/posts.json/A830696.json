{"owner":{"reputation":16068,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":2,"last_activity_date":1526831974,"creation_date":1526831974,"answer_id":830696,"question_id":830562,"body":"<p>Добавьте ссылку на System.Management и используйте WMI-запрос к классу <em>Win32_NetworkAdapter</em>, у реальных интерфейсов должно быть <em>PhysicalAdapter=true</em>. Для получения Guid интерфейса можно использовать <code>NetworkInterface.GetAllNetworkInterfaces()</code>. Как-то так:</p>\n\n<pre><code>using System.Net;\nusing System.Net.Sockets;\nusing System.Net.NetworkInformation;\nusing System.Management;\n\n...\n\n//Определяет, является ли адаптер физическим\npublic static bool IsAdapterPhysical(string guid)\n{\n    ManagementObjectCollection mbsList = null;            \n\n    ManagementObjectSearcher mbs = new ManagementObjectSearcher(\n    \"SELECT PhysicalAdapter FROM Win32_NetworkAdapter WHERE GUID = '\" + guid + \"'\"\n    );\n    bool res = false;\n\n    using (mbs)\n    {\n        mbsList = mbs.Get();\n\n        foreach (ManagementObject mo in mbsList)\n        {                  \n            foreach (var p in mo.Properties)\n            {                        \n                if (p.Value != null)\n                {\n                    res = (bool)p.Value;\n                    break;\n                }\n                else res = false;                        \n            }                    \n        }\n        return res;\n    }\n\n}\n\n//Получает все локальные IP-адреса\npublic static List&lt;IPAddress&gt; GetIpAddresses()\n{\n    List&lt;IPAddress&gt; res = new List&lt;IPAddress&gt;(10);\n\n    var ifs = NetworkInterface.GetAllNetworkInterfaces();\n\n    foreach (var interf in ifs)\n    {\n        var ipprop=interf.GetIPProperties();\n        if (ipprop == null) continue;\n        var unicast = ipprop.UnicastAddresses;\n        if (unicast == null) continue;\n\n        if (IsAdapterPhysical(interf.Id.ToString()))\n        {\n            //находим первый Unicast-адрес\n            foreach (var addr in unicast)\n            {\n                if (addr.Address.AddressFamily != AddressFamily.InterNetwork) continue;\n                res.Add(addr.Address);\n                break;\n            }\n        }\n    }\n\n    return res;\n}\n</code></pre>\n"}