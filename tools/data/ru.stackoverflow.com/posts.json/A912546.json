{"owner":{"reputation":16137,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":3,"last_activity_date":1543386715,"creation_date":1543386715,"answer_id":912546,"question_id":912284,"body":"<p>Для сканеров, работающих в режиме эмуляции клавиатуры, единственный способ выделить ввод конкретного устройства - использование <a href=\"https://docs.microsoft.com/en-us/windows/desktop/inputdev/raw-input\" rel=\"nofollow noreferrer\">Raw Input</a>.</p>\n\n<p>Пример:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Runtime.InteropServices;\nusing System.Windows.Interop;\n\nnamespace WpfApp1\n{\n    public partial class MainWindow : Window\n    {        \n        //обработчик сообщений для окна\n        private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)\n        {\n\n            if (msg == Keyboard.WM_INPUT)\n            {\n                RAWINPUT data;\n                int size = Marshal.SizeOf(typeof(RAWINPUT));\n                Keyboard.GetRawInputData(lParam, Keyboard.RID_INPUT, out data, ref size,\n                    Marshal.SizeOf(typeof(RAWINPUTHEADER)));\n\n                if (data.Header.Type == Keyboard.RawInputType_Keyboard)\n                {                   \n                    //выведем нажатую клавишу\n                    textbox.Text += \"[\"+Keyboard.VKCodeToUnicode((uint)data.Keyboard.VirtualKey)+\"]\";                    \n\n                    //выведем тип события\n                    switch (data.Keyboard.Message)\n                    {\n                        case Keyboard.WM_KEYDOWN:\n                            textbox.Text += \" pressed\";\n                            break;\n                        case Keyboard.WM_KEYUP:\n                            textbox.Text += \" released\";\n                            break;\n                    }                    \n                    textbox.Text += Environment.NewLine;\n\n                    //выведем устройство-источник\n                    StringBuilder sb = new StringBuilder(500);\n                    uint strsize = (uint)sb.Capacity * 2;\n                    uint result = Keyboard.GetRawInputDeviceInfo(data.Header.Device, Keyboard.RIDI_DEVICENAME, sb, ref strsize);\n                    textbox.Text += \"Source device: \"+sb.ToString();\n                    textbox.Text += Environment.NewLine;\n                    textbox.Text += Environment.NewLine;\n\n                }                  \n            }\n\n            return IntPtr.Zero;\n        }\n\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void ButtonRegister_Click(object sender, RoutedEventArgs e)\n        {\n            //регистрируем обработчик сообщений\n            WindowInteropHelper h = new WindowInteropHelper(this);\n            HwndSource source = HwndSource.FromHwnd(h.Handle);\n            source.AddHook(new HwndSourceHook(WndProc));\n\n            //регистрируем окно в Raw Input\n            RAWINPUTDEVICE[] rid = new RAWINPUTDEVICE[1];\n            rid[0].UsagePage = Keyboard.HidPage_Generic;\n            rid[0].Usage = Keyboard.HidUsage_Keyboard;\n            rid[0].WindowHandle = h.Handle;\n\n            bool res = Keyboard.RegisterRawInputDevices(rid, 1, Marshal.SizeOf(typeof(RAWINPUTDEVICE)));\n            if (res == false) MessageBox.Show(\"RegisterRawInputDevices failed\");\n        }\n    }\n\n    // Вспомогательный класс для работы с клавиатурой\n    public class Keyboard\n    {\n        public const uint VK_CAPITAL = 0x14;\n        public const uint WM_INPUT = 0x00FF;\n        public const uint WM_KEYDOWN = 0x0100;\n        public const uint WM_KEYUP = 0x0101;\n        public const uint RID_INPUT = 0x10000003;\n        public const uint RIDI_DEVICENAME = 0x20000007;\n        public const uint RawInputType_Keyboard = 1;\n        public const ushort HidPage_Generic = 0x01;\n        public const ushort HidUsage_Keyboard = 0x06;\n\n        [DllImport(\"user32.dll\", SetLastError = true, CharSet = CharSet.Auto)]\n        public static extern uint GetRawInputDeviceList\n        (\n            [In, Out] RAWINPUTDEVICELIST[] RawInputDeviceList,\n            ref uint NumDevices,\n            uint Size\n        );\n\n        [DllImport(\"user32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\n        public static extern uint GetRawInputDeviceInfo(\n            IntPtr hDevice,\n            uint uiCommand,\n            [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder pData,\n            ref uint pcbSize);\n\n        [DllImport(\"user32.dll\")]\n        public static extern int GetRawInputData(IntPtr hRawInput, uint uiCommand, out RAWINPUT pData, ref int pcbSize, int cbSizeHeader);\n\n        [DllImport(\"user32.dll\")]\n        public static extern bool RegisterRawInputDevices([MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 0)]\n        RAWINPUTDEVICE[] pRawInputDevices, int uiNumDevices, int cbSize);\n\n        [DllImport(\"USER32.dll\")]\n        public static extern short GetKeyState(int vKey);\n\n        [DllImport(\"user32.dll\")]\n        public static extern short GetAsyncKeyState(int vKey);\n\n        [DllImport(\"user32.dll\")]\n        public static extern int ToUnicodeEx(\n            uint wVirtKey,\n            uint wScanCode,\n            byte[] lpKeyState,\n            [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder pwszBuff,\n            int cchBuff,\n            uint wFlags,\n            IntPtr dwhkl);\n\n        [DllImport(\"user32.dll\")]\n        public static extern bool GetKeyboardState(byte[] lpKeyState);\n\n        [DllImport(\"user32.dll\")]\n        public static extern uint MapVirtualKey(\n            uint uCode,\n            uint uMapType);\n\n        [DllImport(\"user32.dll\")]\n        public static extern IntPtr GetKeyboardLayout(uint idThread);\n\n        [DllImport(\"user32.dll\")]\n        public static extern uint GetWindowThreadProcessId(IntPtr hWnd, IntPtr ProcessId);\n\n        [DllImport(\"user32.dll\")]\n        public static extern IntPtr GetForegroundWindow();\n\n        //преобразование кода клавиши в символы\n        public static string VKCodeToUnicode(uint vkCode)\n        {\n            StringBuilder buf = new StringBuilder();\n\n            byte[] keyboardState = new byte[255];\n\n            short x;\n            byte y;\n\n            for (int i = 0; i &lt; 255; i++)\n            {\n                if (i == VK_CAPITAL)\n                {\n                    x = GetKeyState(i);\n                }\n                else\n                {\n                    x = GetAsyncKeyState(i);\n                }\n                y = 0;\n                if ((x &amp; 0x8000) != 0) y = (byte)(y | 0x80);\n                if ((x &amp; 0x0001) != 0) y = (byte)(y | 0x01);\n                keyboardState[i] = y;\n            }\n\n            ToUnicodeEx(vkCode, MapVirtualKey(vkCode, 0), keyboardState, buf, 5, 0,\n                GetKeyboardLayout(GetWindowThreadProcessId(GetForegroundWindow(), IntPtr.Zero)));\n            return buf.ToString();\n        }\n\n    }\n\n    // Структуры\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTDEVICELIST\n    {\n        public IntPtr hDevice;\n        public uint Type;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTDEVICE\n    {\n        /// &lt;summary&gt;Top level collection Usage page for the raw input device.&lt;/summary&gt;\n        public ushort UsagePage;\n        /// &lt;summary&gt;Top level collection Usage for the raw input device. &lt;/summary&gt;\n        public ushort Usage;\n        /// &lt;summary&gt;Mode flag that specifies how to interpret the information provided by UsagePage and Usage.&lt;/summary&gt;\n        public uint Flags;\n        /// &lt;summary&gt;Handle to the target device. If NULL, it follows the keyboard focus.&lt;/summary&gt;\n        public IntPtr WindowHandle;\n    }  \n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTHEADER\n    {\n        /// &lt;summary&gt;Type of device the input is coming from.&lt;/summary&gt;\n        public uint Type;\n        /// &lt;summary&gt;Size of the packet of data.&lt;/summary&gt;\n        public int Size;\n        /// &lt;summary&gt;Handle to the device sending the data.&lt;/summary&gt;\n        public IntPtr Device;\n        /// &lt;summary&gt;wParam from the window message.&lt;/summary&gt;\n        public IntPtr wParam;\n    }   \n\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTKEYBOARD\n    {\n        /// &lt;summary&gt;Scan code for key depression.&lt;/summary&gt;\n        public short MakeCode;\n        /// &lt;summary&gt;Scan code information.&lt;/summary&gt;\n        public ushort Flags;\n        /// &lt;summary&gt;Reserved.&lt;/summary&gt;\n        public short Reserved;\n        /// &lt;summary&gt;Virtual key code.&lt;/summary&gt;\n        public ushort VirtualKey;\n        /// &lt;summary&gt;Corresponding window message.&lt;/summary&gt;\n        public uint Message;\n        /// &lt;summary&gt;Extra information.&lt;/summary&gt;\n        public int ExtraInformation;\n    }\n\n    [StructLayout(LayoutKind.Explicit)]\n    public struct RAWINPUT\n    {\n        /// &lt;summary&gt;Header for the data.&lt;/summary&gt;\n        [FieldOffset(0)]\n        public RAWINPUTHEADER Header;      \n\n        [FieldOffset(16)]\n        public RAWINPUTKEYBOARD Keyboard;        \n\n    }    \n}\n</code></pre>\n\n<p>Внимание: код заточен под 32-разрядные приложения.</p>\n\n<p>Имя устройства в данном случае будет иметь вид <code>\\\\?\\ACPI#PNP0303#0#{884b96c3-56ef-11d1-bc8c-00a0c91405dd}</code>. Вас интересует часть между <code>\\\\?\\</code> и <code>{...}</code>, которая представляет собой слегка измененный Device Instance ID (PnpDeviceID в WMI).</p>\n"}