{"tags":["c#","аудио","wav"],"owner":{"reputation":2728,"user_id":212981,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/wtxks.jpg?s=128&g=1","display_name":"Andrei Khotko","link":"https://ru.stackoverflow.com/users/212981/andrei-khotko"},"is_answered":true,"view_count":183,"accepted_answer_id":749749,"answer_count":2,"score":4,"last_activity_date":1522063248,"creation_date":1510733706,"last_edit_date":1522061460,"question_id":744941,"link":"https://ru.stackoverflow.com/questions/744941/wav-%d1%84%d0%be%d1%80%d0%bc%d0%b0%d1%82-%d0%9f%d0%be%d1%87%d0%b5%d0%bc%d1%83-%d1%80%d0%b0%d0%b7%d0%bc%d0%b5%d1%80-%d0%b4%d0%b0%d0%bd%d0%bd%d1%8b%d1%85-%d0%bd%d0%b5-%d0%ba%d1%80%d0%b0%d1%82%d0%b5%d0%bd-%d1%80%d0%b0%d0%b7%d0%bc%d0%b5%d1%80%d1%83-%d1%81%d1%8d%d0%bc%d0%bf%d0%bb%d0%b0","title":"Wav-формат. Почему размер данных не кратен размеру сэмпла?","body":"<p>Пытаюсь прочитать Wav-файл. Считываю заголовок. </p>\n\n<p>Так получается, что размер данных (<code>Subchunk2Size</code>, для примера, он равен 178) всегда не кратен размеру блока (<code>BlockAlign</code>, равен 4). Количество каналов - 2. Если мы будем по очереди считывать по 2 байта из данных, то в конце концов у правого канала будет на 1 значение меньше. Почему так? И как правильно в таком случае разделить данные между двумя каналами?</p>\n\n<p>Класс, который читает Wav-файл (переделанный пример, взятый <a href=\"https://msdn.microsoft.com/ru-ru/library/ff827591.aspx\" rel=\"nofollow noreferrer\">отсюда</a>):</p>\n\n<pre><code>public class Parser\n{\n    public string FilePath { get; private set; } \n\n    public Parser(string filePath)\n    {\n        FilePath = filePath;\n    }\n\n    public ParsingResult Parse()\n    {\n        var header = new WavHeader();\n        byte[] data;\n        using (var fileStream = new FileStream(FilePath, FileMode.Open, FileAccess.Read))\n        {\n            using (var reader = new BinaryReader(fileStream))\n            {\n                header.ChunkId = reader.ReadInt32();\n                header.ChunkSize = reader.ReadInt32();\n                header.Format = reader.ReadInt32();\n                header.Subchunk1Id = reader.ReadInt32();\n                header.Subchunk1Size = reader.ReadInt32();\n                header.AudioFormat = reader.ReadInt16();\n                header.NumChannels = reader.ReadInt16();\n                header.SampleRate = reader.ReadInt32();\n                header.ByteRate = reader.ReadInt32();\n                header.BlockAlign = reader.ReadInt16();\n                header.BitsPerSample = reader.ReadInt16();\n\n                if (header.Subchunk1Size == 18)\n                {\n                    // Read extra values (Сюда при чтении моего файла не заходит)\n                    header.FmtExtraSize = reader.ReadInt16();\n                    reader.ReadBytes(header.FmtExtraSize);\n                }\n\n                header.Subchunk2Id = reader.ReadInt32();\n                header.Subchunk2Size = reader.ReadInt32();\n\n                data = reader.ReadBytes(header.Subchunk2Size);\n            }\n        }\n\n        var result = new ParsingResult(header, data);\n\n        return result;\n    }\n}\n</code></pre>\n\n<p>Класс <code>WavHeader</code>:</p>\n\n<pre><code>public struct WavHeader\n{\n    // WAV-формат начинается с RIFF-заголовка:\n\n    // Содержит символы \"RIFF\" в ASCII кодировке\n    // (0x52494646 в big-endian представлении)\n    public int ChunkId { get; set; }\n\n    // 36 + subchunk2Size, или более точно:\n    // 4 + (8 + subchunk1Size) + (8 + subchunk2Size)\n    // Это оставшийся размер цепочки, начиная с этой позиции.\n    // Иначе говоря, это размер файла - 8, то есть,\n    // исключены поля chunkId и chunkSize.\n    public int ChunkSize { get; set; }\n\n    // Содержит символы \"WAVE\"\n    // (0x57415645 в big-endian представлении)\n    public int Format { get; set; }\n\n    // Формат \"WAVE\" состоит из двух подцепочек: \"fmt \" и \"data\":\n    // Подцепочка \"fmt \" описывает формат звуковых данных:\n\n    // Содержит символы \"fmt \"\n    // (0x666d7420 в big-endian представлении)\n    public int Subchunk1Id { get; set; }\n\n    // 16 для формата PCM.\n    // Это оставшийся размер подцепочки, начиная с этой позиции.\n    public int Subchunk1Size { get; set; }\n\n    // Аудио формат, полный список можно получить здесь http://audiocoding.ru/wav_formats.txt\n    // Для PCM = 1 (то есть, Линейное квантование).\n    // Значения, отличающиеся от 1, обозначают некоторый формат сжатия.\n    public short AudioFormat { get; set; }\n\n    // Количество каналов. Моно = 1, Стерео = 2 и т.д.\n    public short NumChannels { get; set; }\n\n    // Частота дискретизации. 8000 Гц, 44100 Гц и т.д.\n    public int SampleRate { get; set; }\n\n    // sampleRate * numChannels * bitsPerSample/8\n    public int ByteRate { get; set; }\n\n    // numChannels * bitsPerSample/8\n    // Количество байт для одного сэмпла, включая все каналы.\n    public short BlockAlign { get; set; }\n\n    // Так называемая \"глубиная\" или точность звучания. 8 бит, 16 бит и т.д.\n    public short BitsPerSample { get; set; }\n\n    public int FmtExtraSize { get; set; }\n\n    // Подцепочка \"data\" содержит аудио-данные и их размер.\n\n    // Содержит символы \"data\"\n    // (0x64617461 в big-endian представлении)\n    public int Subchunk2Id { get; set; }\n\n    // numSamples * numChannels * bitsPerSample/8\n    // Количество байт в области данных.\n    public int Subchunk2Size { get; set; }\n}\n</code></pre>\n"}