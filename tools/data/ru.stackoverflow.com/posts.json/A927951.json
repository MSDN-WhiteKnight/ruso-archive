{"owner":{"reputation":16137,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":4,"last_activity_date":1546510472,"creation_date":1546510472,"answer_id":927951,"question_id":927569,"body":"<p>Можно использовать библиотеку <a href=\"https://www.opengl.org/resources/libraries/glut/\" rel=\"nofollow noreferrer\">GLUT</a></p>\n\n<pre><code>#include &lt;stdlib.h&gt;\n#include \"glut.h\"  \n\n//подключение библиотек импорта (используются директивы, специфичные для MS Visual C++)\n#pragma comment(lib, \"opengl32.lib\")\n#pragma comment(lib, \"glu32.lib\")\n#pragma comment(lib, \"glut32.lib\")\n\n//POINT3D - представляет точку в пространстве\ntypedef struct {\n    float x;\n    float y;\n    float z;\n} POINT3D;\n\n//SHAPE3D - представляет трехмерную фигуру\ntypedef struct {\n    POINT3D* points; //массив вершин\n    int count_points; //число вершин\n} SHAPE3D;\n\nSHAPE3D* shapes = NULL; //массив фигур для отображения\nint n_shapes = 0; //количество фигур\n\nvoid DrawShapes(SHAPE3D* shapes, int n_shapes) //выводит массив фигур\n{ \n int i=0;\n int j=0;\n\n glBegin(GL_LINES);\n\n for(i=0; i&lt;n_shapes; i++){\n     for(j=0; j&lt;shapes[i].count_points - 1; j++){\n         glVertex3f(shapes[i].points[j].x,shapes[i].points[j].y,shapes[i].points[j].z); \n         glVertex3f(shapes[i].points[j+1].x,shapes[i].points[j+1].y,shapes[i].points[j+1].z); \n     }\n } \n\n glEnd();\n glFlush();\n}\n\nvoid Draw(){\n    DrawShapes(shapes,n_shapes);\n}\n\nint main(int argc, char* argv[])\n{\n    //заполним массив тестовыми данными (2 грани куба)\n    n_shapes = 2;\n    shapes = (SHAPE3D*) malloc(sizeof(SHAPE3D) * n_shapes);\n\n    shapes[0].count_points = 5;\n    shapes[0].points = (POINT3D*) malloc(sizeof(POINT3D) * shapes[0].count_points);\n    shapes[0].points[0].x = 0.0;\n    shapes[0].points[0].y = 0.0;\n    shapes[0].points[0].z = 0.0;\n    shapes[0].points[1].x = 0.0;\n    shapes[0].points[1].y = 1.0;\n    shapes[0].points[1].z = 0.0;\n    shapes[0].points[2].x = 1.0;\n    shapes[0].points[2].y = 1.0;\n    shapes[0].points[2].z = 0.0;\n    shapes[0].points[3].x = 1.0;\n    shapes[0].points[3].y = 0.0;\n    shapes[0].points[3].z = 0.0;\n    shapes[0].points[4].x = 0.0;\n    shapes[0].points[4].y = 0.0;\n    shapes[0].points[4].z = 0.0;\n\n    shapes[1].count_points = 5;\n    shapes[1].points = (POINT3D*) malloc(sizeof(POINT3D) * shapes[1].count_points);\n    shapes[1].points[0].x = 0.0;\n    shapes[1].points[0].y = 0.0;\n    shapes[1].points[0].z = 0.0;\n    shapes[1].points[1].x = 0.0;\n    shapes[1].points[1].y = 0.0;\n    shapes[1].points[1].z = 1.0;\n    shapes[1].points[2].x = 1.0;\n    shapes[1].points[2].y = 0.0;\n    shapes[1].points[2].z = 1.0;\n    shapes[1].points[3].x = 1.0;\n    shapes[1].points[3].y = 0.0;\n    shapes[1].points[3].z = 0.0;\n    shapes[1].points[4].x = 0.0;\n    shapes[1].points[4].y = 0.0;\n    shapes[1].points[4].z = 0.0;\n\n    //инициализация GLUT\n    glutInit(&amp;argc,argv);\n    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);\n    glutInitWindowSize(600,400);      \n    glutInitWindowPosition(100,100);    \n    glutCreateWindow(\"Graphics\");     \n\n    //установка параметров камеры\n    glMatrixMode(GL_PROJECTION);\n    gluPerspective( 40.0, 1.0, 1.0, 10.0);\n    glMatrixMode(GL_MODELVIEW);\n    gluLookAt(\n        5.0, 5.0, 5.0,  //eye coordinates\n        0.0, 0.0, 0.0,  //center coordinates\n        0.0, 1.0, 0.0   //up direction\n        );      \n\n    //запуск цикла отрисовки\n    glutDisplayFunc(Draw);               \n    glutMainLoop(); \n\n    free(shapes[0].points);\n    free(shapes[1].points);\n    free(shapes);\n\n    return 0;\n}\n</code></pre>\n"}