{"tags":["c#","runtime","assembly","кодогенераторы"],"owner":{"reputation":4498,"user_id":248572,"user_type":"registered","accept_rate":85,"profile_image":"https://i.stack.imgur.com/52azV.png?s=128&g=1","display_name":"Kir_Antipov","link":"https://ru.stackoverflow.com/users/248572/kir-antipov"},"is_answered":true,"view_count":64,"accepted_answer_id":876603,"answer_count":1,"score":3,"last_activity_date":1535950269,"creation_date":1535915188,"question_id":876538,"link":"https://ru.stackoverflow.com/questions/876538/%d0%9a%d0%be%d0%bc%d0%bf%d0%b8%d0%bb%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d0%b8-%d0%bf%d0%be%d0%b2%d1%82%d0%be%d1%80%d0%bd%d0%b0%d1%8f-%d0%b7%d0%b0%d0%b3%d1%80%d1%83%d0%b7%d0%ba%d0%b0-%d1%81%d0%b1%d0%be%d1%80%d0%ba%d0%b8-%d0%b2-runtime","title":"Компилирование и повторная загрузка сборки в runtime","body":"<p>Товарищи, кратко опишу ситуацию:</p>\n\n<p>Пишу небольшое расширяемое приложение. Чтобы пользователи могли добавлять собственный функционал, в рамках программы создал интерфейсы, от которых они должны наследовать свои типы</p>\n\n<p>При этом я сделал генерацию кода также и внутри самого приложения для большего удобства</p>\n\n<hr>\n\n<p>Положим, есть такой интерфейс:</p>\n\n<pre><code>namespace MyAppNamespace\n{\n    public interface INamed\n    {\n        string Name { get; }\n    }\n}\n</code></pre>\n\n<p>Далее внутри приложения генерируется следующий код (и кладется в <code>resultCode</code>):</p>\n\n<pre><code>using MyAppNamespace;\n\npublic class Wrapper : INamed\n{\n    public string Name { get { return \"Test\"; } } \n}\n</code></pre>\n\n<p>Компилирую это дело:</p>\n\n<pre><code>// Указываю, что на выходе мне не нужен исполняемый файл, а также что сборку нужно создать по указанному пути\nCompilerParameters options = new CompilerParameters { GenerateExecutable = false, GenerateInMemory = false, OutputAssembly = $\"{SavePath}.dll\" };\noptions.ReferencedAssemblies.Add(new Uri(GetType().Assembly.CodeBase, UriKind.Absolute).LocalPath); // Добавляю ссылку на текущую сборку для наследования интерфейса\n// Получаю результат компиляции\nCompilerResults results = new Microsoft.CSharp.CSharpCodeProvider().CompileAssemblyFromSource(options, resultCode);\n// Опустим проверки\n// Загружаю сборку из массива байт (так как сам файл потом, возможно, может быть удален)\nAssembly asm = Assembly.Load(File.ReadAllBytes(results.PathToAssembly));\n// Создаю instance типа, который в сборке унаследован от нужного интерфейса\nINamed named = (INamed)Activator.CreateInstance(asm.DefinedTypes.First(x =&gt; x.ImplementedInterfaces.Contains(typeof(INamed))).AsType());  \nasm = null;\nGC.Collect(); // Вычищаю сборку из памяти. По крайней мере, я хочу в это верить\nreturn named;\n</code></pre>\n\n<p>После этого я могу спокойно получать доступ к <code>named.Name</code>. <br>\nЧерез некоторое время объект <em>\"выбрасывается\"</em>, пока пользователь явно не укажет, что хочет его использовать. В таком случае его нужно будет повторно достать из сборки</p>\n\n<p>Но есть одно жирное <strong>но</strong>: если я попытаюсь тем же самым образом загрузить сборку и достать из нее тип во второй раз, то визуально процесс пройдет успешно, но при попытке доступа к <code>named.Name</code> вылетит ошибка, что сборка, в которой он определен, не найдена</p>\n\n<hr>\n\n<p>Я могу поправить логику приложения и сделать считывание единоразовым (пожалуй, это будет даже правильнее), но сейчас для меня важно <em>понимание</em>, почему же так происходит: при первом считывании все работает как часы, а при втором считывании тем же самым способом из того же самого файла процесс проходит успешно, но объект оказывается <em>\"битым\"</em>, так как при попытке доступа к его свойствам я получу ошибку о том, что сборка не может быть загружена</p>\n"}