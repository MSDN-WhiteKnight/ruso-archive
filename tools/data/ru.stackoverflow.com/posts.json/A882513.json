{"owner":{"reputation":10274,"user_id":220553,"user_type":"registered","accept_rate":88,"profile_image":"https://i.stack.imgur.com/qTALZ.png?s=128&g=1","display_name":"EvgeniyZ","link":"https://ru.stackoverflow.com/users/220553/evgeniyz"},"is_accepted":false,"score":8,"last_activity_date":1537244641,"creation_date":1537244641,"answer_id":882513,"question_id":882416,"body":"<p>Уважаемый, ну мы же с вами программисты, что мешает нам написать простейшую программу по подсчету этих классов? Благо Microsoft <a href=\"https://referencesource.microsoft.com\" rel=\"noreferrer\">выкладывает</a> исходный код в удобном формате!</p>\n\n<p>Попробуем это сделать?</p>\n\n<ol>\n<li>Добавляем в проект что нибудь для работы с HTML кодом, я буду использовать <code>HtmlAgilityPack</code>.</li>\n<li>Заходим на нужный нам <a href=\"https://referencesource.microsoft.com\" rel=\"noreferrer\">сайт</a> и анализируем его:\n\n<ul>\n<li>Сбоку видим группы всяких namespace, просмотрев процесс загрузки сайта, мы увидим, что все это грузится со страницы <code>/results.html</code>.</li>\n<li>Каждый namespace ведет по адресу <code>/#mscorlib,namespaces</code>. Опять смотрим как и от куда грузиться и получаем следующий адрес: <code>/mscorlib/namespaces.html</code>.</li>\n<li>Теперь нужные нам классы. К сожалению Microsoft не делает пометок, что за тип такой в коде, но зато он отображает картинку типа, поигравшись с адресом изображений мы узнаем, что за классы отвечают изображения от <code>../content/icons/0.png</code> до <code>../content/icons/5.png</code></li>\n</ul></li>\n<li><p>Имея все эти данные - начинаем набрасывать код. Первым делом подготовим все необходимое, а точнее: вынесем адреса изображений в массив, а также сделаем базовый <code>Uri</code>:</p>\n\n<pre><code>public static Uri BaseUri = new Uri(\"https://referencesource.microsoft.com/\");\npublic static List&lt;string&gt; ClassImages = new List&lt;string&gt;\n{\n    \"../content/icons/0.png\",\n    \"../content/icons/1.png\",\n    \"../content/icons/2.png\",\n    \"../content/icons/3.png\",\n    \"../content/icons/4.png\",\n    \"../content/icons/5.png\"\n};\n</code></pre></li>\n<li><p>Создадим простой класс, который будет отправлять запрос и отдавать нам HTML:</p>\n\n<pre><code>public static async Task&lt;string&gt; Get(Uri uri)\n{\n    string data;\n    var cookieContainer = new CookieContainer();\n    using (var httpClientHandler = new HttpClientHandler { CookieContainer = cookieContainer })\n    {\n        using (var httpClient = new HttpClient(httpClientHandler))\n        {\n            data = await httpClient.GetStringAsync(uri);\n        }\n    }\n\n    return HttpUtility.HtmlDecode(data);\n}\n</code></pre></li>\n<li><p>Создадим класс для одного Namespace. Так, как в коде Microsoft зовут это как Group - я решил не отставать от них:</p>\n\n<pre><code>class Group\n{\n    public string Namespace { get; set; }\n    public string Type { get; set; }\n    public Uri Uri { get; set; }\n    public int Classes { get; set; }\n}\n</code></pre></li>\n<li><p>Теперь сделаем метод, который будет отдавать нам список всех Namespace на странице:</p>\n\n<pre><code>public static async Task&lt;IEnumerable&lt;Group&gt;&gt; GetGroups()\n{\n    List&lt;Group&gt; groups = new List&lt;Group&gt;();\n    var result = await Get(new Uri(BaseUri, \"results.html\"));\n    var html = new HtmlDocument();\n    html.LoadHtml(result);\n\n    var groupsNodes = html.DocumentNode.SelectNodes(\"//div[@class='resultGroup']/a\");\n    if (groupsNodes != null)\n    {\n        foreach (var group in groupsNodes)\n        {\n            var link = group.GetAttributeValue(\"href\", null);\n            if (link != null)\n            {\n                var arr = link.Split(',');\n                var nspace = arr[0].TrimStart('/', '#');\n                var type = arr[1];\n\n                groups.Add(new Group\n                {\n                    Namespace = nspace,\n                    Type = type,\n                    Uri = new Uri(BaseUri, $\"{nspace}/{type}.html\")\n                });\n\n            }\n        }\n    }\n\n    return groups;\n}\n</code></pre></li>\n<li><p>Теперь сделаем метод для подсчета изображений на странице конкретного Namespace (так, как Microsoft не очень любят частых подключений, делаем 3 попытки и увеличиваем интервал между подключениями):</p>\n\n<pre><code>public static async Task&lt;bool&gt; CountClasses(Group group)\n{\n    if (group == null) return false;\n\n    try\n    {\n        var result = await Get(group.Uri);\n        var html = new HtmlDocument();\n        html.LoadHtml(result);\n\n        var classesIcons = html.DocumentNode.SelectNodes(\"//img[@class='tDNI']\")\n            .Select(x =&gt; x.GetAttributeValue(\"src\", null))\n            .Where(x =&gt; ClassImages.Contains(x));\n\n        group.Classes = classesIcons.Count();\n        return true;\n    }\n    catch (Exception )\n    {\n        return false;\n    }\n}\n</code></pre></li>\n<li><p>Теперь объединим все это:</p>\n\n<pre><code>public static async Task Main(string[] args)\n{\n    var groups = await GetGroups();\n    var list = groups.ToList();\n\n    int count = 1;\n    foreach (var group in list)\n    {\n        Console.Write($\"[{count}/{list.Count}] {group.Namespace}. \");\n\n        var status = false;\n        var attempt = 0;\n\n        while (!status)\n        {\n            status = await CountClasses(group);\n            await Task.Delay(TimeSpan.FromSeconds(5));\n            if (attempt &gt;= 3) break;\n            if (!status) attempt++;\n        }\n\n        Console.WriteLine($\"Результат: {group.Classes}\");\n        count++;\n    }\n\n    Console.WriteLine($\"Всего: {list.Sum(x=&gt;x.Classes)}\");\n    Console.ReadKey();\n}\n</code></pre></li>\n<li><p>Запускаем и любуемся результатом:</p>\n\n<pre><code>[1/113] mscorlib. Результат: 1901\n[2/113] PresentationFramework. Результат: 1793\n[3/113] System.Web. Результат: 1854\n[4/113] System. Результат: 1431\n[5/113] System.Windows.Forms. Результат: 1381\n[6/113] PresentationCore. Результат: 1203\n[7/113] System.ServiceModel. Результат: 3216\n[8/113] System.Data. Результат: 675\n[9/113] System.Data.Entity. Результат: 1280\n[10/113] System.Core. Результат: 668\n[11/113] System.Xml. Результат: 702\n[12/113] System.Activities. Результат: 705\n[13/113] WindowsBase. Результат: 416\n[14/113] System.Activities.Presentation. Результат: 705\n[15/113] System.Drawing. Результат: 175\n[16/113] Microsoft.VisualBasic. Результат: 86\n[17/113] System.IdentityModel. Результат: 612\n[18/113] System.Web.Extensions. Результат: 310\n[19/113] System.Runtime.Serialization. Результат: 326\n[20/113] System.Workflow.ComponentModel. Результат: 517\n[21/113] System.Data.SqlXml. Результат: 313\n[22/113] System.Data.Linq. Результат: 377\n[23/113] UIAutomationClientsideProviders. Результат: 107\n[24/113] PresentationBuildTasks. Результат: 211\n[25/113] System.Configuration. Результат: 155\n[26/113] System.Management. Результат: 109\n[27/113] System.Data.Services. Результат: 184\n[28/113] System.IO.Compression.FileSystem. Результат: 2\n[29/113] System.IO.Log. Результат: 49\n[30/113] System.Workflow.Activities. Результат: 411\n[31/113] System.Management.Automation. Результат: 1638\n[32/113] Microsoft.CSharp. Результат: 7\n[33/113] System.Runtime.Serialization.Formatters.Soap. Результат: 0\n[34/113] System.Web.Mobile. Результат: 348\n[35/113] System.Web.Services. Результат: 304\n[36/113] System.Security. Результат: 117\n[37/113] System.Data.Services.Client. Результат: 137\n[38/113] System.ServiceModel.Web. Результат: 131\n[39/113] System.ServiceModel.Activities. Результат: 274\n[40/113] System.Workflow.Runtime. Результат: 196\n[41/113] System.ComponentModel.DataAnnotations. Результат: 58\n[42/113] System.Activities.Core.Presentation. Результат: 171\n[43/113] System.Design. Результат: 825\n[44/113] Microsoft.Build.Tasks.v4.0. Результат: 283\n[45/113] UIAutomationClient. Результат: 81\n[46/113] System.Runtime.Remoting. Результат: 155\n[47/113] Microsoft.JScript. Результат: 156\n[48/113] System.Xml.Linq. Результат: 46\n[49/113] System.Net. Результат: 70\n[50/113] Microsoft.Build.Engine. Результат: 210\n[51/113] System.Transactions. Результат: 170\n[52/113] System.Messaging. Результат: 63\n[53/113] System.Data.Entity.Design. Результат: 71\n[54/113] Microsoft.Transactions.Bridge. Результат: 439\n[55/113] Accessibility. Результат: 1\n[56/113] System.ServiceModel.Internals. Результат: 129\n[57/113] System.Web.DynamicData. Результат: 82\n[58/113] System.WorkflowServices. Результат: 170\n[59/113] System.ServiceModel.Discovery. Результат: 206\n[60/113] ReachFramework. Результат: 327\n[61/113] ComSvcConfig. Результат: 31\n[62/113] System.AddIn. Результат: 61\n[63/113] System.Runtime.Caching. Результат: 39\n[64/113] System.ServiceModel.Activation. Результат: 83\n[65/113] System.Xaml. Результат: 83\n[66/113] SMSvcHost. Результат: 45\n[67/113] System.ComponentModel.Composition. Результат: 108\n[68/113] System.Deployment. Результат: 214\n[69/113] System.Printing. Результат: 124\n[70/113] System.Activities.DurableInstancing. Результат: 47\n[71/113] Microsoft.Build.Framework. Результат: 48\n[72/113] Microsoft.Build.Utilities.v4.0. Результат: 43\n[73/113] Microsoft.Web.Administration. Результат: 73\n[74/113] System.DirectoryServices. Результат: 104\n[75/113] System.Numerics. Результат: 5\n[76/113] System.ServiceModel.Channels. Результат: 72\n[77/113] PresentationFramework.Aero. Результат: 14\n[78/113] System.Runtime.DurableInstancing. Результат: 47\n[79/113] WsatConfig. Результат: 56\n[80/113] WsatUI. Результат: 45\n[81/113] PresentationUI. Результат: 73\n[82/113] System.Web.ApplicationServices. Результат: 14\n[83/113] System.Data.Services.Design. Результат: 48\n[84/113] PresentationFramework.Luna. Результат: 9\n[85/113] System.Web.Entity. Результат: 33\n[86/113] System.EnterpriseServices. Результат: 80\n[87/113] XamlBuildTask. Результат: 32\n[88/113] System.Data.DataSetExtensions. Результат: 14\n[89/113] PresentationFramework.Royale. Результат: 9\n[90/113] SMDiagnostics. Результат: 22\n[91/113] System.Web.Extensions.Design. Результат: 89\n[92/113] System.ServiceModel.Routing. Результат: 60\n[93/113] System.IdentityModel.Selectors. Результат: 50\n[94/113] UIAutomationTypes. Результат: 37\n[95/113] System.ServiceProcess. Результат: 15\n[96/113] Microsoft.Build.Utilities.v3.5. Результат: 27\n[97/113] System.DirectoryServices.Protocols. Результат: 76\n[98/113] PresentationFramework.Classic. Результат: 10\n[99/113] System.Web.Entity.Design. Результат: 28\n[100/113] Microsoft.VisualBasic.Activities.Compiler. Результат: 15\n[101/113] UIAutomationProvider. Результат: 1\n[102/113] System.ServiceModel.WasHosting. Результат: 16\n[103/113] svcutil. Результат: 4\n[104/113] System.Web.RegularExpressions. Результат: 76\n[105/113] System.AddIn.Contract. Результат: 2\n[106/113] System.Configuration.Install. Результат: 16\n[107/113] System.Web.DataVisualization. Результат: 304\n[108/113] System.Windows.Forms.DataVisualization. Результат: 264\n[109/113] WindowsFormsIntegration. Результат: 8\n[110/113] System.Xaml.Hosting. Результат: 13\n[111/113] System.Drawing.Design. Результат: 15\n[112/113] System.Windows.Presentation. Результат: 2\n[113/113] System.Windows.Input.Manipulations. Результат: 13\nВсего: 31556\n</code></pre></li>\n</ol>\n\n<p>Получаем ответ: <strong>~31556 класса в C#</strong>.\nP.S. Не стал расписывать как и что тут работает, а также не стал делать многопоточность и прочее (ибо программа на один запуск).</p>\n\n<p>Также можно заметить, что <code>System.Runtime.Serialization.Formatters.Soap</code> выдал <code>0</code>, это потому что сервер меня походу заблокировал и выдает вечно <code>Server encountered an internal error.</code>. Так что в общий подсчет этот Namestace не вошел.</p>\n\n<p>И также, хочу заметить, что я не уверен, что все классы здесь находятся или все грамотно отображаются в боковом меню на сайте. По этому результат приблизительный...</p>\n"}