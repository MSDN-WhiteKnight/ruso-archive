{"tags":["c#","winforms","компиляция"],"owner":{"reputation":77,"user_id":343969,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/34379e5684f245d923dfd8c0b0411867?s=128&d=identicon&r=PG&f=1","display_name":"Antinet","link":"https://ru.stackoverflow.com/users/343969/antinet"},"is_answered":true,"view_count":123,"accepted_answer_id":1006815,"answer_count":2,"score":0,"last_activity_date":1564113594,"creation_date":1563986882,"last_edit_date":1563990677,"question_id":1006349,"link":"https://ru.stackoverflow.com/questions/1006349/%d0%9a%d0%b0%d0%ba-%d1%81%d0%be%d0%b7%d0%b4%d0%b0%d1%82%d1%8c-dynamicmethod-%d0%b8%d0%b7-il-%d0%ba%d0%be%d0%b4%d0%b0","title":"Как создать DynamicMethod из IL-кода?","body":"<p>мне необходимо создать DynamicMethod по IL-коду следующего метода:</p>\n\n<pre><code>public int test(string v1, int v2)\n{\n    return (int)call(new object[]{ v1, v2 });\n}\n</code></pre>\n\n<p>где </p>\n\n<pre><code>public object call(object[] args)\n{\n    // что-то возвращающее int\n}\n</code></pre>\n\n<p>Я переписал код из ildasm в ILGenerator.Emit, но при выполнении сгенерированного делегата появляется ошибка недопустимого кода MSIL. Помогите, пожалуйста, создать корректные вызовы ILGenerator.Emit для генерации метода, либо пришлите ссылки на литературу по этому. Заранее благодарю!</p>\n\n<pre><code>Type[] arg_types = new Type[] { typeof(string), typeof(int) };\n            var dn = new DynamicMethod(\"myMethod\", typeof(int), arg_types);\n            var il = dn.GetILGenerator();\n            il.Emit(OpCodes.Nop);\n            il.Emit(OpCodes.Ldarg_0);\n            il.Emit(OpCodes.Ldc_I4_2);\n            il.Emit(OpCodes.Newarr, typeof(object));\n            il.Emit(OpCodes.Dup);\n            il.Emit(OpCodes.Ldc_I4_0);\n            il.Emit(OpCodes.Ldarg_1);\n            il.Emit(OpCodes.Stelem_Ref);\n            il.Emit(OpCodes.Dup);\n            il.Emit(OpCodes.Ldc_I4_1);\n            il.Emit(OpCodes.Ldarg_2);\n            il.Emit(OpCodes.Box, typeof(int));\n            il.Emit(OpCodes.Stelem_Ref);\n            il.Emit(OpCodes.Call, typeof(Form1).GetMethod(\"call\"));\n            il.Emit(OpCodes.Unbox_Any, typeof(int));\n            il.Emit(OpCodes.Stloc_0);\n            il.Emit(OpCodes.Br_S);\n            il.Emit(OpCodes.Ldloc_0);\n            il.Emit(OpCodes.Ret);\n            var del = dn.CreateDelegate(typeof(Func&lt;string, int, int&gt;));\n            del.DynamicInvoke(\"test\",77);\n</code></pre>\n"}