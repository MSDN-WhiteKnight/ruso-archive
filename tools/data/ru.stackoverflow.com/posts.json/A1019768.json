{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1567492961,"last_edit_date":1567492961,"creation_date":1567452445,"answer_id":1019768,"question_id":1019763,"body":"<p>Никак, потому что исключения нет. Деление на ноль для double вместо исключения выдает специальное значение (Infinity или NaN):</p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#floating-point-arithmetic-overflow\" rel=\"nofollow noreferrer\">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#floating-point-arithmetic-overflow</a></p>\n\n<blockquote>\n  <p>Arithmetic operations with the float and double types never throw an exception. The result of arithmetic operations with those types can be one of special values that represent infinity and not-a-number</p>\n\n<pre><code>double a = 1.0 / 0.0;\nConsole.WriteLine(a);                    // output: Infinity\nConsole.WriteLine(double.IsInfinity(a)); // output: True\n\nConsole.WriteLine(double.MaxValue + double.MaxValue); // output: Infinity\n\ndouble b = 0.0 / 0.0;\nConsole.WriteLine(b);                // output: NaN\nConsole.WriteLine(double.IsNaN(b));  // output: True\n</code></pre>\n</blockquote>\n\n<p>Но для отлова деления на ноль в общем случае это использовать нельзя, так как эти же значения могут говорить о переполнении или, скажем, о конвертации в double непредставимого в нем битового значения. Так что только проверка делителя перед делением.</p>\n\n<p>Конкретно для Windows на архитектурах x86/x86-64 можно включить аппаратное исключение при делении на ноль с помощью <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/controlfp-s?view=vs-2017\" rel=\"nofollow noreferrer\">_controlfp_s</a>:</p>\n\n<pre><code>using System;\nusing System.Runtime.InteropServices;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        /* msvcrt.dll - недокументированная версия Microsoft CRT, поставляемая с Windows.\n        Можно вместо нее взять CRT из конкретной версии Visual C++ Redistributable, например\n        msvcr110.dll для Visual C++ 2012 */\n        [DllImport(\"msvcrt.dll\", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]\n        static extern uint _controlfp_s(ref uint _CurrentState, uint _NewValue, uint _Mask);\n\n        const uint _EM_ZERODIVIDE = 0x00000008;\n        const uint _MCW_EM = 0x0008001f;\n\n        static bool EnableFloatingPointTrap()\n        {\n            uint control_word = 0;\n            uint err = _controlfp_s(ref control_word, 0, 0);\n            if (err != 0) return false;\n\n            //снимаем флаг, маскирующий исключение при делении на ноль\n            uint control_word_new = control_word &amp; ~_EM_ZERODIVIDE;\n            err = _controlfp_s(ref control_word, control_word_new, _MCW_EM);\n            if (err != 0) return false;\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            EnableFloatingPointTrap();\n            double x = 0.0;\n            double y = 1.0 / x; //System.DivideByZeroException\n            Console.WriteLine(y);\n\n            Console.ReadKey();\n\n        }\n    }  \n}\n</code></pre>\n\n<p>Однако делать так не рекомендуется, так как неизвестно, как поведет себя CLR, если поменять флаги процессора на неожиданные для нее значения. Кроме того, другой код может вернуть назад значение флага.</p>\n"}