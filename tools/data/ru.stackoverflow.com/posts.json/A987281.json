{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":0,"last_activity_date":1559201301,"creation_date":1559201301,"answer_id":987281,"question_id":987112,"body":"<p>Например так (требует разрешения unsafe-кода):</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Buffers;\n\nnamespace CilBytecodeParserTest\n{\n    class Program\n    {\n        unsafe class StringMemoryManager&lt;T&gt; : MemoryManager&lt;T&gt;\n        {\n            MemoryHandle h;            \n            int len;\n\n            public StringMemoryManager(string s)\n            {                \n                h = s.AsMemory().Pin();               \n                len = s.Length * 2;\n            }\n\n            public override Span&lt;T&gt; GetSpan()\n            {                \n                return new Span&lt;T&gt;(h.Pointer, len/Marshal.SizeOf(typeof(T)));\n            }\n\n            public override MemoryHandle Pin(int elementIndex = 0)\n            {\n                return h; //useless\n            }\n\n            public override void Unpin()\n            {\n                //useless\n            }\n\n            protected override void Dispose(bool disposing)\n            {\n                if(disposing) h.Dispose();\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            string text = \"Hello\";  \n            var mngr = new StringMemoryManager&lt;byte&gt;(text);\n            Memory&lt;byte&gt; mem = mngr.Memory;\n        }\n\n    }\n}\n</code></pre>\n\n<p>MemoryHandle позволяет получить указатель для любого Memory. MemoryManager создает Memory на основе любого Span, а Span можно создать из указателя. Получается универсальный конвертор всего во все. Недостаток в том, что строка будет закреплена в памяти на все время работы с нею. Если же вы спрашиваете, как сделать это <strong>нормально</strong> (без низкоуровневых хаков), то, видимо, никак. Не нашел такого API.</p>\n"}