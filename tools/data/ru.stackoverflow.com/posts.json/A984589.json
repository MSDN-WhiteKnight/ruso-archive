{"owner":{"reputation":2728,"user_id":212981,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/wtxks.jpg?s=128&g=1","display_name":"Andrei Khotko","link":"https://ru.stackoverflow.com/users/212981/andrei-khotko"},"is_accepted":true,"score":4,"last_activity_date":1558598072,"creation_date":1558598072,"answer_id":984589,"question_id":984352,"body":"<p>Вообще каждый программист находит для себя свой стиль. Важно лишь соблюдать базовые принципы, заложенные той или иной технологией. </p>\n\n<p>Мой ответ будет основан исключительно на собственном опыте и может не совпадать с мнением других. </p>\n\n<p><strong>Первое</strong>, что сразу бросилось в глаза - это <strong>методы без параметров и возвращаемых значений</strong>. Да, есть методы, которые могут быть без параметров и не возвращать ничего (собственно, ваши методы <code>StartProgram()</code> и <code>Close()</code>). Но вот лично мне хотелось бы, чтобы метод <code>MathGetNumber()</code> возвращал значение, а не присваивал его какой-то глобальной переменной. Желательно, чтобы метод получал необходимые значения, проводил с ними определенные манипуляции и в случае необходимости возвращал значение. Если хотите все же оставить метод таким, то тогда лучше было бы его назвать, например, так: <code>MathReadAB()</code>. Старайтесь, чтобы ваш метод делал ровно то, о чем говорит его название.</p>\n\n<p><strong>Второе</strong>: в C# в классах <strong>private-поля</strong> принято именовать <strong>с маленькой буквы</strong>:</p>\n\n<pre><code>private static int a;\n</code></pre>\n\n<p>а еще некоторые программисты к private-полям добавляют приставку с нижним подчеркиванием (это уже дело вкуса; при стандартных настройках Visual Studio подсказками предлагает именно такой вариант именования):</p>\n\n<pre><code>private static int _a;\n</code></pre>\n\n<p>Для C#, как и для любого другого ЯП, есть <a href=\"https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md\" rel=\"nofollow noreferrer\">соглашение по именованию членов, переменных, функций...</a> и <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions\" rel=\"nofollow noreferrer\">соглашение по написанию кода</a>.</p>\n\n<p><strong>Третье:</strong> не пытайтесь сэкономить на памяти, объявляя вместо <code>int</code> переменную типа <code>byte</code>. Это, может быть, и хорошо, однако излишняя оптимизация часто не оправдана. В данном случае, мне кажется, она не оправдана. К тому же, если вы проявите невнимательность, то тип <code>byte</code> может переполниться без вашего ведома, что может привести к непредсказуемым результатам работы программы. В мировой практике для итераторов цикла и любых других счетчиков принято брать тип <code>int</code>.</p>\n\n<p><strong>Четвертое:</strong> В методе <code>MathOperation()</code> можно избавиться от лишних фигурных скобок, заменив</p>\n\n<pre><code>if (A == 0 &amp;&amp; B == 0)\n{\n    Console.WriteLine(\"Числа имеют значение 0, продолжать работу программы нет смысла, завершение\");\n}\nelse\n{\n    //else-code\n}\n</code></pre>\n\n<p>на</p>\n\n<pre><code>if (A == 0 &amp;&amp; B == 0)\n{\n    Console.WriteLine(\"Числа имеют значение 0, продолжать работу программы нет смысла, завершение\");\n    return;\n}\n\n//else-code\n</code></pre>\n\n<p>Это довольно частая и хорошая практика, иначе если у вас в коде будет много проверок, будет много вложенных <code>else</code> и фигурных скобок, что ухудшает читаемость кода.</p>\n\n<p><strong>Пятое:</strong> Это чисто логическая ошибка. Если у вас <code>A=1</code> и <code>B=0</code>, то программа продолжит свою работу, что приведет к <code>DivideByZeroException</code>. Нужно переделать условие <code>if (B == 0)</code>. Этого будет достаточно.</p>\n\n<p><strong>Шестое:</strong> Вместо конструкции</p>\n\n<pre><code>if (Operate &lt;= 4)\n{\n    switch (Operate)\n    {\n        case 1:\n            Console.WriteLine(\"Ваше число = \" + (A + B));\n            break;\n        case 2:\n            Console.WriteLine(\"Ваше число = \" + (A - B));\n            break;\n        case 3:\n            Console.WriteLine(\"Ваше число = \" + (A* B));\n            break;\n        case 4:\n            Console.WriteLine(\"Ваше число = \" + (A / B));\n            break;\n    }\n}\nelse\n{\n    Console.WriteLine(\"Хватит шалить, вводи число от 1 до 4 включительно\");\n    MathOperation();\n}\n</code></pre>\n\n<p>лучше воспользоваться <code>default:</code></p>\n\n<pre><code>    switch (Operate)\n    {\n        case 1:\n            Console.WriteLine(\"Ваше число = \" + (A + B));\n            break;\n        case 2:\n            Console.WriteLine(\"Ваше число = \" + (A - B));\n            break;\n        case 3:\n            Console.WriteLine(\"Ваше число = \" + (A* B));\n            break;\n        case 4:\n            Console.WriteLine(\"Ваше число = \" + (A / B));\n            break;\n        default:\n            Console.WriteLine(\"Хватит шалить, вводи число от 1 до 4 включительно\");\n            MathOperation();\n            break;\n    }\n</code></pre>\n\n<p>В остальном все хорошо. Только Ваш стиль с объявлением переменных в начале метода - для меня непривычен, но он имеет место быть. Постарался осветить все проблемные места, что увидел.</p>\n"}