{"owner":{"reputation":16068,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":2,"last_activity_date":1530642769,"last_edit_date":1530642769,"creation_date":1529902311,"answer_id":846263,"question_id":842206,"body":"<p>Так можно получить названия адаптера и соответствующего сетевого подключения:</p>\n\n<pre><code>#include &lt;winsock2.h&gt;\n#include &lt;iphlpapi.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;tchar.h&gt;\n#include &lt;locale.h&gt;\n\n#include &lt;Netlistmgr.h&gt;\n#pragma comment(lib, \"ole32.lib\")\n// Link with Iphlpapi.lib\n#pragma comment(lib, \"IPHLPAPI.lib\")\n\n#define WORKING_BUFFER_SIZE 15000\n#define MAX_TRIES 3\n\n#define MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x))\n#define FREE(x) HeapFree(GetProcessHeap(), 0, (x))\n\n/********************************************************************************/\n\n//Получает информацию о соединении по GUID адаптера\nNLM_CONNECTIVITY GetAdapterConnectivity(LPCWSTR adapter){\n\n    INetworkListManager *pNetworkListManager = NULL; \n    HRESULT hr = CoCreateInstance(CLSID_NetworkListManager, NULL,\n            CLSCTX_ALL, IID_INetworkListManager,\n            (LPVOID *)&amp;pNetworkListManager);\n    if(FAILED(hr)){ \n        printf(\"CoCreateInstance failed: 0x%x\\n\",(UINT)hr);\n        return (NLM_CONNECTIVITY)0; \n    }\n\n    IEnumNetworkConnections* pEnum = NULL;\n    hr = pNetworkListManager-&gt;GetNetworkConnections(&amp;pEnum);\n    if(FAILED(hr)){ \n        pNetworkListManager-&gt;Release();\n        printf(\"GetNetworkConnections failed: 0x%x\\n\",(UINT)hr);\n        return (NLM_CONNECTIVITY)0; \n    }\n\n    const int NUM_CONNECTION = 10;\n    INetworkConnection* pNetworkConnections[NUM_CONNECTION];\n    ULONG cFetched = 0;\n    BOOL  bDone = FALSE;\n    GUID guid;\n    NLM_CONNECTIVITY nlmc=(NLM_CONNECTIVITY)0;\n\n    while (!bDone)\n    {\n        hr = pEnum-&gt;Next(NUM_CONNECTION, pNetworkConnections, &amp;cFetched);\n        if (SUCCEEDED(hr) &amp;&amp; (cFetched &gt; 0))\n        {\n            for (ULONG i = 0; i &lt; cFetched; i++)\n            {\n                pNetworkConnections[i]-&gt;GetAdapterId(&amp;guid);\n\n                OLECHAR* guidString;\n                StringFromCLSID(guid, &amp;guidString);             \n                if(wcscmp(adapter,guidString) == 0){\n                    pNetworkConnections[i]-&gt;GetConnectivity(&amp;nlmc);\n                }\n                // ensure memory is freed\n                ::CoTaskMemFree(guidString);\n                pNetworkConnections[i]-&gt;Release();  \n            }\n        }\n        else\n        {\n            bDone = TRUE;\n        }\n    }\n\n    pEnum-&gt;Release();\n    pNetworkListManager-&gt;Release();\n    return nlmc;\n}\n\nint _tmain(int argc, _TCHAR* argv[])\n{               \n    setlocale(LC_ALL,\"Russian\");\n    CoInitialize(NULL); \n\n    /* Declare and initialize variables */\n\n    DWORD dwSize = 0;\n    DWORD dwRetVal = 0;\n\n    unsigned int i = 0;\n\n    // Set the flags to pass to GetAdaptersAddresses\n    ULONG flags = GAA_FLAG_INCLUDE_PREFIX;\n\n    // default to unspecified address family (both)\n    ULONG family = AF_UNSPEC;\n\n    LPVOID lpMsgBuf = NULL;\n\n    PIP_ADAPTER_ADDRESSES pAddresses = NULL;\n    ULONG outBufLen = 0;\n    ULONG Iterations = 0;\n\n    PIP_ADAPTER_ADDRESSES pCurrAddresses = NULL;\n    PIP_ADAPTER_UNICAST_ADDRESS pUnicast = NULL;\n    PIP_ADAPTER_ANYCAST_ADDRESS pAnycast = NULL;\n    PIP_ADAPTER_MULTICAST_ADDRESS pMulticast = NULL;\n    IP_ADAPTER_DNS_SERVER_ADDRESS *pDnServer = NULL;\n    IP_ADAPTER_PREFIX *pPrefix = NULL;\n\n    // Allocate a 15 KB buffer to start with.\n    outBufLen = WORKING_BUFFER_SIZE;\n\n    do {\n\n        pAddresses = (IP_ADAPTER_ADDRESSES *) MALLOC(outBufLen);\n        if (pAddresses == NULL) {\n            printf (\"Memory allocation failed for IP_ADAPTER_ADDRESSES struct\\n\");\n            goto End;\n        }\n\n        dwRetVal =\n            GetAdaptersAddresses(family, flags, NULL, pAddresses, &amp;outBufLen);\n\n        if (dwRetVal == ERROR_BUFFER_OVERFLOW) {\n            FREE(pAddresses);\n            pAddresses = NULL;\n        } else {\n            break;\n        }\n\n        Iterations++;\n\n    } while ((dwRetVal == ERROR_BUFFER_OVERFLOW) &amp;&amp; (Iterations &lt; MAX_TRIES));\n\n    if (dwRetVal == NO_ERROR) {\n        // If successful, output some information from the data we received\n        wprintf(L\"*** Network connections ***\\n\\n\");\n        pCurrAddresses = pAddresses;\n        while (pCurrAddresses) {            \n\n            WCHAR* adapter = NULL;\n            int c = strlen(pCurrAddresses-&gt;AdapterName);\n            adapter = (WCHAR*)MALLOC((c+1) * 2);\n            ZeroMemory(adapter,(c+1) * 2);\n            MultiByteToWideChar(CP_ACP,0,pCurrAddresses-&gt;AdapterName,c,adapter,c);\n            //wprintf(L\"\\tGUID: %s\\n\", adapter);    \n            NLM_CONNECTIVITY nlmc = GetAdapterConnectivity(adapter);\n            if(nlmc != NLM_CONNECTIVITY_DISCONNECTED){\n                wprintf(L\"Adapter: %s\\n\", pCurrAddresses-&gt;Description);\n                wprintf(L\"Network: %s\\n\", pCurrAddresses-&gt;FriendlyName);    \n                wprintf(L\"Connected to:\", (UINT)nlmc);  \n                if (nlmc &amp; NLM_CONNECTIVITY_IPV4_LOCALNETWORK) wprintf(L\" IPv4 LAN;\");\n                if (nlmc &amp; NLM_CONNECTIVITY_IPV4_INTERNET) wprintf(L\" IPv4 Internet;\");\n                if (nlmc &amp; NLM_CONNECTIVITY_IPV6_LOCALNETWORK) wprintf(L\" IPv6 LAN;\");\n                if (nlmc &amp; NLM_CONNECTIVITY_IPV6_INTERNET) wprintf(L\" IPv6 Internet\");\n                wprintf(L\"\\n\\n\");\n            }\n            FREE(adapter);                  \n\n            pCurrAddresses = pCurrAddresses-&gt;Next;\n        }\n    } else {\n        printf(\"Call to GetAdaptersAddresses failed with error: %d\\n\",\n               dwRetVal);\n        if (dwRetVal == ERROR_NO_DATA)\n            printf(\"\\tNo addresses were found for the requested parameters\\n\");\n        else {\n\n            if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                    FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, \n                    NULL, dwRetVal, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),   \n                    // Default language\n                    (LPTSTR) &amp; lpMsgBuf, 0, NULL)) {\n                printf(\"\\tError: %s\", lpMsgBuf);\n                LocalFree(lpMsgBuf);\n                if (pAddresses)\n                    FREE(pAddresses);\n               goto End;\n            }\n        }\n    }\n\n    if (pAddresses) {\n        FREE(pAddresses);\n    }\n\n    End:\n    system(\"PAUSE\");\n    return 0;\n}\n</code></pre>\n\n<p>А так - имя сети:</p>\n\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;tchar.h&gt;\n#include &lt;locale.h&gt;\n\n#include &lt;Netlistmgr.h&gt;\n#pragma comment(lib, \"ole32.lib\")\n\n/********************************************************************************/\n\nint _tmain(int argc, _TCHAR* argv[])\n{               \n    setlocale(LC_ALL,\"Russian\");\n    CoInitialize(NULL); \n\n    INetworkListManager *pNetworkListManager = NULL; \n    IEnumNetworkConnections* pEnum = NULL;\n\n    //инициализация Network List Manager API\n    HRESULT hr = CoCreateInstance(CLSID_NetworkListManager, NULL,\n            CLSCTX_ALL, IID_INetworkListManager,\n            (LPVOID *)&amp;pNetworkListManager);\n\n    if(FAILED(hr)){ \n        printf(\"CoCreateInstance failed: 0x%x\\n\",(UINT)hr);\n        goto End;\n    }\n\n    hr = pNetworkListManager-&gt;GetNetworkConnections(&amp;pEnum); //получаем сетевые подключения\n    if(FAILED(hr)){         \n        printf(\"GetNetworkConnections failed: 0x%x\\n\",(UINT)hr);\n        goto End;\n    }\n\n    wprintf(L\"*** Networks *** \\n\\n\");\n\n    const int NUM_CONNECTION = 10;\n    INetworkConnection* pNetworkConnections[NUM_CONNECTION];\n    ULONG cFetched = 0;\n    BOOL  bDone = FALSE;    \n    NLM_CONNECTIVITY nlmc;\n    INetwork* pNetwork = NULL;\n    BSTR name;\n\n    while (!bDone)\n    {\n        hr = pEnum-&gt;Next(NUM_CONNECTION, pNetworkConnections, &amp;cFetched);\n        if (SUCCEEDED(hr) &amp;&amp; (cFetched &gt; 0))\n        {\n            for (ULONG i = 0; i &lt; cFetched; i++)\n            {\n                nlmc=(NLM_CONNECTIVITY)0;\n                name = NULL;                \n\n                hr = pNetworkConnections[i]-&gt;GetNetwork(&amp;pNetwork); //получаем сеть, соответствующую подключению\n                if(SUCCEEDED(hr)){\n                    hr = pNetwork-&gt;GetName(&amp;name); //получаем имя сети\n                    if(SUCCEEDED(hr) &amp;&amp; name != NULL){\n                        wprintf(L\"%s \",name);                       \n\n                        pNetworkConnections[i]-&gt;GetConnectivity(&amp;nlmc);\n                        if(nlmc != 0) wprintf(L\"- connected to:\");                      \n\n                        if (nlmc &amp; NLM_CONNECTIVITY_IPV4_LOCALNETWORK) wprintf(L\" IPv4 LAN;\");\n                        if (nlmc &amp; NLM_CONNECTIVITY_IPV4_INTERNET) wprintf(L\" IPv4 Internet;\");\n                        if (nlmc &amp; NLM_CONNECTIVITY_IPV6_LOCALNETWORK) wprintf(L\" IPv6 LAN;\");\n                        if (nlmc &amp; NLM_CONNECTIVITY_IPV6_INTERNET) wprintf(L\" IPv6 Internet\");\n                        wprintf(L\"\\n\");\n                    }\n                    pNetwork-&gt;Release();\n                }   \n                // ensure memory is freed                \n                pNetworkConnections[i]-&gt;Release();\n            }\n        }\n        else\n        {\n            bDone = TRUE;\n        }\n    }\n\n    End:\n    if(pEnum!=NULL)pEnum-&gt;Release();\n    if(pNetworkListManager!=NULL)pNetworkListManager-&gt;Release();    \n\n    system(\"PAUSE\");\n    return 0;\n}\n</code></pre>\n\n<p><strong>Ссылки:</strong></p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ee264321(v=vs.85)\" rel=\"nofollow noreferrer\">Network Awareness in Windows Vista and Windows 7</a></p>\n\n<p><a href=\"https://msdn.microsoft.com/ru-ru/library/windows/desktop/aa365915(v=vs.85).aspx\" rel=\"nofollow noreferrer\">GetAdaptersAddresses function</a></p>\n"}