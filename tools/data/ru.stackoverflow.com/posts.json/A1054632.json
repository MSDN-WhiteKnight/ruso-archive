{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":1,"last_activity_date":1575543504,"creation_date":1575543504,"answer_id":1054632,"question_id":1054552,"body":"<p>Я думаю, примеров нету, потому что задача создания образа ISO фактически сводится к задаче побайтового копирования данных с устройства в файл. Подробнее это обсуждалось здесь: <a href=\"https://ru.stackoverflow.com/questions/877005/\">Склонировать диск (в т.ч системный) в ISO</a> </p>\n\n<p>IMAPI тут не нужен, достаточно обычных файловых API. Основная сложность состоит в том, чтобы реализовать чтение с устройства в конкретной ОС.</p>\n\n<p>Реализация под Windows:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\n\nconst unsigned int SECTOR_SIZE = 2048; //размер сектора для CD\n\n#ifdef _WIN32\n#include &lt;Windows.h&gt;\n\nvoid GetDiskMetrics(const char* disk, unsigned int* pBlockSize, uint64_t* pTotalSize){\n\n    char path[MAX_PATH]=\"\";\n    strcpy(path,disk);\n    strcat(path,\":\\\\\"); \n\n    unsigned long  dwSectorsPerCluster, dwBytesPerSector, dwNumberOfFreeClusters, dwTotalNumberOfClusters;\n    unsigned int  blocksize;\n    uint64_t totalsize;\n\n    //найдем размер сектора и объем данных на диске\n    int res = GetDiskFreeSpaceA(path, &amp;dwSectorsPerCluster, &amp;dwBytesPerSector,\n                &amp;dwNumberOfFreeClusters, &amp;dwTotalNumberOfClusters);\n\n    //вычислим размер блока, кратный размеру сектора, и общий объем данных в байтах\n    if (res){\n        blocksize = dwBytesPerSector * 20;\n        totalsize = dwSectorsPerCluster * dwBytesPerSector * (uint64_t)dwTotalNumberOfClusters;\n    }\n    else{\n        printf(\"GetDiskFreeSpace error %d\", GetLastError());\n        blocksize = SECTOR_SIZE * 20;\n        totalsize = 4700307456; //DVD\n    }\n\n    *pBlockSize = blocksize;\n    *pTotalSize = totalsize;\n}\n\nbool OpenDevice(const char* disk, void** phFile){\n    char path[MAX_PATH]=\"\"; \n    sprintf(path,\"\\\\\\\\.\\\\%s:\",disk); //формат имени файла для открытия тома\n\n    //открываем том для прямого доступа на чтение\n    HANDLE handle = CreateFileA(path, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE,\n            NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n\n    if (handle == INVALID_HANDLE_VALUE) {\n        fprintf(stderr,\"CreateFileA error %d\", GetLastError());  \n        return false;\n    }\n    else {\n        *phFile = handle;\n        return true;\n    }\n}\n\nbool ReadDevice(void* hFile, void* lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead){\n\n    BOOL res = ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, NULL);\n\n    if (res == FALSE){\n        fprintf(stderr,\"ReadFile error %d\", GetLastError());\n        return false;\n    }\n    else return true;\n}\n\nvoid CloseDevice(void* hFile){\n    CloseHandle(hFile);\n}\n#endif\n\nvoid CreateISO(const char* disk, const char* outfile){      \n\n    char* buf;\n    unsigned long dwRead = 0;\n    uint64_t count = 0;     \n    unsigned int  blocksize;\n    uint64_t totalsize; \n\n    GetDiskMetrics(disk,&amp;blocksize,&amp;totalsize);\n    buf = (char*)malloc(blocksize);     \n\n    //открываем том для прямого доступа на чтение    \n    void* handle=NULL;\n    bool res = OpenDevice(disk,&amp;handle);\n    if (res == false)  goto End;    \n\n    //открываем файл для записи\n    FILE* target = fopen(outfile,\"wb\");\n\n    while (true){\n        dwRead = 0;\n        memset(buf,0,blocksize);\n\n        //считаем блок данных\n        res = ReadDevice(handle,buf, blocksize, &amp;dwRead);\n        if (res == false) goto End;\n\n        if (dwRead == 0) break; //конец считывания\n\n        count += dwRead;\n\n        printf(\" Creating image: %5.1f%% [%10.2f KB / %10.2f KB]\\r\",\n               (count * 100.0f / totalsize),\n               (count / 1024.0f),\n               (totalsize / 1024.0f));\n\n        //запишем блок в файл\n        fwrite(buf,dwRead,1,target);                    \n     }\n\n     End: CloseDevice(handle);\n          fclose(target);\n          free(buf);\n          printf(\"\\n\");\n}\n\nint main(int argc, char **argv)\n{\n\n    CreateISO(\"K\", \"c:\\\\distr\\\\image.iso\");\n\n    getchar();\n    return 0;\n}\n</code></pre>\n\n<p>Чтобы заставить это работать под другими ОС, вам нужно будет реализовать функции, расположенные в блоке <code>#ifdef _WIN32</code>.</p>\n"}