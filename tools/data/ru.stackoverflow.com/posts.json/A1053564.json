{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":4,"last_activity_date":1575346751,"creation_date":1575346751,"answer_id":1053564,"question_id":1053558,"body":"<p>CI - непрерывная интеграция, упрощенно говоря, это подход к разработке, при котором изменения в исходном коде часто отправляются на сервер и автоматизированно собираются и тестируются. CD (непрерывное развертывание), это аналогично, только помимо сборки код автоматизированно развертывается для конечного использования (например, выкладывается на веб-сервер для веб приложений, или пакуется в установочный пакет целевой ОС для десктопных приложений). Контейнер CI - видимо, просто Docker Container, в котором осуществляются эти действия, если используется <a href=\"https://docs.microsoft.com/ru-ru/dotnet/architecture/microservices/container-docker-introduction/docker-defined\" rel=\"nofollow noreferrer\">Docker</a>. Теория по CI описана по большей части здесь: <a href=\"https://ru.stackoverflow.com/questions/470453/\">Что такое непрерывная интеграция?</a></p>\n\n<p>В качестве практического примера CI можно привести использование GitHub Actions для автоматизированного построения приложения .NET Core.</p>\n\n<p>Создадим репозиторий GitHub, и заполним его тестовым проектом C# .NET Core</p>\n\n<p>Перейдем на вкладку GitHub Actions</p>\n\n<p><a href=\"https://i.stack.imgur.com/3d0mc.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3d0mc.png\" alt=\"GitHub Actions\"></a></p>\n\n<p>Для проекта с кодом на C# система автоматически предлагает создать Workflow .NET Core. Нажмем кнопку \"Set up this workflow\". Система предложит создать шаблонный файл конфигурации dotnetcore.yml:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>name: .NET Core\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 2.2.108\n    - name: Build with dotnet\n      run: dotnet build --configuration Release\n</code></pre>\n\n<p>Здесь мы видим два стандартных шага: установка .NET Core SDK нужной версии и запуск сборки с помощью команды dotnet build. Добавим два своих шага: архивацию результатов сборки и запуск получившегося приложения:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>name: .NET Core\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 2.2.108\n    - name: Build with dotnet\n      run: dotnet build CoreTest.sln --configuration Release\n    - name: Archive build results\n      uses: actions/upload-artifact@v1\n      with:\n          name: Output\n          path: NetCoreTest/bin/Release/\n    - name: Run\n      run: |        \n        dotnet NetCoreTest/bin/Release/netcoreapp2.1/NetCoreTest.dll\n</code></pre>\n\n<p>Зафиксируем результат. Теперь после отправки каждого изменения в репозиторий мы можем автоматически видеть результаты сборки:</p>\n\n<p><a href=\"https://i.stack.imgur.com/AQPip.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/AQPip.png\" alt=\"build results\"></a></p>\n\n<p>Эти результаты фигурируют как проверка для Pull request (на вкладке Checks) - можно сделать проверку обязательной, и тогда нельзя будет выполнить слияние изменений, если сборка проходит с ошибкой. Серьезное преимущество в том, что мы всегда можем убедится, что приложение собирается допустим на Linux, даже не имея локальной машины с этой ОС. Под капотом в данном случае не Docker, а виртуальные машины Azure, так что контейнера CI нет (есть виртуальное окружение CI). </p>\n\n<p>Пример репозитория с настроенным CI: <a href=\"https://github.com/MSDN-WhiteKnight/CoreTest\" rel=\"nofollow noreferrer\">https://github.com/MSDN-WhiteKnight/CoreTest</a></p>\n"}