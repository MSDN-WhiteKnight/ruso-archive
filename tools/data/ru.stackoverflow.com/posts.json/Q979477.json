{"tags":["c#",".net","com","directx","interop"],"owner":{"reputation":4975,"user_id":206435,"user_type":"registered","accept_rate":78,"profile_image":"https://www.gravatar.com/avatar/aff8ab0e5f74d01facde887535318d53?s=128&d=identicon&r=PG","display_name":"ヒミコ","link":"https://ru.stackoverflow.com/users/206435/%e3%83%92%e3%83%9f%e3%82%b3"},"is_answered":true,"view_count":44,"accepted_answer_id":979564,"answer_count":1,"score":0,"last_activity_date":1557388356,"creation_date":1557340164,"question_id":979477,"link":"https://ru.stackoverflow.com/questions/979477/%d0%9d%d0%b5-%d1%83%d0%b4%d0%b0%d0%b5%d1%82%d1%81%d1%8f-%d1%81%d1%87%d0%b8%d1%82%d0%b0%d1%82%d1%8c-%d0%b8%d0%bc%d1%8f-%d0%bb%d0%be%d0%ba%d0%b0%d0%bb%d0%b8-%d0%ba%d1%83%d1%87%d0%b0-%d0%bf%d0%be%d0%b2%d1%80%d0%b5%d0%b6%d0%b4%d0%b0%d0%b5%d1%82%d1%81%d1%8f-%d0%ba%d0%b0%d0%ba-%d0%b8%d1%81%d0%bf%d1%80%d0%b0%d0%b2%d0%b8%d1%82%d1%8c-2-%d0%bc%d0%b5%d1%82%d0%be%d0%b4%d0%b0","title":"Не удается считать имя локали, куча повреждается, как исправить 2 метода?","body":"<p>Имеется следующий интерфейс:</p>\n\n<pre><code>/// &lt;summary&gt;\n///     Represents a collection of strings indexed by locale name.\n/// &lt;/summary&gt;\n[ComImport]\n[Guid(\"08256209-099a-4b34-b86d-c22b110e7771\")]\n[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\npublic interface IDWriteLocalizedStrings\n{\n    /// &lt;summary&gt;\n    ///     Gets the number of language/string pairs.\n    /// &lt;/summary&gt;\n    uint GetCount();\n\n    /// &lt;summary&gt;\n    ///     Gets the index of the item with the specified locale name.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"localeName\"&gt;Locale name to look for.&lt;/param&gt;\n    /// &lt;param name=\"index\"&gt;Receives the zero-based index of the locale name/string pair.&lt;/param&gt;\n    /// &lt;param name=\"exists\"&gt;Receives TRUE if the locale name exists or FALSE if not.&lt;/param&gt;\n    /// &lt;returns&gt;\n    ///     Standard HRESULT error code. If the specified locale name does not exist, the return value is S_OK,\n    ///     but *index is UINT_MAX and *exists is FALSE.\n    /// &lt;/returns&gt;\n    [PreserveSig]\n    int FindLocaleName([MarshalAs(UnmanagedType.LPWStr)] string localeName, out uint index,\n        [MarshalAs(UnmanagedType.Bool)] out bool exists);\n\n    /// &lt;summary&gt;\n    ///     Gets the length in characters (not including the null terminator) of the locale name with the specified index.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the locale name.&lt;/param&gt;\n    /// &lt;param name=\"length\"&gt;Receives the length in characters, not including the null terminator.&lt;/param&gt;\n    /// &lt;returns&gt;\n    ///     Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    [PreserveSig]\n    int GetLocaleNameLength(uint index, out uint length);\n\n    /// &lt;summary&gt;\n    ///     Copies the locale name with the specified index to the specified array.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the locale name.&lt;/param&gt;\n    /// &lt;param name=\"localeName\"&gt;Character array that receives the locale name.&lt;/param&gt;\n    /// &lt;param name=\"size\"&gt;\n    ///     Size of the array in characters. The size must include space for the terminating\n    ///     null character.\n    /// &lt;/param&gt;\n    /// &lt;returns&gt;\n    ///     Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    [PreserveSig]\n    int GetLocaleName(uint index, [MarshalAs(UnmanagedType.LPArray)] [In] ref byte[] localeName, uint size);\n\n    /// &lt;summary&gt;\n    ///     Gets the length in characters (not including the null terminator) of the string with the specified index.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the string.&lt;/param&gt;\n    /// &lt;param name=\"length\"&gt;Receives the length in characters, not including the null terminator.&lt;/param&gt;\n    /// &lt;returns&gt;\n    ///     Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    [PreserveSig]\n    int GetStringLength(uint index, out uint length);\n\n    /// &lt;summary&gt;\n    ///     Copies the string with the specified index to the specified array.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the string.&lt;/param&gt;\n    /// &lt;param name=\"stringBuffer\"&gt;Character array that receives the string.&lt;/param&gt;\n    /// &lt;param name=\"size\"&gt;\n    ///     Size of the array in characters. The size must include space for the terminating\n    ///     null character.\n    /// &lt;/param&gt;\n    /// &lt;returns&gt;\n    ///     Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    [PreserveSig]\n    int GetString(uint index, [MarshalAs(UnmanagedType.LPWStr)] out string stringBuffer, uint size);\n}\n</code></pre>\n\n<p>Но оригинальный интерфейс определен вот так:</p>\n\n<pre><code>/// &lt;summary&gt;\n/// Represents a collection of strings indexed by locale name.\n/// &lt;/summary&gt;\ninterface DWRITE_DECLARE_INTERFACE(\"08256209-099a-4b34-b86d-c22b110e7771\") IDWriteLocalizedStrings : public IUnknown\n{\n    /// &lt;summary&gt;\n    /// Gets the number of language/string pairs.\n    /// &lt;/summary&gt;\n    STDMETHOD_(UINT32, GetCount)() PURE;\n\n    /// &lt;summary&gt;\n    /// Gets the index of the item with the specified locale name.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"localeName\"&gt;Locale name to look for.&lt;/param&gt;\n    /// &lt;param name=\"index\"&gt;Receives the zero-based index of the locale name/string pair.&lt;/param&gt;\n    /// &lt;param name=\"exists\"&gt;Receives TRUE if the locale name exists or FALSE if not.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// Standard HRESULT error code. If the specified locale name does not exist, the return value is S_OK, \n    /// but *index is UINT_MAX and *exists is FALSE.\n    /// &lt;/returns&gt;\n    STDMETHOD(FindLocaleName)(\n        _In_z_ WCHAR const* localeName,\n        _Out_ UINT32* index,\n        _Out_ BOOL* exists\n        ) PURE;\n\n    /// &lt;summary&gt;\n    /// Gets the length in characters (not including the null terminator) of the locale name with the specified index.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the locale name.&lt;/param&gt;\n    /// &lt;param name=\"length\"&gt;Receives the length in characters, not including the null terminator.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    STDMETHOD(GetLocaleNameLength)(\n        UINT32 index,\n        _Out_ UINT32* length\n        ) PURE;\n\n    /// &lt;summary&gt;\n    /// Copies the locale name with the specified index to the specified array.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the locale name.&lt;/param&gt;\n    /// &lt;param name=\"localeName\"&gt;Character array that receives the locale name.&lt;/param&gt;\n    /// &lt;param name=\"size\"&gt;Size of the array in characters. The size must include space for the terminating\n    /// null character.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    STDMETHOD(GetLocaleName)(\n        UINT32 index,\n        _Out_writes_z_(size) WCHAR* localeName,\n        UINT32 size\n        ) PURE;\n\n    /// &lt;summary&gt;\n    /// Gets the length in characters (not including the null terminator) of the string with the specified index.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the string.&lt;/param&gt;\n    /// &lt;param name=\"length\"&gt;Receives the length in characters, not including the null terminator.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    STDMETHOD(GetStringLength)(\n        UINT32 index,\n        _Out_ UINT32* length\n        ) PURE;\n\n    /// &lt;summary&gt;\n    /// Copies the string with the specified index to the specified array.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;Zero-based index of the string.&lt;/param&gt;\n    /// &lt;param name=\"stringBuffer\"&gt;Character array that receives the string.&lt;/param&gt;\n    /// &lt;param name=\"size\"&gt;Size of the array in characters. The size must include space for the terminating\n    /// null character.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// Standard HRESULT error code.\n    /// &lt;/returns&gt;\n    STDMETHOD(GetString)(\n        UINT32 index,\n        _Out_writes_z_(size) WCHAR* stringBuffer,\n        UINT32 size\n        ) PURE;\n};\n</code></pre>\n\n<p>Я понимаю что у меня не правильно определены 2 метода: <code>GetLocaleName</code> и <code>GetString</code>.</p>\n\n<p>Но у меня нет представления что мне передать туда, т.к. как выходная строка, не подходит, а при передачи как указатель на массив, происходит повреждение кучи. Как правильно эти 2 метода перенести в <code>c#</code>?</p>\n"}