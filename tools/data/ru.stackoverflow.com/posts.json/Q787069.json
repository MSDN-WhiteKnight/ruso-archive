{"tags":["c#","winforms","controls"],"owner":{"reputation":1149,"user_id":277742,"user_type":"registered","accept_rate":71,"profile_image":"https://www.gravatar.com/avatar/72c778f378a1deb6c46e008fdac61eaa?s=128&d=identicon&r=PG","display_name":"Rootware","link":"https://ru.stackoverflow.com/users/277742/rootware"},"is_answered":true,"view_count":61,"accepted_answer_id":787084,"answer_count":1,"score":1,"last_activity_date":1519023763,"creation_date":1519022437,"last_edit_date":1519023428,"question_id":787069,"link":"https://ru.stackoverflow.com/questions/787069/ipaddress-control-%d0%bf%d1%80%d0%be%d0%b1%d0%bb%d0%b5%d0%bc%d0%b0-%d0%be%d1%82%d0%be%d0%b1%d1%80%d0%b0%d0%b6%d0%b5%d0%bd%d0%b8%d1%8f","title":"IPAddress Control проблема отображения","body":"<p>Нашёл на просторах интернета следующий лаконичный код для кастомного контрола для ввода IP адресов. Всё работает замечательно, но есть одно НО. При повторном открытии формы с этим контролом размер формы с содержимым пропорционально увеличивается в 1.5-2 раза.</p>\n\n<p>Артефакт проявляется сразу же при запуске приложения в Debug режиме. В конструкторе текущей формы все контролы увеличиваются и текст становится жирным.</p>\n\n<pre><code>public class IPAddressControl : TextBox\n{\n    private const int WM_NOTIFY = 0x004E,\n        WM_USER = 0x0400,\n        WM_REFLECT = WM_USER + 0x1C00,\n        IPN_FIRST = -860,\n        IPM_SETRANGE = (WM_USER + 103),\n        IPM_GETADDRESS = (WM_USER + 102),\n        IPM_SETADDRESS = (WM_USER + 101),\n        IPM_CLEARADDRESS = (WM_USER + 100),\n        IPM_ISBLANK = (WM_USER + 105),\n        ICC_INTERNET_CLASSES = 0x00000800,\n        CS_VREDRAW = 0x0001,\n        CS_HREDRAW = 0x0002,\n        CS_DBLCLKS = 0x0008,\n        CS_GLOBALCLASS = 0x4000,\n        WS_CHILD = 0x40000000,\n        WS_VISIBLE = 0x10000000,\n        WS_TABSTOP = 0x00010000,\n        WS_EX_RIGHT = 0x00001000,\n        WS_EX_LEFT = 0x00000000,\n        WS_EX_RTLREADING = 0x00002000,\n        WS_EX_LTRREADING = 0x00000000,\n        WS_EX_LEFTSCROLLBAR = 0x00004000,\n        WS_EX_RIGHTSCROLLBAR = 0x00000000,\n        WS_EX_NOPARENTNOTIFY = 0x00000004,\n        WS_EX_CLIENTEDGE = 0x00000200;\n\n    private int[] values = new int[4];\n    bool initialized = false;\n\n    public event FieldChangedHandler FieldChanged;\n\n    public IPAddressControl() : base()\n    {\n        for (int i = 0; i &lt; 4; i++)\n            values[i] = 0;\n    }\n\n    [DllImport(\"comctl32\")]\n    static extern bool InitCommonControlsEx(ref InitCommonControlsEX lpInitCtrls);\n\n    protected virtual void OnFieldChanged(FieldChangedEventArgs e)\n    {\n        if (FieldChanged != null) FieldChanged(this, e);\n    }\n\n    protected override CreateParams CreateParams\n    {\n        get\n        {\n            if (!initialized)\n            {\n                InitCommonControlsEX ic = new InitCommonControlsEX();\n                ic.Size = Marshal.SizeOf(typeof(InitCommonControlsEX));\n                ic.Icc = ICC_INTERNET_CLASSES;\n                initialized = InitCommonControlsEx(ref ic);\n            }\n            if (initialized)\n            {\n                CreateParams cp = base.CreateParams;\n                cp.ClassName = \"SysIPAddress32\";\n                cp.Height = 23;\n                cp.ClassStyle = CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS | CS_GLOBALCLASS;\n                cp.Style = WS_CHILD | WS_VISIBLE | WS_TABSTOP | 0x80;\n                cp.ExStyle = WS_EX_NOPARENTNOTIFY | WS_EX_CLIENTEDGE;\n                if (RightToLeft == RightToLeft.No\n                                                || (RightToLeft == RightToLeft.Inherit\n                                                &amp;&amp; Parent.RightToLeft == RightToLeft.No))\n                {\n                    cp.ExStyle |= WS_EX_LEFT | WS_EX_LTRREADING | WS_EX_RIGHTSCROLLBAR;\n                }\n                else\n                {\n                    cp.ExStyle |= WS_EX_RIGHT | WS_EX_RTLREADING | WS_EX_LEFTSCROLLBAR;\n                }\n                return cp;\n            }\n            else\n            {\n                return base.CreateParams;\n            }\n        }\n    }\n\n    public bool SetIPRange(IPField field, byte lowValue, byte highValue)\n    {\n        if (!initialized) return false;\n        Message m = Message.Create(Handle, IPM_SETRANGE, (IntPtr) ((int) field), MakeRange(lowValue, highValue));\n        WndProc(ref m);\n        return m.Result.ToInt32() &gt; 0;\n    }\n\n    public System.Net.IPAddress IPAddress\n    {\n        get\n        {\n            if (!initialized) return IPAddress.None;\n            return IPAddress.Parse(base.Text);\n        }\n    }\n\n    public bool IsBlank\n    {\n        get\n        {\n            if (!initialized) return !(base.Text.Length &gt; 0);\n            Message m = Message.Create(Handle, IPM_ISBLANK, IntPtr.Zero, IntPtr.Zero);\n            WndProc(ref m);\n            return m.Result.ToInt32() &gt; 0;\n        }\n    }\n\n    new public void Clear()\n    {\n        if (!initialized)\n        {\n            base.Clear();\n            return;\n        }\n        Message m = Message.Create(Handle, IPM_CLEARADDRESS, IntPtr.Zero, IntPtr.Zero);\n        WndProc(ref m);\n    }\n\n    private System.Net.IPAddress GetIpAddress(IntPtr ip)\n    {\n        if (!initialized) return IPAddress.None;\n        return new IPAddress(ip.ToInt64());\n    }\n\n    private IntPtr MakeRange(byte low, byte high)\n    {\n        return (IntPtr) ((int) ((high &lt;&lt; 8) + low));\n    }\n\n    protected override void WndProc(ref Message m)\n    {\n        if (m.Msg == (WM_REFLECT + WM_NOTIFY))\n        {\n            NmIPAddress ipInfo = (NmIPAddress) Marshal.PtrToStructure(m.LParam, typeof(NmIPAddress));\n            if (ipInfo.Hdr.Code == IPN_FIRST)\n            {\n                if (values[ipInfo.Field] != ipInfo.Value)\n                {\n                    values[ipInfo.Field] = ipInfo.Value;\n                    OnFieldChanged(new FieldChangedEventArgs(ipInfo.Field, ipInfo.Value));\n                }\n            }\n        }\n        base.WndProc(ref m);\n    }\n}\n\npublic class FieldChangedEventArgs : EventArgs\n{\n    private int _field, _value;\n    public int Field\n    {\n        get { return _field; }\n    }\n    public int Value\n    {\n        get { return _value; }\n    }\n    public FieldChangedEventArgs(int field, int value)\n        : base()\n    {\n        _field = field;\n        _value = value;\n    }\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct Nmhdr\n{\n    public IntPtr HWndFrom;\n    public UIntPtr IdFrom;\n    public int Code;\n}\n[StructLayout(LayoutKind.Sequential)]\npublic struct NmIPAddress\n{\n    public Nmhdr Hdr;\n    public int Field;\n    public int Value;\n}\n[StructLayout(LayoutKind.Sequential)]\npublic struct InitCommonControlsEX\n{\n    public int Size;\n    public int Icc;\n}\n\npublic enum IPField { OctetOne = 0, OctetTwo = 1, OctetThree = 2, OctetFour = 3 }\npublic delegate void FieldChangedHandler(object sender, FieldChangedEventArgs e);\n</code></pre>\n\n<p>Подскажите как устранить этот артефакт.</p>\n\n<p>P.S. Если в свойствах контрола изменить размер шрифта на больший или меньший и после обратно вернуть 8,25pt то артефакт исчезает.</p>\n\n<p>P.S.S. Также замечено что все GroupBox уменьшены в размерах.</p>\n\n<p>Оригинал кода <a href=\"http://www.sanity-free.org/127/an_ipaddress_control_the_win32_sysipaddress32_control_in_csharp.html\" rel=\"nofollow noreferrer\">здесь</a>.</p>\n"}