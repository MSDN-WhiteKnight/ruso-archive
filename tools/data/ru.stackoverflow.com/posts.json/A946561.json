{"owner":{"reputation":16137,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":5,"last_activity_date":1550563581,"creation_date":1550563581,"answer_id":946561,"question_id":945941,"body":"<p>Информацию о некоторых служебных потоках CLR можно прочитать <a href=\"https://github.com/dotnet/coreclr/blob/master/Documentation/botr/threading.md\" rel=\"noreferrer\">здесь</a>. Воспользуемся <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/\" rel=\"noreferrer\">Debugging Tools for Windows</a>, чтобы проверить это на практике.</p>\n\n<p>Запускаем исследуемое приложение (без отладки), запускаем WinDbg, выбираем File -> Attach to process, выбираем в списке наше приложение. Приостанавливаем выполнение с помощью Ctrl+Break. Теперь мы можем получить стеки вызовов всех потоков с помощью команды <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/k--kb--kc--kd--kp--kp--kv--display-stack-backtrace-\" rel=\"noreferrer\">~* k</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:012&gt; ~* k\n\n   0  Id: 2b20.1f0c Suspend: 1 Teb: 01086000 Unfrozen\n # ChildEBP RetAddr  \n00 012ff24c 73f6a850 win32u!NtUserGetMessage+0xc\n*** WARNING: Unable to verify checksum for C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\WindowsBase\\03c76d7ce2fb4e82a604311437d4c78e\\WindowsBase.ni.dll\n*** ERROR: Module load completed but symbols could not be loaded for C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\WindowsBase\\03c76d7ce2fb4e82a604311437d4c78e\\WindowsBase.ni.dll\n01 012ff288 544d9590 USER32!GetMessageW+0x30\nWARNING: Stack unwind information not available. Following frames may be wrong.\n02 012ff2d0 544ae046 WindowsBase_ni+0xe9590\n03 012ff2ec 544aaa80 WindowsBase_ni+0xbe046\n04 012ff328 544a8541 WindowsBase_ni+0xbaa80\n05 012ff380 544a816e WindowsBase_ni+0xb8541\n*** WARNING: Unable to verify checksum for C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Presentatio5ae0f00f#\\1ffa8aee628840413da5d86076124375\\PresentationFramework.ni.dll\n*** ERROR: Module load completed but symbols could not be loaded for C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Presentatio5ae0f00f#\\1ffa8aee628840413da5d86076124375\\PresentationFramework.ni.dll\n06 012ff38c 51c04eca WindowsBase_ni+0xb816e\n07 012ff39c 51c04d60 PresentationFramework_ni+0x2c4eca\n08 012ff3bc 51c04b07 PresentationFramework_ni+0x2c4d60\n09 012ff3cc 05918004 PresentationFramework_ni+0x2c4b07\n0a 012ff3d8 7322ebb6 0x5918004\n0b 012ff3e4 73231e10 clr!CallDescrWorkerInternal+0x34\n0c 012ff438 73237994 clr!CallDescrWorkerWithHandler+0x6b\n0d 012ff4a8 733a5026 clr!MethodDescCallSite::CallTargetWorker+0x16a\n0e 012ff5d4 733a5707 clr!RunMain+0x1ad\n0f 012ff848 733a55ed clr!Assembly::ExecuteMainMethod+0x124\n10 012ffd40 733a58d3 clr!SystemDomain::ExecuteMainMethod+0x631\n11 012ffd98 733a5819 clr!ExecuteEXE+0x4c\n12 012ffdd8 73375a0c clr!_CorExeMainInternal+0xdc\n13 012ffe14 739fd93b clr!_CorExeMain+0x4d\n14 012ffe50 73a7e8b9 mscoreei!_CorExeMain+0x10e\n15 012ffe64 73a84e18 MSCOREE!ShellShim__CorExeMain+0xa9\n16 012ffe6c 73d88484 MSCOREE!_CorExeMain_Exported+0x8\n17 012ffe80 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n18 012ffec8 77414198 ntdll!__RtlUserThreadStart+0x2f\n19 012ffed8 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   1  Id: 2b20.3868 Suspend: 1 Teb: 01089000 Unfrozen\n # ChildEBP RetAddr  \n00 0150f86c 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 0150fa28 73d88484 ntdll!TppWorkerThread+0x296\n02 0150fa3c 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 0150fa84 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 0150fa94 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   2  Id: 2b20.9dc Suspend: 1 Teb: 0108c000 Unfrozen\n # ChildEBP RetAddr  \n00 0172fcfc 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 0172feb8 73d88484 ntdll!TppWorkerThread+0x296\n02 0172fecc 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 0172ff14 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 0172ff24 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   3  Id: 2b20.3394 Suspend: 1 Teb: 0108f000 Unfrozen\n # ChildEBP RetAddr  \n00 018ffb14 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 018ffcd0 73d88484 ntdll!TppWorkerThread+0x296\n02 018ffce4 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 018ffd2c 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 018ffd3c 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   4  Id: 2b20.1610 Suspend: 1 Teb: 01092000 Unfrozen\n # ChildEBP RetAddr  \n00 01aef830 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 01aef9ec 73d88484 ntdll!TppWorkerThread+0x296\n02 01aefa00 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 01aefa48 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 01aefa58 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   5  Id: 2b20.3bac Suspend: 1 Teb: 01095000 Unfrozen\n # ChildEBP RetAddr  \n00 0338fc94 75fa5a13 ntdll!NtWaitForMultipleObjects+0xc\n01 0338fe28 73374a4b KERNELBASE!WaitForMultipleObjectsEx+0x133\n02 0338fe94 733749a0 clr!DebuggerRCThread::MainLoop+0x99\n03 0338fec4 733748cd clr!DebuggerRCThread::ThreadProc+0xd0\n04 0338fef4 73d88484 clr!DebuggerRCThread::ThreadProcStatic+0xc4\n05 0338ff08 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n06 0338ff50 77414198 ntdll!__RtlUserThreadStart+0x2f\n07 0338ff60 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   6  Id: 2b20.334c Suspend: 1 Teb: 01098000 Unfrozen\n # ChildEBP RetAddr  \n00 055af738 75fa5a13 ntdll!NtWaitForMultipleObjects+0xc\n01 055af8cc 733c16eb KERNELBASE!WaitForMultipleObjectsEx+0x133\n02 055af8fc 733b039e clr!FinalizerThread::WaitForFinalizerEvent+0x8a\n03 055af92c 7323a029 clr!FinalizerThread::FinalizerThreadWorker+0x5f\n04 055af940 7323a093 clr!ManagedThreadBase_DispatchInner+0x71\n05 055af9e4 7323a160 clr!ManagedThreadBase_DispatchMiddle+0x7e\n06 055afa40 733a4e38 clr!ManagedThreadBase_DispatchOuter+0x5b\n07 055afa68 733a4ea5 clr!ManagedThreadBase::FinalizerBase+0x33\n08 055afaa4 732aed61 clr!FinalizerThread::FinalizerThreadStart+0xd9\n09 055afb48 73d88484 clr!Thread::intermediateThreadProc+0x55\n0a 055afb5c 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n0b 055afba4 77414198 ntdll!__RtlUserThreadStart+0x2f\n0c 055afbb4 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   7  Id: 2b20.377c Suspend: 1 Teb: 0109b000 Unfrozen\n # ChildEBP RetAddr  \n00 05cbfa10 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 05cbfbcc 73d88484 ntdll!TppWorkerThread+0x296\n02 05cbfbe0 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 05cbfc28 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 05cbfc38 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   8  Id: 2b20.3588 Suspend: 1 Teb: 0109e000 Unfrozen\n # ChildEBP RetAddr  \n00 05dffab8 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 05dffc74 73d88484 ntdll!TppWorkerThread+0x296\n02 05dffc88 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 05dffcd0 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 05dffce0 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n   9  Id: 2b20.35ec Suspend: 1 Teb: 010a1000 Unfrozen\n # ChildEBP RetAddr  \n00 05f3f54c 75fa5a13 ntdll!NtWaitForMultipleObjects+0xc\n01 05f3f6e0 76f8d24e KERNELBASE!WaitForMultipleObjectsEx+0x133\n02 05f3f81c 76fee2ae combase!WaitCoalesced+0xb5 [onecore\\com\\published\\comutils\\coalescedwait.cxx @ 72] \n03 05f3f84c 76f8ae34 combase!CROIDTable::WorkerThreadLoop+0x4e [onecore\\com\\combase\\dcomrem\\refcache.cxx @ 1650] \n04 05f3f878 76f8802f combase!CRpcThread::WorkerLoop+0x11f [onecore\\com\\combase\\dcomrem\\threads.cxx @ 269] \n05 05f3f888 73d88484 combase!CRpcThreadCache::RpcWorkerThreadEntry+0x1f [onecore\\com\\combase\\dcomrem\\threads.cxx @ 76] \n06 05f3f89c 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n07 05f3f8e4 77414198 ntdll!__RtlUserThreadStart+0x2f\n08 05f3f8f4 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n  10  Id: 2b20.20e8 Suspend: 1 Teb: 010a4000 Unfrozen\n # ChildEBP RetAddr  \n00 061ffab4 75f94699 ntdll!NtWaitForSingleObject+0xc\n01 061ffb28 75f945f2 KERNELBASE!WaitForSingleObjectEx+0x99\n02 061ffb3c 515f10b7 KERNELBASE!WaitForSingleObject+0x12\n03 061ffb68 515f33b8 wpfgfx_v0400!CPartitionManager::GetWork+0x165\n04 061ffb80 5164088f wpfgfx_v0400!CPartitionThread::Run+0x18\n05 061ffba8 73d88484 wpfgfx_v0400!CPartitionThread::ThreadMain+0x2f\n06 061ffbbc 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n07 061ffc04 77414198 ntdll!__RtlUserThreadStart+0x2f\n08 061ffc14 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n  11  Id: 2b20.3268 Suspend: 1 Teb: 010a7000 Unfrozen\n # ChildEBP RetAddr  \n00 092df710 774016d6 ntdll!NtWaitForWorkViaWorkerFactory+0xc\n01 092df8cc 73d88484 ntdll!TppWorkerThread+0x296\n02 092df8e0 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 092df928 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 092df938 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n# 12  Id: 2b20.4e8 Suspend: 1 Teb: 010ad000 Unfrozen\n # ChildEBP RetAddr  \n00 0f91fd58 77454369 ntdll!DbgBreakPoint\n01 0f91fd88 73d88484 ntdll!DbgUiRemoteBreakin+0x39\n02 0f91fd9c 774141c8 KERNEL32!BaseThreadInitThunk+0x24\n03 0f91fde4 77414198 ntdll!__RtlUserThreadStart+0x2f\n04 0f91fdf4 00000000 ntdll!_RtlUserThreadStart+0x1b\n</code></pre>\n\n<p>Разбираем результат.</p>\n\n<p><strong>Поток 0.</strong> По наличию в стеке <code>USER32!GetMessageW</code>, легко понять, что это поток с циклом обработки сообщений (именно на нем запускается большая часть вашего кода, например, обработчики событий и делегаты DispatcherTimer).</p>\n\n<p><strong>Потоки 1, 2, 3, 4, 7, 8, 11.</strong>  По наличию в стеке <code>ntdll!TppWorkerThread</code> видно, что это потоки из <a href=\"https://www.microsoftpressstore.com/articles/article.aspx?p=2233328&amp;seqNum=6\" rel=\"noreferrer\">Thread Pool</a> (не пула CLR, а нативного пула Windows). Хороший вопрос, почему 7 потоков Thread Pool автоматически создаются в любом приложении, даже когда мы этого не заказывали (не только в WPF, но и в абсолютно пустом консольном приложении на С++!). Разгадка в том, что <a href=\"https://threatvector.cylance.com/en_us/home/windows-10-parallel-loading-breakdown.html\" rel=\"noreferrer\">в Windows 10 Thread Pool используется для распараллеливания загрузки DLL</a>, с целью ускорения запуска процессов на машинах с несколькими процессорными ядрами.</p>\n\n<p><strong>Поток 5.</strong> CLR Debugger Thread - служебный поток, обеспечивающий работу отладчиков управляемого кода.</p>\n\n<p><strong>Поток 6.</strong> CLR Finalizer Thread - служебный поток, на котором GC запускает финализаторы.</p>\n\n<p><strong>Поток 9.</strong> Стек вызовов мало что дает, но методом исключения, получается это GC Thread. Отсутствие в стеке каких-либо функций CLR, вероятно, объясняется тем, что сборщик мусора еще не был инициализирован на тот момент.</p>\n\n<p><strong>Поток 10.</strong> <code>wpfgfx_v0400</code> - это неуправляемая библиотека, которую WPF использует для рендеринга графики. Так как WPF использует DirectX, для рендеринга нужен отдельный поток, чтобы делать это максимально быстро независимо от загруженности очереди сообщений.</p>\n\n<p><strong>Поток 12.</strong> Символ <code>ntdll!DbgUiRemoteBreakin</code> говорит о том, что это поток, порожденный самим отладчиком (реализация отладки в Windows требует инжектирования в отлаживаемый процесс специального потока). Иными словами, этот поток не имеет отношения к приложению.</p>\n\n<hr>\n\n<p>Всего 13 потоков, из них один привнесен отладчиком - итого 12 потоков собственно приложения. Вроде все удалось опознать. Как видно, непосредственное отношение к WPF действительно имеют только два потока (0 и 10).</p>\n"}