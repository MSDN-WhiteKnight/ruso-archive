{"tags":["c++","windows","аудио","visual-studio-2010","звукозапись"],"owner":{"reputation":430,"user_id":270698,"user_type":"registered","accept_rate":73,"profile_image":"https://lh3.googleusercontent.com/-f-SwySY7Fno/AAAAAAAAAAI/AAAAAAAAABA/ECJDSwwrRSM/photo.jpg?sz=128","display_name":"Юрій Писанка","link":"https://ru.stackoverflow.com/users/270698/%d0%ae%d1%80%d1%96%d0%b9-%d0%9f%d0%b8%d1%81%d0%b0%d0%bd%d0%ba%d0%b0"},"is_answered":false,"view_count":37,"answer_count":1,"score":1,"last_activity_date":1541483111,"creation_date":1541241615,"last_edit_date":1541483111,"question_id":901703,"link":"https://ru.stackoverflow.com/questions/901703/openall-%d0%a1-%d0%97%d0%b0%d0%bf%d0%b8%d1%81%d1%8c-%d0%b8-%d0%be%d1%82%d0%b4%d0%b5%d0%bb%d1%8c%d0%bd%d0%be-%d0%9f%d1%80%d0%be%d0%b8%d0%b3%d1%80%d1%8b%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5","title":"OpenALL С++ Запись и отдельно Проигрывание","body":"<p>Пытаюсь научиться обрабатывать записанный с микрофона звук, нашёл пример, но там всё склеено, и непонятно что за что отвечает.</p>\n\n<p>Мне нужно </p>\n\n<ol>\n<li><p>Записать допустим 3 секунды</p></li>\n<li><p>Получить доступ к массиву с записанными данными, проанализировать или даже изменить</p></li>\n<li><p>Проиграть запись, сохранённую в  массиве</p></li>\n</ol>\n\n<p>Вот пример, о котором писал.</p>\n\n<pre><code>    //#include &lt;unistd.h&gt;\n#include &lt;AL/al.h&gt; \n#include &lt;AL/alc.h&gt; \n#include &lt;time.h&gt;\n#include &lt;ctime&gt; \n#pragma comment (lib,\"OpenAL32.lib\")\n#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n//#include &lt;windows.h&gt;\n//#include &lt;al.h&gt;\n//#include &lt;alc.h&gt;\n\n\nusing namespace std;\nint main()\n{\n\n\n\n\nALCdevice *dev[2];\nALCcontext *ctx;\nALuint source, buffers[3];\nchar data[5000];\nALuint buf;\nALint val;\n\n    float ttotal;\n    unsigned int ccount;\n    long int c1ount;\n    c1ount =0;\n\ndev[0] = alcOpenDevice(NULL);\nctx = alcCreateContext(dev[0], NULL);\nalcMakeContextCurrent(ctx);\n\nalGenSources(1, &amp;source);\nalGenBuffers(3, buffers);\n\n/* Setup some initial silent data to play out of the source */\nalBufferData(buffers[0], AL_FORMAT_MONO16, data, sizeof(data), 22050);\nalBufferData(buffers[1], AL_FORMAT_MONO16, data, sizeof(data), 22050);\nalBufferData(buffers[2], AL_FORMAT_MONO16, data, sizeof(data), 22050);\nalSourceQueueBuffers(source, 3, buffers);\n\n/* If you don't need 3D spatialization, this should help processing time */\nalDistanceModel(AL_NONE); \n\ndev[1] = alcCaptureOpenDevice(NULL, 22050, AL_FORMAT_MONO16, sizeof(data)/2); //22050 mean 22.050 samples per     second. or 44100 for 44.1 per second.\n\n/* Start playback and capture, and enter the audio loop */\nalSourcePlay(source);\nalcCaptureStart(dev[1]);    //starts ring buffer\n\nwhile(1) \n{\n    /* Check if any queued buffers are finished */\n    alGetSourcei(source, AL_BUFFERS_PROCESSED, &amp;val);\n    if(val &lt;= 0)\n        continue;\n\n    /* Check how much audio data has been captured (note that 'val' is the\n    * number of frames, not bytes) */\n    alcGetIntegerv(dev[1], ALC_CAPTURE_SAMPLES, 1, &amp;val);\n\n    /* Read the captured audio */\n    alcCaptureSamples(dev[1], data, val);\n\n\n        //***** Process/filter captured data here *****//\n\n\nc1ount = c1ount +1;\nif(c1ount &gt;= 33){\n          break;\n         }\n\n\n        //for (int ii=0;ii&lt;val;++ii) {\n        //  data[ii]*=0.1; // Make it quieter\n        //}\n    //***** end Process/filter captured data here *****//\n\n    /* Pop the oldest finished buffer, fill it with the new capture data,\n    then re-queue it to play on the source */\n    alSourceUnqueueBuffers(source, 1, &amp;buf);\n    alBufferData(buf, AL_FORMAT_MONO16, data, val*2 /* bytes here, not\n    frames */, 22050);\n    alSourceQueueBuffers(source, 1, &amp;buf);\n\n    /* Make sure the source is still playing */\n    alGetSourcei(source, AL_SOURCE_STATE, &amp;val);\n\n    if(val != AL_PLAYING)\n    {\n\n        alSourcePlay(source);\n    }\n}\n\ncout&lt;&lt; \"fgggggggg\\n\";\n\n\n/* Shutdown and cleanup */\nalcCaptureStop(dev[1]);\nalcCaptureCloseDevice(dev[1]);\n\nalSourceStop(source);\nalDeleteSources(1, &amp;source);\nalDeleteBuffers(3, buffers);\nalDeleteBuffers(1, &amp;buf);\n\nalcMakeContextCurrent(NULL);\nalcDestroyContext(ctx);\nalcCloseDevice(dev[0]); \n\nreturn 0;\n}\n</code></pre>\n\n<p>Вот тоже пример, который должен записывать, но почему тут вечный цикл?</p>\n\n<pre><code>    #include &lt;AL/al.h&gt;\n#include &lt;AL/alc.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n#pragma comment(lib,\"OpenAL32.lib\")\n\nconst int SRATE = 44100;\nconst int SSIZE = 1024;\n\nALbyte buffer[22050];\nALint sample;\n\nint main(int argc, char *argv[]) {\n    alGetError();\n    ALCdevice *device = alcCaptureOpenDevice(NULL, SRATE, AL_FORMAT_STEREO16, SSIZE);\n    if (alGetError() != AL_NO_ERROR) {\n        return 0;\n    }\n    alcCaptureStart(device);\n\n    while (true) {\n        alcGetIntegerv(device, ALC_CAPTURE_SAMPLES, (ALCsizei)sizeof(ALint), &amp;sample);\n        alcCaptureSamples(device, (ALCvoid *)buffer, sample);\n\n        // ... do something with the buffer \n\n        for(int i = 0; i&lt;80;i++)\n        {\n            cout&lt;&lt;(int)buffer[i]&lt;&lt;' ';\n        }\n        cout&lt;&lt;\"loop s\\n\";\n    }\n\n    alcCaptureStop(device);\n    alcCaptureCloseDevice(device);\n\n    return 0;\n}\n</code></pre>\n"}