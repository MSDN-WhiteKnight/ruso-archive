{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1511718176,"creation_date":1511718176,"answer_id":749931,"question_id":748656,"body":"<p>Можно использовать функцию <a href=\"https://msdn.microsoft.com/ru-ru/library/windows/desktop/aa385114(v=vs.85).aspx\" rel=\"nofollow noreferrer\">InternetSetOption</a> с параметром <code>INTERNET_OPTION_PER_CONNECTION_OPTION</code>. Для получения необходимого результата нужно установить две опции: <code>INTERNET_PER_CONN_PROXY_SERVER</code> - имя прокси-сервера и <code>INTERNET_PER_CONN_FLAGS</code> - флаг, указывающий на использование явно заданного прокси-сервера. Затем нужно обновить настройки IE с помощью вызова <code>InternetSetOption</code> с параметром <code>INTERNET_OPTION_REFRESH</code>.</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Runtime.InteropServices;\n\nnamespace InternetTest\n{\n    public class Internet\n    {        \n        public const uint INTERNET_OPTION_PER_CONNECTION_OPTION = 75;\n        public const uint INTERNET_OPTION_REFRESH = 37;\n        public const uint INTERNET_PER_CONN_FLAGS = 1;\n        public const uint INTERNET_PER_CONN_PROXY_SERVER = 2;\n        public const uint PROXY_TYPE_PROXY = 0x00000002;        \n\n        [DllImport(\"wininet.dll\", SetLastError = true, CharSet = CharSet.Auto)]\n        public static extern bool InternetSetOption(IntPtr hInternet, uint\n        dwOption, IntPtr lpBuffer, int dwBufferLength);\n\n        /*Установка значения прокси-сервера strProxy для подключения strCon*/\n        public static bool SetProxy(string strCon,string strProxy)\n        {\n            InternetPerConnOptionList optlist = new InternetPerConnOptionList();\n            IntPtr pstruct = Marshal.AllocCoTaskMem(Marshal.SizeOf(optlist));\n            INTERNET_PER_CONN_OPTION opt = new INTERNET_PER_CONN_OPTION();\n            bool res;\n\n            try\n            {\n                // proxy server   \n                optlist.dwSize = Marshal.SizeOf(typeof(InternetPerConnOptionList));\n                optlist.szConnection = Marshal.StringToHGlobalUni(strCon);\n                optlist.dwOptionCount = 1;\n                optlist.options = Marshal.AllocCoTaskMem(Marshal.SizeOf(opt));\n                opt.dwOption = INTERNET_PER_CONN_PROXY_SERVER;\n                opt.Value = Marshal.StringToHGlobalUni(strProxy);\n\n                Marshal.StructureToPtr(opt, optlist.options, true);\n                Marshal.StructureToPtr(optlist, pstruct, true);\n\n                res = InternetSetOption(IntPtr.Zero, INTERNET_OPTION_PER_CONNECTION_OPTION,\n                    pstruct, Marshal.SizeOf(optlist));\n                if (res == false) System.Diagnostics.Debug.WriteLine(\"Failed to set proxy server\");\n\n                //flags\n                INTERNET_PER_CONN_OPTION2 opt2 = new INTERNET_PER_CONN_OPTION2();\n                opt2.dwOption = INTERNET_PER_CONN_FLAGS;\n                opt2.Value = PROXY_TYPE_PROXY;\n                Marshal.StructureToPtr(opt2, optlist.options, true);\n\n                res = InternetSetOption(IntPtr.Zero, INTERNET_OPTION_PER_CONNECTION_OPTION,\n                    pstruct, Marshal.SizeOf(optlist));\n                if (res == false) System.Diagnostics.Debug.WriteLine(\"Failed to set flags\");\n\n                //refresh\n                res = InternetSetOption(IntPtr.Zero, INTERNET_OPTION_REFRESH,\n                    IntPtr.Zero, 0);\n                if (res == false) System.Diagnostics.Debug.WriteLine(\"Failed to refresh IE settings\");\n            }\n            finally\n            {                \n                if (opt.Value != IntPtr.Zero) Marshal.FreeHGlobal(opt.Value); \n                if (optlist.options != IntPtr.Zero) Marshal.FreeCoTaskMem(optlist.options);\n                if(optlist.szConnection!=IntPtr.Zero)Marshal.FreeHGlobal(optlist.szConnection);\n                Marshal.FreeCoTaskMem(pstruct);\n            }\n\n            return res;\n        }\n\n    }    \n\n    /* СТРУКТУРЫ */\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct InternetPerConnOptionList\n    {        \n        public int dwSize;        \n        public IntPtr szConnection;        \n        public int dwOptionCount;        \n        public int dwOptionError;\n        public IntPtr options;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct INTERNET_PER_CONN_OPTION //первый вариант структуры (для указателя)\n    {\n        public uint dwOption;\n        public IntPtr Value;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct INTERNET_PER_CONN_OPTION2 //второй вариант структуры (для DWORD)\n    {\n        public uint dwOption;\n        public uint Value;\n    }\n}\n</code></pre>\n"}