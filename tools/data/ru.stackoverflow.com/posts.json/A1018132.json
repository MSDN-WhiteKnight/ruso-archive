{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":1,"last_activity_date":1566983707,"creation_date":1566983707,"answer_id":1018132,"question_id":1016076,"body":"<p>В Windows 10 Microsoft внесли много улучшений в консоль. Это связано главным образом не с WinRT, а с появлением .NET Core и Windows Subsystem for Linux, которые оживили интерес к *NIX-софту, а он по большей части является именно консольным. Одно из таких улучшений - <a href=\"https://wpdev.uservoice.com/forums/266908-command-prompt-console-windows-subsystem-for-l/suggestions/6509589-allow-console-windows-to-use-any-monospace-font\" rel=\"nofollow noreferrer\">возможность использовать в консоли любой моноширинный шрифт</a>. Видимо, именно из-за этого недокументированная функция GetNumberOfConsoleFonts теперь возвращает 0 - никаких особых \"консольных шрифтов\" больше не существует, и она потеряла свой смысл. </p>\n\n<p>На более ранних версиях Windows она работает, но особой необходимости в ней нет, так как список поддерживаемых шрифтов можно получить из ветки реестра <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont</code> (она тоже не документированная, но на основе реестра список шрифтов построить вроде попроще, чем по предложенному алгоритму). По умолчанию, в ней только Consolas и Lucida Console. В нее можно добавить и другие моноширинные шрифты, удовлетворяющие <a href=\"https://superuser.com/questions/1347724/how-can-i-add-additional-fonts-to-the-windows-console\">данным условиям</a> - и они в какой-то мере будут работать - но это, скорее всего, плохая идея (см. <a href=\"https://devblogs.microsoft.com/oldnewthing/20070516-00/?p=26843\" rel=\"nofollow noreferrer\">Why are console windows limited to Lucida Console and raster fonts?</a>).</p>\n\n<p>На Windows 10 же список поддерживаемых консолью шрифтов - это просто список всех моноширинных шрифтов. Помимо реестра, его можно получить стандартными средствами GDI/GDI+:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Drawing;\nusing System.Drawing.Text;\n\nclass Program\n{     \n    public static bool IsFixedPitch(Graphics graphics, FontFamily fam)\n    {        \n        Font font=new Font(fam, 10);\n        using (font)\n        {\n            IntPtr hDC = graphics.GetHdc();\n            TEXTMETRIC metrics;\n            IntPtr hFont = font.ToHfont();\n            try\n            {\n                IntPtr hPreviousFont = SelectObject(hDC, hFont);\n                bool res = GetTextMetrics(hDC, out metrics);\n                if (res == false) throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n                SelectObject(hDC, hPreviousFont);\n            }\n            finally\n            {\n                DeleteObject(hFont);\n                graphics.ReleaseHdc(hDC);\n            }\n            return (metrics.tmPitchAndFamily &amp; TMPF_FIXED_PITCH) == 0;\n        }\n    }\n\n    [DllImport(\"Gdi32.dll\")]\n    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);\n\n    [DllImport(\"Gdi32.dll\", SetLastError = true)]\n    static extern bool GetTextMetrics(IntPtr hdc, out TEXTMETRIC lptm);\n\n    [DllImport(\"Gdi32.dll\")]\n    static extern bool DeleteObject(IntPtr hdc);\n\n    [StructLayout(LayoutKind.Sequential)]\n    internal struct TEXTMETRIC\n    {\n        public int tmHeight;\n        public int tmAscent;\n        public int tmDescent;\n        public int tmInternalLeading;\n        public int tmExternalLeading;\n        public int tmAveCharWidth;\n        public int tmMaxCharWidth;\n        public int tmWeight;\n        public int tmOverhang;\n        public int tmDigitizedAspectX;\n        public int tmDigitizedAspectY;\n        public char tmFirstChar;\n        public char tmLastChar;\n        public char tmDefaultChar;\n        public char tmBreakChar;\n        public byte tmItalic;\n        public byte tmUnderlined;\n        public byte tmStruckOut;\n        public byte tmPitchAndFamily;\n        public byte tmCharSet;\n    }\n\n    const byte TMPF_FIXED_PITCH = 0x01;    \n\n    static void Main(string[] args)\n    { \n        InstalledFontCollection coll = new InstalledFontCollection();\n        Graphics g = Graphics.FromHwnd(IntPtr.Zero);\n\n        using (g)\n        {\n            foreach (var family in coll.Families)\n            {\n                if (IsFixedPitch(g, family))\n                {\n                    Console.WriteLine(family.GetName(0));\n                }\n            }\n        }\n\n        Console.ReadKey();\n    }    \n}\n</code></pre>\n"}