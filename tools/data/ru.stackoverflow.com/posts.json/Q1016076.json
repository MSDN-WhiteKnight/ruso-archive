{"tags":["c#","winapi","консоль","interop"],"owner":{"reputation":21,"user_id":348132,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/106c079c2052a1d60e22c2b61be54a8f?s=128&d=identicon&r=PG","display_name":"NightLion","link":"https://ru.stackoverflow.com/users/348132/nightlion"},"is_answered":true,"view_count":79,"answer_count":1,"score":2,"last_activity_date":1566983847,"creation_date":1566453079,"last_edit_date":1566983847,"question_id":1016076,"link":"https://ru.stackoverflow.com/questions/1016076/getnumberofconsolefonts-%d1%80%d0%b0%d0%b1%d0%be%d1%82%d0%b0%d0%b5%d1%82-%d0%bd%d0%b5%d0%ba%d0%be%d1%80%d1%80%d0%b5%d0%ba%d1%82%d0%bd%d0%be","title":"GetNumberOfConsoleFonts() работает некорректно","body":"<p>В своём консольном проекте на C# я решил реализовать возможность смены шрифта консоли средствами самой программы. Алгоритм действий:</p>\n\n<ol>\n<li>С помощью WinAPI-функции GetNumberOfConsoleFonts() получить\nколичество доступных для консоли шрифтов.</li>\n<li>С помощью WinAPI-функции GetConsoleFontInfo() получить их индексы.</li>\n<li>Последовательное применение WinAPI-функций SetConsoleFont() и\nGetCurrentConsoleFontEx() для каждого индекса, чтобы получить более\nдетальную информацию о шрифтах.</li>\n<li>На основе полученной информации организовать диалог с выбором шрифта.</li>\n</ol>\n\n<p>Проблема в том, что GetNumberOfConsoleFonts() постоянно возвращает 0, делая все другие шаги бессмысленными. В чём может быть причина? Можно ли как-нибудь иначе получить количество доступных для консоли шрифтов или их индексы?</p>\n\n<pre><code>[DllImport(\"kernel32.dll\", SetLastError = true)] \nstatic extern uint GetNumberOfConsoleFonts();\n\n//Использование:\nuint fontsCount = GetNumberOfConsoleFonts();\n</code></pre>\n\n<p>У меня установлены Windows 10 и Visual Studio 2019.</p>\n\n<p><strong><em>Дополнение от 26.08.2019:</em></strong><br>\nВ общем, я так и не нашёл способа заставить функции <code>GetNumberOfConsoleFonts</code>, <code>GetConsoleFontInfo</code> и <code>SetConsoleFont</code> заработать. Пока вместо этого использую следующий алгоритм:</p>\n\n<ol>\n<li>Из ветки реестра <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Shared\nTools\\Panose</code> (похоже, содержит имена и некоторые параметры шрифтов)\nполучаю все пары <code>Имя:Значение</code>.</li>\n<li>Выполняю отсеивание, оставляя только те, в которых четвёртый байт равен 0x09 (возможно именно это указывает на моноширинность шрифта).</li>\n<li>Для каждого из оставшихся имён шрифтов последовательно применяю <code>SetCurrentConsoleFontEx</code> и <code>GetCurrentConsoleFontEx</code>, чтобы проверить может ли данный шрифт использоваться в консоли (если свойство <code>FaceName</code> структуры <code>CONSOLE_FONT_INFO_EX</code> что передаётся в <code>SetCurrentConsoleFontEx</code> совпадает с свойством <code>FaceName</code> структуры <code>CONSOLE_FONT_INFO_EX</code> что возвращается <code>GetCurrentConsoleFontEx</code>, значит консоль может использовать этот шрифт).</li>\n<li>Из тех, что были успешно применены, формирую список, который и использую в диалоге выбора шрифта.</li>\n</ol>\n"}