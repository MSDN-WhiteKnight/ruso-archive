{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":1,"last_activity_date":1545667121,"creation_date":1545667121,"answer_id":924970,"question_id":924567,"body":"<p>Если отключить в студии режим \"Только мой код\" в настройках отладчика, можно получить стек, вызывающий данное исключение:</p>\n\n<pre><code> PresentationCore.dll!System.Windows.Media.MediaPlayerState.OpenMedia(System.Uri source) + 0x10d bytes  \n PresentationCore.dll!System.Windows.Media.MediaPlayerState.SetSource(System.Uri source) + 0x27 bytes   \n PresentationCore.dll!System.Windows.Media.MediaPlayerState.Open(System.Uri source) + 0x27 bytes    \n PresentationFramework.dll!System.Windows.Controls.AVElementHelper.HandleStateChange() + 0x240 bytes    \n PresentationFramework.dll!System.Windows.Controls.AVElementHelper.MemberOnInvalidateSource(System.Windows.DependencyPropertyChangedEventArgs e) + 0x5b bytes   \n PresentationFramework.dll!System.Windows.Controls.AVElementHelper.OnSourceChanged(System.Windows.DependencyObject d, System.Windows.DependencyPropertyChangedEventArgs e) + 0x67 bytes \n WindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x83 bytes         PresentationFramework.dll!System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x9f bytes  \n WindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args) + 0x64 bytes  \n WindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex, System.Windows.DependencyProperty dp, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType) + 0x853 bytes  \n WindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal) + 0x3f7 bytes \n WindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x52 bytes  \n WpfApplication1.exe!WpfApplication1.MainWindow.Button_Click_1(object sender, System.Windows.RoutedEventArgs e) Line 31 + 0x42 bytes\n</code></pre>\n\n<p>Далее, глядя в код метода <a href=\"https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/Media/MediaPlayerState.cs,0e552532a1915f24\" rel=\"nofollow noreferrer\">OpenMedia</a>, видим, что в случае, когда передаваемый URI имеет схему https, .NET пытается получить URI публикации для текущего приложения и далее, если этот URI не https, проделать некие телодвижения с целью проверки \"безопасно ли сделать это в данном контексте\". Но проблема в том, что URI публикации определен только в двух случаях: для браузерного WPF и для приложений ClickOnce. В остальных случаях этот URI будет иметь значение null, и, так как это не проверяется, имеем NRE.</p>\n\n<p>Иными словами, как правильно заметил в комментариях demonplus, это обыкновенный баг в WPF. Как его обойти? Ну, самое простое, это перейти с MediaElement на что-то другое, например на <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/walkthrough-hosting-an-activex-control-in-wpf\" rel=\"nofollow noreferrer\">ActiveX-элемент Windows Media Player</a>, который обладает тем же функционалом, но избавлен от этой проблемы. Не то, чтобы MediaElement из WPF обладал какими-то особыми преимуществами. Однако, если вам действительно нужен MediaElement, можете воспользоваться следующим грязным хаком для принудительной установки URI публикации:</p>\n\n<pre><code>Assembly assPresentationCore = typeof(UIElement).Assembly; //PresentationCore.dll\nAssembly assWindowsBase = typeof(System.Windows.Vector).Assembly; //WindowsBase.dll\n\n//найдем информацию о типах\nType typeContainer = assPresentationCore.GetType(\"MS.Internal.AppModel.SiteOfOriginContainer\");\nType typeDS = assWindowsBase.GetType(\"MS.Internal.SecurityCriticalDataForSet`1\").MakeGenericType(typeof(Uri));\nType typeNullable = typeof(Nullable&lt;int&gt;).GetGenericTypeDefinition().MakeGenericType(typeDS);\n\n//найдем информацию о необходимом закрытом поле\nFieldInfo field = typeContainer.GetField(\"_siteOfOriginForClickOnceApp\",\n    BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static \n    );\n\n//создадим объект Nullable&lt;MS.Internal.SecurityCriticalDataForSet&lt;Uri&gt;&gt;\nobject objDS = Activator.CreateInstance(typeDS,\n    BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null,\n    new object[] { new Uri(\"http://localhost/\") },\n    System.Globalization.CultureInfo.InvariantCulture\n    );\nobject objNullable = Activator.CreateInstance(typeNullable, objDS);\n\n//установим значение поля\nfield.SetValue(null, objNullable);\n</code></pre>\n"}