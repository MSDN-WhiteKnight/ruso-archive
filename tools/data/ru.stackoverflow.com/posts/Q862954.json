{"tags":["c#","windows","аудио"],"owner":{"reputation":1186,"user_id":219714,"user_type":"registered","accept_rate":64,"profile_image":"https://www.gravatar.com/avatar/e4c842b4bda9a877513b0fe39d5fac03?s=128&d=identicon&r=PG","display_name":"Виталий","link":"https://ru.stackoverflow.com/users/219714/%d0%92%d0%b8%d1%82%d0%b0%d0%bb%d0%b8%d0%b9"},"is_answered":true,"view_count":71,"accepted_answer_id":903387,"answer_count":1,"score":3,"last_activity_date":1541582628,"creation_date":1533120097,"last_edit_date":1541582628,"question_id":862954,"link":"https://ru.stackoverflow.com/questions/862954/%d0%98%d0%b7%d0%bc%d0%b5%d0%bd%d0%b5%d0%bd%d0%b8%d0%b5-%d0%b3%d1%80%d0%be%d0%bc%d0%ba%d0%be%d1%81%d1%82%d0%b8-%d0%b4%d1%80%d1%83%d0%b3%d0%be%d0%b3%d0%be-%d0%bf%d1%80%d0%b8%d0%bb%d0%be%d0%b6%d0%b5%d0%bd%d0%b8%d1%8f","title":"Изменение громкости другого приложения","body":"<p>Нашел такой код:</p>\n\n<pre><code>using System;\nusing System.Runtime.InteropServices;\nusing System.Collections.Generic;\n\nnamespace SetAppVolumne\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const string app = \"Mozilla Firefox\";\n\n            foreach (string name in EnumerateApplications())\n            {\n                Console.WriteLine(\"name:\" + name);\n                if (name == app)\n                {\n                    // display mute state &amp; volume level (% of master)\n                    Console.WriteLine(\"Mute:\" + GetApplicationMute(app));\n                    Console.WriteLine(\"Volume:\" + GetApplicationVolume(app));\n\n                    // mute the application\n                    SetApplicationMute(app, true);\n\n                    // set the volume to half of master volume (50%)\n                    SetApplicationVolume(app, 50);\n                }\n            }\n        }\n\n        public static float? GetApplicationVolume(string name)\n        {\n            ISimpleAudioVolume volume = GetVolumeObject(name);\n            if (volume == null)\n                return null;\n\n            float level;\n            volume.GetMasterVolume(out level);\n            return level * 100;\n        }\n\n        public static bool? GetApplicationMute(string name)\n        {\n            ISimpleAudioVolume volume = GetVolumeObject(name);\n            if (volume == null)\n                return null;\n\n            bool mute;\n            volume.GetMute(out mute);\n            return mute;\n        }\n\n        public static void SetApplicationVolume(string name, float level)\n        {\n            ISimpleAudioVolume volume = GetVolumeObject(name);\n            if (volume == null)\n                return;\n\n            Guid guid = Guid.Empty;\n            volume.SetMasterVolume(level / 100, ref guid);\n        }\n\n        public static void SetApplicationMute(string name, bool mute)\n        {\n            ISimpleAudioVolume volume = GetVolumeObject(name);\n            if (volume == null)\n                return;\n\n            Guid guid = Guid.Empty;\n            volume.SetMute(mute, ref guid);\n        }\n\n        public static IEnumerable&lt;string&gt; EnumerateApplications()\n        {\n            // get the speakers (1st render + multimedia) device\n            IMMDeviceEnumerator deviceEnumerator = (IMMDeviceEnumerator)(new MMDeviceEnumerator());\n            IMMDevice speakers;\n            deviceEnumerator.GetDefaultAudioEndpoint(EDataFlow.eRender, ERole.eMultimedia, out speakers);\n\n            // activate the session manager. we need the enumerator\n            Guid IID_IAudioSessionManager2 = typeof(IAudioSessionManager2).GUID;\n            object o;\n            speakers.Activate(ref IID_IAudioSessionManager2, 0, IntPtr.Zero, out o);\n            IAudioSessionManager2 mgr = (IAudioSessionManager2)o;\n\n            // enumerate sessions for on this device\n            IAudioSessionEnumerator sessionEnumerator;\n            mgr.GetSessionEnumerator(out sessionEnumerator);\n            int count;\n            sessionEnumerator.GetCount(out count);\n\n            for (int i = 0; i &lt; count; i++)\n            {\n                IAudioSessionControl ctl;\n                sessionEnumerator.GetSession(i, out ctl);\n                string dn;\n                ctl.GetDisplayName(out dn);\n                yield return dn;\n                Marshal.ReleaseComObject(ctl);\n            }\n            Marshal.ReleaseComObject(sessionEnumerator);\n            Marshal.ReleaseComObject(mgr);\n            Marshal.ReleaseComObject(speakers);\n            Marshal.ReleaseComObject(deviceEnumerator);\n        }\n\n        private static ISimpleAudioVolume GetVolumeObject(string name)\n        {\n            // get the speakers (1st render + multimedia) device\n            IMMDeviceEnumerator deviceEnumerator = (IMMDeviceEnumerator)(new MMDeviceEnumerator());\n            IMMDevice speakers;\n            deviceEnumerator.GetDefaultAudioEndpoint(EDataFlow.eRender, ERole.eMultimedia, out speakers);\n\n            // activate the session manager. we need the enumerator\n            Guid IID_IAudioSessionManager2 = typeof(IAudioSessionManager2).GUID;\n            object o;\n            speakers.Activate(ref IID_IAudioSessionManager2, 0, IntPtr.Zero, out o);\n            IAudioSessionManager2 mgr = (IAudioSessionManager2)o;\n\n            // enumerate sessions for on this device\n            IAudioSessionEnumerator sessionEnumerator;\n            mgr.GetSessionEnumerator(out sessionEnumerator);\n            int count;\n            sessionEnumerator.GetCount(out count);\n\n            // search for an audio session with the required name\n            // NOTE: we could also use the process id instead of the app name (with IAudioSessionControl2)\n            ISimpleAudioVolume volumeControl = null;\n            for (int i = 0; i &lt; count; i++)\n            {\n                IAudioSessionControl ctl;\n                sessionEnumerator.GetSession(i, out ctl);\n                string dn;\n                ctl.GetDisplayName(out dn);\n                if (string.Compare(name, dn, StringComparison.OrdinalIgnoreCase) == 0)\n                {\n                    volumeControl = ctl as ISimpleAudioVolume;\n                    break;\n                }\n                Marshal.ReleaseComObject(ctl);\n            }\n            Marshal.ReleaseComObject(sessionEnumerator);\n            Marshal.ReleaseComObject(mgr);\n            Marshal.ReleaseComObject(speakers);\n            Marshal.ReleaseComObject(deviceEnumerator);\n            return volumeControl;\n        }\n    }\n\n    [ComImport]\n    [Guid(\"BCDE0395-E52F-467C-8E3D-C4579291692E\")]\n    internal class MMDeviceEnumerator\n    {\n    }\n\n    internal enum EDataFlow\n    {\n        eRender,\n        eCapture,\n        eAll,\n        EDataFlow_enum_count\n    }\n\n    internal enum ERole\n    {\n        eConsole,\n        eMultimedia,\n        eCommunications,\n        ERole_enum_count\n    }\n\n    [Guid(\"A95664D2-9614-4F35-A746-DE8DB63617E6\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface IMMDeviceEnumerator\n    {\n        int NotImpl1();\n\n        [PreserveSig]\n        int GetDefaultAudioEndpoint(EDataFlow dataFlow, ERole role, out IMMDevice ppDevice);\n\n        // the rest is not implemented\n    }\n\n    [Guid(\"D666063F-1587-4E43-81F1-B948E807363F\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface IMMDevice\n    {\n        [PreserveSig]\n        int Activate(ref Guid iid, int dwClsCtx, IntPtr pActivationParams, [MarshalAs(UnmanagedType.IUnknown)] out object ppInterface);\n\n        // the rest is not implemented\n    }\n\n    [Guid(\"77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface IAudioSessionManager2\n    {\n        int NotImpl1();\n        int NotImpl2();\n\n        [PreserveSig]\n        int GetSessionEnumerator(out IAudioSessionEnumerator SessionEnum);\n\n        // the rest is not implemented\n    }\n\n    [Guid(\"E2F5BB11-0570-40CA-ACDD-3AA01277DEE8\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface IAudioSessionEnumerator\n    {\n        [PreserveSig]\n        int GetCount(out int SessionCount);\n\n        [PreserveSig]\n        int GetSession(int SessionCount, out IAudioSessionControl Session);\n    }\n\n    [Guid(\"F4B1A599-7266-4319-A8CA-E70ACB11E8CD\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface IAudioSessionControl\n    {\n        int NotImpl1();\n\n        [PreserveSig]\n        int GetDisplayName([MarshalAs(UnmanagedType.LPWStr)] out string pRetVal);\n\n        // the rest is not implemented\n    }\n\n    [Guid(\"87CE5498-68D6-44E5-9215-6DA47EF883D8\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    internal interface ISimpleAudioVolume\n    {\n        [PreserveSig]\n        int SetMasterVolume(float fLevel, ref Guid EventContext);\n\n        [PreserveSig]\n        int GetMasterVolume(out float pfLevel);\n\n        [PreserveSig]\n        int SetMute(bool bMute, ref Guid EventContext);\n\n        [PreserveSig]\n        int GetMute(out bool pbMute);\n    }\n}\n</code></pre>\n\n<p>Но его выполнение мне выдаёт следующее: \n<a href=\"https://i.stack.imgur.com/3SIS1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3SIS1.png\" alt=\"введите сюда описание изображения\"></a></p>\n\n<p>Что нужно исправить?</p>\n\n<p>P.S. использую Windows 10.</p>\n"}