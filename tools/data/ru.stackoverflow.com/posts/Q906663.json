{"tags":["c#","методы"],"owner":{"reputation":141,"user_id":315948,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/64e8282cb4b615c3e7bea28d06b0f1ae?s=128&d=identicon&r=PG","display_name":"Паджерс","link":"https://ru.stackoverflow.com/users/315948/%d0%9f%d0%b0%d0%b4%d0%b6%d0%b5%d1%80%d1%81"},"is_answered":true,"view_count":161,"answer_count":1,"score":14,"last_activity_date":1550864236,"creation_date":1542224871,"last_edit_date":1550843920,"question_id":906663,"link":"https://ru.stackoverflow.com/questions/906663/%d0%91%d0%b5%d0%b7%d0%be%d0%bf%d0%b0%d1%81%d0%bd%d0%be%d1%81%d1%82%d1%8c-%d0%b8%d1%81%d0%bf%d0%be%d0%bb%d1%8c%d0%b7%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d1%8f-%d0%bc%d0%b5%d1%82%d0%be%d0%b4%d0%be%d0%b2-%d1%80%d0%b0%d1%81%d1%88%d0%b8%d1%80%d0%b5%d0%bd%d0%b8%d1%8f","title":"Безопасность использования методов расширения","body":"<p>Как я понимаю, методы самого класса в приоритете перед методами расширения.</p>\n\n<p>Возникает закономерный вопрос:</p>\n\n<p>А что будет, если я вот наплодил методы расширения, а потом через какое-то время выходит новая версия библиотеки, где определен точно такой же метод в классе. Выходит, он будет в приоритете и может работать несколько иначе — все поломается.</p>\n\n<p>Получается, методы расширения — это опасная штука?</p>\n\n<p>Вот пример:</p>\n\n<pre><code>public class Person\n{\n    public void Say()\n    {\n        Console.WriteLine(\"1\");\n    }\n}\n\npublic static class Test\n{\n    public static void Say(this Person p)\n    {\n        Console.WriteLine(\"2\");\n    }\n}\n\nclass Program\n{         \n    static void Main(string[] args)\n    {\n        var t = new Person();\n        t.Say();\n    } \n}\n</code></pre>\n\n<p>Допустим, мы реализовали метод <code>Say</code> в виде расширения и он выводил нам <code>2</code>, затем приходит обновление либы и тут бац и выводится <code>1</code>. Никаких предупреждений компилятор не выдает, хотя он выдает предупреждение в том случае если мы наследуемся и объявляем метод с такой же сигнатурой и он просит написать <code>new</code>.</p>\n\n<p>Еще забавно, что нельзя контролировать вызов конкретного метода-расширения, если есть пересечения между пространствами имен. В этом случае единственный вариант- это вызов через статику, что убивает удобство использования расширений.</p>\n"}