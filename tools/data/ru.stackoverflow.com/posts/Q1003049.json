{"tags":["c++","типы"],"owner":{"reputation":854,"user_id":212367,"user_type":"registered","accept_rate":96,"profile_image":"https://graph.facebook.com/686529364820372/picture?type=large","display_name":"Kto  To","link":"https://ru.stackoverflow.com/users/212367/kto-to"},"is_answered":true,"view_count":72,"accepted_answer_id":1003779,"answer_count":2,"score":1,"last_activity_date":1563355329,"creation_date":1563200531,"last_edit_date":1563201847,"question_id":1003049,"link":"https://ru.stackoverflow.com/questions/1003049/%d0%9a%d0%bb%d0%b0%d1%81%d1%81-type-info","title":"Класс type_info","body":"<p>Записать в файл имя функции, версию и параметр. Если с того момента исходный код функции изменился, вернуть сообщение что \"версия функций не совпадают\".</p>\n\n<p>Например есть 100 функций. Для проверки имен и версии я думаю воспользоваться классом <code>typeid</code> (в первый раз). Поэтому из функций делаю классы.\nПример как я думаю реализовать:</p>\n\n<pre><code>class Base { void f(int seed) = 0; }\nclass C1   : public Base { void f(int seed) override; }\nclass C2   : public Base { void f(int seed) override; }\n// ...\nclass C100 : public Base { void f(int seed) override; }\n\nvoid saveToFile(Base *b, int seed) {\n    // псевдокод. Открываю и записываю в файл\n    auto t = typeid(*b);\n    Fout &lt;&lt; t.name()      // имя функции\n         &lt;&lt; t.hash_code() // версия функции\n         &lt;&lt; seed;         // параметр функции\n}\n\nvoid readFromFile(Base *b, int seed) {\n    // тут не знаю еще как делать.\n}\n</code></pre>\n\n<p>Вопросы:</p>\n\n<ol>\n<li>Можно ли использовать <code>typeid()</code> для сохранения и сравнения типов классов?</li>\n<li>Будет ли корректно работать, если я буду сохранять/открывать в разных версиях компиляторов С++?</li>\n<li>Как красиво реализовать <code>readFromFile</code>?</li>\n<li>Советы, предложения, замечания?</li>\n</ol>\n\n<p><strong>UDP: ответ - нельзя использовать <code>typeid()</code>.</strong> А как лучше сделать, что бы особо не запариваться. Что бы автоматически посчитать хеш функции/класса и сравнить имеются ли изменения. И желательно (но не обязательно) мультиплатформенность/на разных компиляторах</p>\n"}