{"tags":["c++","c","консоль"],"owner":{"reputation":660,"user_id":260756,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/gZexj.jpg?s=128&g=1","display_name":"invzbl3","link":"https://ru.stackoverflow.com/users/260756/invzbl3"},"is_answered":true,"view_count":388,"accepted_answer_id":802885,"answer_count":1,"score":3,"last_activity_date":1522790094,"creation_date":1521392329,"last_edit_date":1522790094,"question_id":801076,"link":"https://ru.stackoverflow.com/questions/801076/%d0%9a%d0%b0%d0%ba-%d1%80%d0%b5%d0%b0%d0%bb%d0%b8%d0%b7%d0%be%d0%b2%d0%b0%d1%82%d1%8c-%d0%bd%d0%b0%d0%b6%d0%b0%d1%82%d0%b8%d0%b5-%d0%ba%d0%bb%d0%b0%d0%b2%d0%b8%d1%88-ctrl-%d0%b8-shift-%d0%bd%d0%b0-%d1%8f%d0%b7%d1%8b%d0%ba%d0%b5-%d0%a1-c","title":"Как реализовать нажатие клавиш Ctrl и Shift на языке С/C++","body":"<p>Задание звучит так: </p>\n\n<blockquote>\n  <p>Написать программу, которая выводит в заданную позицию консоли\n  информацию про координаты мыши, состояние управляющих клавиш (ALT,\n  CTRL, SHIFT), скан-код и ASCII-код нажатой клавиши. Для вывода\n  результатов использовать функции <em>SetConsoleCursorPosition,(),\n  wsprintf(), WriteConsole()</em>.</p>\n</blockquote>\n\n<p>Перечитал <a href=\"http://www.cyberguru.ru/win32/win32-keyboard.html?showall=1\" rel=\"nofollow noreferrer\">документацию</a>, посмотрел примеры (последний слишком сумбурный). Так как клавиши символьные, то для их написания придется использовать ещё функцию <code>TranslateMessage</code>. </p>\n\n<p>Вопрос по реализации нажатия клавиш, каким образом лучше поступить. (Выделил блок кода, по которому вопрос).</p>\n\n<p>На данный момент имею такой код:</p>\n\n<pre><code>        #include \"stdafx.h\"\n        #include &lt;cstring&gt;\n        #include &lt;iostream&gt;\n        #include &lt;stdio.h&gt;\n        #include &lt;conio.h&gt;\n        #include &lt;windows.h&gt;\n        #include &lt;winuser.h&gt;\n\n\n        #define  STR_SIZE 256\n        #define BUFSIZE 65535\n        #define SHIFTED 0x8000\n\n\n        int main() {\n\n            setlocale(LC_ALL, \"rus\");\n            HANDLE hIn, hOut;\n            DWORD size = STR_SIZE;\n            char result[STR_SIZE];\n\n            FreeConsole();\n            AllocConsole();\n            SetConsoleOutputCP(1251);\n\n            hIn = GetStdHandle(STD_INPUT_HANDLE);\n            hOut = GetStdHandle(STD_OUTPUT_HANDLE);\n\n            GetDC(NULL); // дескриптор стола\n            POINT p; // структура для координат\n            COORD cord; // структура COORD, которая указывает позицию курсора\n\n            cord.X = 0; // координата X структуры COORD\n            cord.Y = 0; // координата Y структуры COORD\n\n   //------------------------------------------------------------------\n\n\n            HWND hwndMain;\n            HACCEL haccl;\n            UINT uMsg;\n            UINT wParam;\n            LONG lParam;\n            HWND hwnd;\n            MSG msg;\n\n                    switch (wParam)\n                    {\n                    case 0x10:\n\n                             /*SHIFT key.*/\n                        printf(\"SHIFT pressed\", wParam);\n\n                            break;\n\n                    case 0x11:\n\n                             /*CTRL key.*/\n                        printf(\"CTRL pressed\", wParam);\n\n                            break;\n                    case 0x12:\n\n                             /*ALT key. */\n                        printf(\"ALT pressed\", wParam);\n\n                            break;\n                    default:\n\n                        printf(\"OTHER pressed\", wParam);\n                             /* Обработка воспроизводимых символов. */\n\n                            break;\n                    }\n\n                    while (GetMessage(&amp;msg, (HWND)NULL, 0, 0))\n                    {\n                        if (TranslateAccelerator(hwndMain, haccl, &amp;msg) == 0)\n                        {\n                            TranslateMessage(&amp;msg);\n                            DispatchMessage(&amp;msg);\n                        }\n                    }   \n    //-----------------------------------------------------------------------------\n\n            while (1) {\n                wsprintf(result, \"Позиция курсора: \");\n                WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n                GetCursorPos(&amp;p);\n                wsprintf(result, \"x = %4ld, y = %4ld\\r\\n\", p.x, p.y);\n                WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), cord);\n            }\n            return 0;\n        }\n</code></pre>\n\n<p>UPD:</p>\n\n<pre><code>#include \"stdafx.h\"\n#include &lt;stdlib.h&gt;\n#include &lt;locale.h&gt;  \n#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;tchar.h&gt;\n\nVOID ErrorExit(LPCSTR);\nVOID KeyEventProc(KEY_EVENT_RECORD);\nVOID MouseEventProc(MOUSE_EVENT_RECORD);\n\n#define  STR_SIZE 256\n#define BUFSIZE 65535\n#define SHIFTED 0x8000\n\nHANDLE hStdin;\nHANDLE hOut;\nDWORD fdwSaveOldMode;\n\nDWORD scan = 0; //скан-код последней клавиши\nwchar_t code = 0; //код символа последней клавиши\nbool alt, ctrl, shift; //состояние управляющих клавиш\n\nvoid PrintData() {\n    DWORD size = STR_SIZE;\n    char result[STR_SIZE];\n\n    //GetDC(NULL); // дескриптор стола\n    POINT p; // структура для координат\n    COORD cord; // структура COORD, которая указывает позицию курсора\n\n    cord.X = 0; // координата X структуры COORD\n    cord.Y = 0; // координата Y структуры COORD\n\n    SetConsoleCursorPosition(hOut, cord);\n    wsprintf(result, \"Позиция курсора: \");\n    WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n    GetCursorPos(&amp;p);\n    wsprintf(result, \"x = %4ld, y = %4ld\\r\\n\", p.x, p.y);\n    WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n\n    if (scan != 0) {\n        wsprintf(result, \"Последняя нажатая клавиша\\nScan code: %4u\\r\\n\", (UINT)scan);\n        WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n\n        wsprintf(result, \"Character code: %4u\\r\\n\", (UINT)code);\n        WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n\n\n        if (ctrl) wsprintf(result, \"CTRL:(+) \"); else  wsprintf(result, \"CTRL:(-) \");\n        WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n\n        if (shift) wsprintf(result, \"SHIFT:(+) \"); else  wsprintf(result, \"SHIFT:(-) \");\n        WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n\n        if (alt) wsprintf(result, \"ALT:(+) \"); else  wsprintf(result, \"ALT:(-) \");\n        WriteConsole(hOut, result, strlen(result), nullptr, nullptr);\n    }\n}\n\nint main()\n{\n    //setlocale(LC_ALL, \"Russian\");\n    SetConsoleCP(1251);\n    SetConsoleOutputCP(1251);\n    DWORD cNumRead, fdwMode, i;\n    INPUT_RECORD irInBuf[128];\n\n    // Get the standard input handle. \n\n    hStdin = GetStdHandle(STD_INPUT_HANDLE);\n    hOut = GetStdHandle(STD_OUTPUT_HANDLE);\n\n    // Save the current input mode, to be restored on exit. \n\n    if (!GetConsoleMode(hStdin, &amp;fdwSaveOldMode))\n        ErrorExit(\"GetConsoleMode\");\n\n    // Enable the window and mouse input events. \n\n    fdwMode = ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT;\n    if (!SetConsoleMode(hStdin, fdwMode))\n        ErrorExit(\"SetConsoleMode\");\n\n    // Loop to read and handle input events. \n\n    while (1)\n    {\n        // Wait for the events. \n\n        if (!ReadConsoleInput(\n            hStdin,      // input buffer handle \n            irInBuf,     // buffer to read into \n            128,         // size of read buffer \n            &amp;cNumRead)) // number of records read \n            ErrorExit(\"ReadConsoleInput\");\n\n        // Dispatch the events to the appropriate handler. \n\n        for (i = 0; i &lt; cNumRead; i++)\n        {\n            switch (irInBuf[i].EventType)\n            {\n            case KEY_EVENT: // keyboard input \n                KeyEventProc(irInBuf[i].Event.KeyEvent);\n                break;\n\n            case MOUSE_EVENT: // mouse input \n                MouseEventProc(irInBuf[i].Event.MouseEvent);\n                break;\n\n            case WINDOW_BUFFER_SIZE_EVENT:\n            case FOCUS_EVENT:\n            case MENU_EVENT:\n                break;\n            }\n        }\n    }\n\n    // Restore input mode on exit.\n\n    SetConsoleMode(hStdin, fdwSaveOldMode);\n\n    return 0;\n}\n\n\nVOID KeyEventProc(KEY_EVENT_RECORD ker)\n{\n\n    if (ker.bKeyDown) {\n        scan = ker.wVirtualScanCode;\n        code = ker.uChar.UnicodeChar;\n\n        if ((ker.dwControlKeyState &amp; SHIFT_PRESSED) &gt; 0) shift = true; else shift = false;\n\n        if ((ker.dwControlKeyState &amp; LEFT_ALT_PRESSED) &gt; 0 ||\n            (ker.dwControlKeyState &amp; RIGHT_ALT_PRESSED) &gt; 0) alt = true;\n        else alt = false;\n\n        if ((ker.dwControlKeyState &amp; LEFT_CTRL_PRESSED) &gt; 0 ||\n            (ker.dwControlKeyState &amp; RIGHT_CTRL_PRESSED) &gt; 0) ctrl = true;\n        else ctrl = false;\n\n        PrintData();\n    }\n\n}\n\nVOID MouseEventProc(MOUSE_EVENT_RECORD mer)\n{\n    if (mer.dwEventFlags == MOUSE_MOVED) {\n        PrintData();\n    }\n}\n\nVOID ErrorExit(LPCSTR lpszMessage)\n{\n    fprintf(stderr, \"%s\\n\", lpszMessage);\n\n    // Restore input mode on exit.\n    SetConsoleMode(hStdin, fdwSaveOldMode);\n\n    ExitProcess(0);\n}\n</code></pre>\n"}