{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":4,"last_activity_date":1538650199,"last_edit_date":1538650199,"creation_date":1538639584,"answer_id":888885,"question_id":886982,"body":"<blockquote>\n  <p>есть ли какая-нибудь IDE для разработки приложений на чистом IL</p>\n</blockquote>\n\n<p>Как вариант, сделать саму Visual Studio такой IDE, пользуясь пользовательскими шаблонами. </p>\n\n<h1>I. Шаблон проекта</h1>\n\n<p>Создадим проект консольного приложения C#, назовем его, скажем, CilProject.</p>\n\n<p>В обозревателе решений в контекстном меню проекта вызовем пункт \"Выгрузить проект\". Там же у выгруженного проекта вызовем пункт \"Изменить проект\".</p>\n\n<p>Найдем в XML узел</p>\n\n<pre><code>&lt;Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets&gt;\n</code></pre>\n\n<p>И заменим его на следующий код:</p>\n\n<pre><code>  &lt;Import Project=\"$(MSBuildToolsPath)\\Microsoft.Common.targets\" /&gt;\n\n  &lt;Target Name=\"CreateManifestResourceNames\" /&gt;\n\n  &lt;Target Name=\"CoreCompile\" Inputs=\"$(MSBuildAllProjects);@(Compile);\" Outputs=\"@(IntermediateAssembly);\"&gt;\n    &lt;GetFrameworkPath&gt;\n      &lt;Output TaskParameter=\"Path\" PropertyName=\"FrameworkPath\" /&gt;\n    &lt;/GetFrameworkPath&gt;\n\n    &lt;PropertyGroup&gt;\n      &lt;IlAsmCommand&gt;&amp;quot;$(FrameworkPath)\\Ilasm.exe&amp;quot; /NOLOGO /DLL /OUTPUT:&amp;quot;@(IntermediateAssembly)&amp;quot; &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup Condition=\" '$(Configuration)' == 'Debug' \" &gt;\n      &lt;IlAsmCommand&gt;$(IlAsmCommand) /DEBUG &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup Condition=\" '$(Configuration)' == 'Release' \" &gt;&lt;IlAsmCommand&gt;$(IlAsmCommand) /OPTIMIZE &lt;/IlAsmCommand&gt;&lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup Condition=\" '$(AssemblyOriginatorKeyFile)' != '' \" &gt;\n      &lt;IlAsmCommand&gt;$(IlAsmCommand) /KEY:&amp;quot;$(AssemblyOriginatorKeyFile)&amp;quot; &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;Exec Command=\"$(IlAsmCommand) @(Compile-&gt;'&amp;quot;%(FullPath)&amp;quot;', ' ')\" \n          Outputs=\"@(IntermediateAssembly)\" /&gt;\n\n    &lt;CallTarget Targets=\"$(TargetsTriggeredByCompilation)\" Condition=\"'$(TargetsTriggeredByCompilation)' != ''\" /&gt;\n  &lt;/Target&gt;\n</code></pre>\n\n<p>Снова загрузим проект (в том же контекстном меню выберем пункт \"Перезагрузить проект\").</p>\n\n<p>Заменим AssemblyInfo.cs на AssemblyInfo.il:</p>\n\n<pre><code>.assembly CilProject { }\n</code></pre>\n\n<p>Заменим Program.cs на Program.il:</p>\n\n<pre><code>.method public static void Main() cil managed\n{\n     .entrypoint\n     .maxstack 1\n    ldstr \"Hello, world!\"\n    call void [mscorlib]System.Console::WriteLine(string)\n    call int32 [mscorlib]System.Console::Read()\n    pop\n    ret\n}\n</code></pre>\n\n<p>Для обоих .il файлов в свойствах установим <em>Действие при сборке</em> - <em>Компилировать</em>. После этого проект должен собираться и запускаться.</p>\n\n<p>В Visual Studio выберем <em>Проект - Экспорт шаблона - Шаблон проекта</em>, в диалоговом окне введем имя и описание и установим галку \"Автоматически импортировать в Visual Studio\". В результате должен получиться такой шаблон CilProject.csproj (для VS 2017 и .NET 4.0):</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" /&gt;\n  &lt;PropertyGroup&gt;\n    &lt;Configuration Condition=\" '$(Configuration)' == '' \"&gt;Debug&lt;/Configuration&gt;\n    &lt;Platform Condition=\" '$(Platform)' == '' \"&gt;AnyCPU&lt;/Platform&gt;\n    &lt;ProjectGuid&gt;{$guid1$}&lt;/ProjectGuid&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;RootNamespace&gt;$safeprojectname$&lt;/RootNamespace&gt;\n    &lt;AssemblyName&gt;$safeprojectname$&lt;/AssemblyName&gt;\n    &lt;TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion&gt;\n    &lt;FileAlignment&gt;512&lt;/FileAlignment&gt;\n    &lt;Deterministic&gt;true&lt;/Deterministic&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \"&gt;\n    &lt;PlatformTarget&gt;AnyCPU&lt;/PlatformTarget&gt;\n    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;\n    &lt;DebugType&gt;full&lt;/DebugType&gt;\n    &lt;Optimize&gt;false&lt;/Optimize&gt;\n    &lt;OutputPath&gt;bin\\Debug\\&lt;/OutputPath&gt;\n    &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;\n    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;\n    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \"&gt;\n    &lt;PlatformTarget&gt;AnyCPU&lt;/PlatformTarget&gt;\n    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;\n    &lt;Optimize&gt;true&lt;/Optimize&gt;\n    &lt;OutputPath&gt;bin\\Release\\&lt;/OutputPath&gt;\n    &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;\n    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;\n    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;\n  &lt;/PropertyGroup&gt;\n  &lt;ItemGroup&gt;\n    &lt;Reference Include=\"System\" /&gt;\n  &lt;/ItemGroup&gt;\n  &lt;ItemGroup&gt;\n    &lt;Compile Include=\"Program.il\" /&gt;\n    &lt;Compile Include=\"Properties\\AssemblyInfo.il\" /&gt;\n  &lt;/ItemGroup&gt;\n  &lt;Import Project=\"$(MSBuildToolsPath)\\Microsoft.Common.targets\" /&gt;\n  &lt;Target Name=\"CreateManifestResourceNames\" /&gt;\n  &lt;Target Name=\"CoreCompile\" Inputs=\"$(MSBuildAllProjects);@(Compile);\" Outputs=\"@(IntermediateAssembly);\"&gt;\n    &lt;GetFrameworkPath&gt;\n      &lt;Output TaskParameter=\"Path\" PropertyName=\"FrameworkPath\" /&gt;\n    &lt;/GetFrameworkPath&gt;\n    &lt;PropertyGroup&gt;\n      &lt;IlAsmCommand&gt;\"$(FrameworkPath)\\Ilasm.exe\" /NOLOGO /OUTPUT:\"@(IntermediateAssembly)\" &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n    &lt;PropertyGroup Condition=\" '$(Configuration)' == 'Debug' \"&gt;\n      &lt;IlAsmCommand&gt;$(IlAsmCommand) /DEBUG &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n    &lt;PropertyGroup Condition=\" '$(Configuration)' == 'Release' \"&gt;\n      &lt;IlAsmCommand&gt;$(IlAsmCommand) /OPTIMIZE &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n    &lt;PropertyGroup Condition=\" '$(AssemblyOriginatorKeyFile)' != '' \"&gt;\n      &lt;IlAsmCommand&gt;$(IlAsmCommand) /KEY:\"$(AssemblyOriginatorKeyFile)\" &lt;/IlAsmCommand&gt;\n    &lt;/PropertyGroup&gt;\n    &lt;Exec Command=\"$(IlAsmCommand) @(Compile-&gt;'&amp;quot;%(FullPath)&amp;quot;', ' ')\" Outputs=\"@(IntermediateAssembly)\" /&gt;\n    &lt;CallTarget Targets=\"$(TargetsTriggeredByCompilation)\" Condition=\"'$(TargetsTriggeredByCompilation)' != ''\" /&gt;\n  &lt;/Target&gt;\n&lt;/Project&gt;\n</code></pre>\n\n<p>Файл шаблона будет помещен в <code>(Мои документы)\\Visual Studio 2017\\Templates\\ProjectTemplates</code>. После этого в окне создания проекта в категории Visual C# появится наш CilProject. </p>\n\n<p><a href=\"https://i.stack.imgur.com/qTAP1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qTAP1.png\" alt=\"CilProject\"></a></p>\n\n<p>Уже можно писать программы (ссылки на сборки вписывать в AssemblyInfo.il, а код добавлять в виде файлов .il с действием при сборке \"Компилировать\"). </p>\n\n<h1>II. Шаблон элемента</h1>\n\n<p>Для удобства создадим также шаблон класса. Добавим файл Class1.il:</p>\n\n<pre><code>.class public auto ansi beforefieldinit Class1\n       extends [mscorlib]System.Object\n{\n    .method public hidebysig static void Method() cil managed\n    {       \n        ret\n    }\n} \n</code></pre>\n\n<p>В Visual Studio выберем <em>Проект - Экспорт шаблона - Шаблон элемента</em>, в диалоговом окне выберем файл <em>Class1.il</em>, установим галку \"Автоматически импортировать в Visual Studio\" и введем остальные параметры. Получим zip-файл с шаблоном в каталоге <code>(Мои документы)\\Visual Studio 2017\\Templates\\ItemTemplates</code>, распакуем его и откроем файл .vstemplate. В нем найдем узел <code>&lt;ProjectItem...&gt;</code> и добавим в него атрибут <code>ItemType=\"Compile\"</code>:</p>\n\n<pre><code>&lt;VSTemplate Version=\"3.0.0\" xmlns=\"http://schemas.microsoft.com/developer/vstemplate/2005\" Type=\"Item\"&gt;\n  &lt;TemplateData&gt;\n    &lt;DefaultName&gt;CilClass.il&lt;/DefaultName&gt;\n    &lt;Name&gt;CilClass&lt;/Name&gt;\n    &lt;Description&gt;Class (CIL)&lt;/Description&gt;\n    &lt;ProjectType&gt;CSharp&lt;/ProjectType&gt;\n    &lt;SortOrder&gt;10&lt;/SortOrder&gt;\n    &lt;Icon&gt;__TemplateIcon.ico&lt;/Icon&gt;\n  &lt;/TemplateData&gt;\n  &lt;TemplateContent&gt;\n    &lt;References /&gt;\n    &lt;ProjectItem ItemType=\"Compile\" SubType=\"\" TargetFileName=\"$fileinputname$.il\" ReplaceParameters=\"true\"&gt;Class1.il&lt;/ProjectItem&gt;\n  &lt;/TemplateContent&gt;\n&lt;/VSTemplate&gt;\n</code></pre>\n\n<p>Запакуем файлы в такой же ZIP-архив и поместим на место старого в каталоге <em>ItemTemplates</em>. Перезапустим студию, после этого в окне добавления элемента, в категории \"Элементы Visual C#\" появится наш шаблон класса. </p>\n\n<p><a href=\"https://i.stack.imgur.com/tHfzK.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/tHfzK.png\" alt=\"CilClass\"></a></p>\n\n<h1>Результат</h1>\n\n<p>Что-то такое:</p>\n\n<p><a href=\"https://i.stack.imgur.com/m2js9.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/m2js9.png\" alt=\"IDE\"></a></p>\n\n<p>Плюсы: работает отладка, вывод ошибок и предупреждений компилятора с указанием файла и строки, можно переключаться между конфигурациями Debug/Release.</p>\n\n<p>Минусы: не работают свойства проекта, функционал добавления ссылок через интерфейс студии, подсветка синтаксиса, проверка ошибок во время редактирования и многое другое.</p>\n\n<p>Итоговые файлы шаблонов: <a href=\"https://yadi.sk/d/iQZtbjkndUkCcw\" rel=\"nofollow noreferrer\">шаблон проекта</a>, <a href=\"https://yadi.sk/d/TcAYNnJcj5N2uQ\" rel=\"nofollow noreferrer\">шаблон элемента</a>. </p>\n\n<blockquote>\n  <p>чем бы следовало вооружиться для более детального его изучения</p>\n</blockquote>\n\n<p>Утилитой <a href=\"https://docs.microsoft.com/ru-ru/dotnet/framework/tools/ildasm-exe-il-disassembler\" rel=\"nofollow noreferrer\">IL Disassembler</a>, документацией класса <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes?view=netframework-4.7.2\" rel=\"nofollow noreferrer\">System.Reflection.Emit.OpCodes</a>, третьим разделом <a href=\"http://www.ecma-international.org/publications/standards/Ecma-335.htm\" rel=\"nofollow noreferrer\">спецификации</a>. </p>\n\n<h1>Источники</h1>\n\n<p><a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/creating-project-and-item-templates?view=vs-2017\" rel=\"nofollow noreferrer\">Visual Studio Project and item templates</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/27381941/how-can-i-load-a-template-i-have-created-in-visual-studio\">How can i load a template I have created in Visual Studio?\n</a></p>\n\n<p><a href=\"https://stackoverflow.com/a/4076917/8674428\">Are there any examples of compiling CIL code from within a Visual Studio project\n</a></p>\n"}