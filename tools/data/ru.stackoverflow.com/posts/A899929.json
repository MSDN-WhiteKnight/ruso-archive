{"owner":{"reputation":4498,"user_id":248572,"user_type":"registered","accept_rate":85,"profile_image":"https://i.stack.imgur.com/52azV.png?s=128&g=1","display_name":"Kir_Antipov","link":"https://ru.stackoverflow.com/users/248572/kir-antipov"},"is_accepted":true,"score":16,"last_activity_date":1541161311,"last_edit_date":1541161311,"creation_date":1540907254,"answer_id":899929,"question_id":899928,"body":"<p>Я начал этот топик, дабы рассмотреть все известные (мне) способы решения поставленной проблемы и дать максимально развернутый ответ на сей довольно таки частый вопрос</p>\n\n<p>Если вдруг Вам известен метод, который я по каким-то причинам не описал в данном посте - напишите, пожалуйста, об этом в комментариях!</p>\n\n<p>Итак, поехали!</p>\n\n<hr>\n\n<h1>#0.0: Дублирование кода и никаких generic'ов</h1>\n\n<p>Бесспорно, самым банальным решением, к которому и прибегают все отчаявшиеся, является простое дублирование кода для каждого из типов:</p>\n\n<pre><code>public sbyte Add(sbyte A, sbyte B) =&gt; (sbyte)(A + B);\npublic byte Add(byte A, byte B) =&gt; (byte)(A + B);\npublic short Add(short A, short B) =&gt; (short)(A + B);\npublic ushort Add(ushort A, ushort B) =&gt; (ushort)(A + B);\npublic int Add(int A, int B) =&gt; A + B;\npublic uint Add(uint A, uint B) =&gt; A + B;\npublic long Add(long A, long B) =&gt; A + B;\npublic ulong Add(ulong A, ulong B) =&gt; A + B;\npublic float Add(float A, float B) =&gt; A + B;\npublic double Add(double A, double B) =&gt; A + B;\n</code></pre>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>По крайней мере это работает)</li>\n<li>Доступны операции только для заданных типов</li>\n<li>Операции для типов определены во время компиляции (не придется жертвовать временем и прочими ресурсами во время исполнения для создания данных методов)</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Очевидно, что это куча <s>хлама</s> дублирующего кода, которая ломает всякое изящество проекта</li>\n<li>Если вдруг метод <code>Add</code> немного поменяет свою логику (как бы странно это ни звучало), то переписывать придется каждый из <em>N</em> методов! </li>\n</ul>\n\n<hr>\n\n<h1>#0.1: Кодогенерация</h1>\n\n<p>Чтобы хоть как-то упростить себе жизнь и не писать множество однотипных методов, можно прибегнуть к кодогенерации с помощью встроенного в <code>Visual Studio</code> <a href=\"https://msdn.microsoft.com/ru-ru/library/bb126445.aspx\" rel=\"nofollow noreferrer\">T4-генератора</a>:</p>\n\n<p>Добавим в проект файл <code>Calc.tt</code> по шаблону <code>Text Template</code> (<code>Текстовый шаблон</code>). Запишем в него следующий код:</p>\n\n<pre><code>&lt;#@ output extension=\".cs\" #&gt;\n&lt;#@ assembly name=\"System.Core\" #&gt;\n&lt;#@ import namespace=\"System.Linq\" #&gt;\n&lt;#@ import namespace=\"System.Text\" #&gt;\n&lt;#@ import namespace=\"System.Collections.Generic\" #&gt;\n&lt;#@ template debug=\"false\" hostspecific=\"false\" language=\"C#\" #&gt;\n\nnamespace Calc\n{\n    public class Calculator\n    {\n    &lt;# \n        // Типы, используемые в методах\n        string[] usingTypes = new[] { \"sbyte\", \"byte\", \"short\", \"ushort\", \"int\", \"uint\", \"long\", \"ulong\", \"float\", \"double\" };\n\n        // Экземпляры некоторых типов перед операцией кастятся к int, так что результат нужно привести обратно\n        HashSet&lt;string&gt; needCast= new HashSet&lt;string&gt; { \"sbyte\", \"byte\", \"short\", \"ushort\" };\n\n        foreach(string T in usingTypes)\n        {\n    #&gt;\n        public &lt;#=T#&gt; Add(&lt;#=T#&gt; A, &lt;#=T#&gt; B) =&gt; &lt;#=(needCast.Contains(T) ? $\"({T})(A + B)\" : \"A + B\")#&gt;;\n    &lt;#\n        }\n    #&gt;\n    }\n}\n</code></pre>\n\n<p>Выхлоп (<code>Calc.cs</code>) будет выглядеть так:</p>\n\n<pre><code>namespace Calc\n{\n    public class Calculator\n    {\n        public sbyte Add(sbyte A, sbyte B) =&gt; (sbyte)(A + B);\n        public byte Add(byte A, byte B) =&gt; (byte)(A + B);\n        public short Add(short A, short B) =&gt; (short)(A + B);\n        public ushort Add(ushort A, ushort B) =&gt; (ushort)(A + B);\n        public int Add(int A, int B) =&gt; A + B;\n        public uint Add(uint A, uint B) =&gt; A + B;\n        public long Add(long A, long B) =&gt; A + B;\n        public ulong Add(ulong A, ulong B) =&gt; A + B;\n        public float Add(float A, float B) =&gt; A + B;\n        public double Add(double A, double B) =&gt; A + B;\n    }\n}\n</code></pre>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>См. пункт <strong>0.0</strong>)</li>\n<li>Мы избавились от проблемной модификации логики метода: теперь вся логика сосредоточена в одном месте, так что достаточно отредактировать алгоритм всего один раз, а кодогенератор проделает всю грязную работу за Вас)</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Поддержка подсветки синтаксиса текстовых шаблонов в <code>Visual Studio</code> хромает, мягко говоря. Так что о комфортном коддинге можно забыть)\n\n<ul>\n<li>Это до сих пор нежелательное и лишь слегка прикрытое дублирование кода</li>\n</ul></li>\n</ul>\n\n<p><sub>Данный подход был первоначально описан в <a href=\"https://ru.stackoverflow.com/a/662346/248572\">ответе от Alexander Petrov</a></sub></p>\n\n<hr>\n\n<h1>#1.0: dynamic</h1>\n\n<p>Так как мы решаем проблему, которая неведома языкам с динамической типизацией, то следующим очевидным решением будет использование <a href=\"https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/dynamic\" rel=\"nofollow noreferrer\">dynamic</a>:</p>\n\n<blockquote>\n  <p>Тип <code>dynamic</code> включает операции, в которых он применяется для обхода проверки типов во время компиляции. Такие операции разрешаются во время выполнения.</p>\n</blockquote>\n\n<p>Собственно, нам это подходит!</p>\n\n<p>Перепишем метод <code>Add</code> таким образом: </p>\n\n<pre><code>// Достаточно привести лишь один аргумент к dynamic,\n// дабы обозначить динамический контекст\npublic T Add(T A, T B) =&gt; (T)((dynamic)A + B);\n</code></pre>\n\n<p>И посмотрим, что получилось:</p>\n\n<pre><code>Calculator&lt;int&gt; calcInt = new Calculator&lt;int&gt;();\nint resultInt = calcInt.Add(19, 23); // 42\n\nCalculator&lt;sbyte&gt; calcSbyte = new Calculator&lt;sbyte&gt;();\nsbyte resultSbyte = calcSbyte.Add(19, 23); // 42\n</code></pre>\n\n<p>Кажется, все чудесно работает!<br>\nПраво, все же вынужден добавить бочку дегтя в эту ложку меда:</p>\n\n<p>Помимо того, что разрешение динамического контекста съедает куда больше времени, нежели разрешение статического, так мы ведь не предусмотрели следующей вещи: </p>\n\n<p>Кто нам мешает написать так?</p>\n\n<pre><code>Calculator&lt;DateTime&gt; calcDate = new Calculator&lt;DateTime&gt;();\nDateTime resultDate = calcDate.Add(DateTime.Now, DateTime.Now);\n</code></pre>\n\n<p>Как раз таки никто, так что код спокойно скомпилируется, экземпляр класса будет успешно создан, однако метод <code>Add</code> упадет со следующей ошибкой:</p>\n\n<blockquote>\n  <p><strong>Microsoft.CSharp.RuntimeBinder.RuntimeBinderException</strong>: Не удается применить оператор <code>+</code> к операндам типа <code>System.DateTime</code> и <code>System.DateTime</code></p>\n</blockquote>\n\n<p>Как уже упоминалось в самом вопросе, мы <strong>не можем</strong> ограничить <code>generic</code>-параметры определенным набором типов. Так что придется делать это вручную и в <code>runtime</code>:</p>\n\n<pre><code>public class Calculator&lt;T&gt;\n{\n    // Добавим классу статический инициализатор, который будет отвечать \n    // за проверку валидности типа\n\n    // (Статический - дабы не проводить проверку несколько раз для одинаковых типов)\n    static Calculator()\n    {\n        // Если тип не является одним из доступных, то сразу же выкинем ошибку,\n        // дав тем самым конечному пользователю понять, что его \n        // действия неправомерны\n        if (!new[] { typeof(sbyte), typeof(byte),\n                    typeof(short), typeof(ushort),\n                    typeof(int), typeof(uint),\n                    typeof(long), typeof(ulong),\n                    typeof(float), typeof(double)}.Contains(typeof(T)))\n            throw new NotSupportedException($\"Type `{typeof(T).FullName}` isn't supported!\");\n    }\n\n    // Достаточно привести лишь один аргумент к dynamic,\n    // дабы обозначить динамический контекст\n    public T Add(T A, T B) =&gt; (T)((dynamic)A + B);           \n}\n</code></pre>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>Мы избавились от дублирования кода</li>\n<li>Мы наконец добавили в код <code>generic</code>, чтобы для разных типов работали разные предопределенные методы</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li><em>\"Чудесная\"</em> скорость отработки динамического контекста</li>\n<li>Необходимость проверять допустимость используемого типа уже во время исполнения</li>\n</ul>\n\n<hr>\n\n<h1>#2.0: Изменение контекста функции в зависимости от типа</h1>\n\n<p>Идея данного метода заключается в следующем:</p>\n\n<p>Мы не можем просто так переназначить функции во время исполнения в духе:</p>\n\n<pre><code>public void A() =&gt; ...;\n...\nA = () =&gt; Console.WriteLine(\"Hello, world!\");\n</code></pre>\n\n<p>Однако мы можем переназначать переменные (в том числе и типов <a href=\"https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/delegates/\" rel=\"nofollow noreferrer\">делегатов</a>)!</p>\n\n<p>Мы можем создать внутреннее поле типа делегата, переназначать его в зависимости от ситуации, а уже публичный метод, будучи неизменным, как раз и будет его эксплуатировать:</p>\n\n<pre><code>public class Calculator&lt;T&gt;\n{\n    static Calculator()\n    {\n        // Инициализируем _add, исходя из типа generic-параметра\n        if (typeof(T) == typeof(sbyte))\n            _add = castFrom&lt;sbyte&gt;((x, y) =&gt; (sbyte)(x + y));\n        else if (typeof(T) == typeof(byte))\n            _add = castFrom&lt;byte&gt;((x, y) =&gt; (byte)(x + y));\n        else if (typeof(T) == typeof(short))\n            _add = castFrom&lt;short&gt;((x, y) =&gt; (short)(x + y));\n        else if (typeof(T) == typeof(ushort))\n            _add = castFrom&lt;ushort&gt;((x, y) =&gt; (ushort)(x + y));\n        else if (typeof(T) == typeof(int))\n            _add = castFrom&lt;int&gt;((x, y) =&gt; x + y);\n        else if (typeof(T) == typeof(uint))\n            _add = castFrom&lt;uint&gt;((x, y) =&gt; x + y);\n        else if (typeof(T) == typeof(long))\n            _add = castFrom&lt;long&gt;((x, y) =&gt; x + y);\n        else if (typeof(T) == typeof(ulong))\n            _add = castFrom&lt;ulong&gt;((x, y) =&gt; x + y);\n        else if (typeof(T) == typeof(int))\n            _add = castFrom&lt;float&gt;((x, y) =&gt; x + y);\n        else if (typeof(T) == typeof(double))\n            _add = castFrom&lt;double&gt;((x, y) =&gt; x + y);\n        else\n            // Если тип не является ни одним из доступных, то выкинем ошибку \n            throw new NotSupportedException($\"Type `{typeof(T).FullName}` isn't supported!\");\n\n        Func&lt;T, T, T&gt; castFrom&lt;U&gt;(Func&lt;U, U, U&gt; f) =&gt; (Func&lt;T, T, T&gt;)(object)f;\n    }\n\n    // Инструкция внутри _add будет проинициализированна\n    // в зависимости от типа generic-параметра\n    private static readonly Func&lt;T, T, T&gt; _add;\n\n    // А вот инструкция в самой функции Add всегда одна - вызвать _add)\n    public T Add(T A, T B) =&gt; _add(A, B);           \n}\n</code></pre>\n\n<p>Этот метод стоило бы расположить в блоке про <strong>\"Дублирование кода\"</strong>, однако для многих он все же является менее очевидным, чем <code>dynamic</code>, да и тему можно развить, что показано в следующем блоке)</p>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>Работать это будет куда быстрее, чем предыдущий метод с использованием динамического контекста</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Мы опять злоупотребляем дублированием кода (опять же, можно совместить сей метод с кодогенерацией)</li>\n<li>Необходимость проверять допустимость используемого типа уже во время исполнения</li>\n</ul>\n\n<p><sub>Данный подход был первоначально описан в <a href=\"https://ru.stackoverflow.com/a/662289/248572\">ответе от VladD</a></sub></p>\n\n<hr>\n\n<h1>#2.1: Expression:</h1>\n\n<p>С помощью класса <a href=\"https://docs.microsoft.com/ru-ru/dotnet/api/system.linq.expressions.expression?redirectedfrom=MSDN&amp;view=netframework-4.7.2\" rel=\"nofollow noreferrer\">Expression</a> мы можем по узлам собрать нужное нам дерево выражений и скомпилировать его в делегат необходимой сигнатуры, используя при этом базовую идею предыдущего подхода:</p>\n\n<pre><code>public class Calculator&lt;T&gt;\n{\n    static Calculator()\n    {\n        // Эту проверку Вы уже наблюдали)\n        if (!new[] { typeof(sbyte), typeof(byte),\n            typeof(short), typeof(ushort),\n            typeof(int), typeof(uint),\n            typeof(long), typeof(ulong),\n            typeof(float), typeof(double)}.Contains(typeof(T)))\n            throw new NotSupportedException($\"Type `{typeof(T).FullName}` isn't supported!\");\n\n        // Укажем параметры, испоьзуемые в функции\n        ParameterExpression a = Expression.Parameter(typeof(T));\n        ParameterExpression b = Expression.Parameter(typeof(T));\n\n        // Создадим узел сложения заданных параметров\n        BinaryExpression addition = Expression.Add(a, b);\n\n        // Скомпилируем полученное дерево\n        _add = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(addition, a, b).Compile();\n    }\n\n    // Инструкция внутри _add будет проинициализированна\n    // в зависимости от типа generic-параметра\n    private static readonly Func&lt;T, T, T&gt; _add;\n\n    // А вот инструкция в самой функции Add всегда одна - вызвать _add)\n    public T Add(T A, T B) =&gt; _add(A, B);\n}\n</code></pre>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>Мы снова избавились от дублирования кода</li>\n<li>По скорости работы это приближено к не-<code>generic</code> реализациям)</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Придется потратить немного ресурсов в <code>runtime</code> на создание метода</li>\n<li>Необходимость проверять допустимость используемого типа уже во время исполнения</li>\n</ul>\n\n<p><sub>Данный подход был первоначально описан в <a href=\"https://ru.stackoverflow.com/a/562688/248572\">ответе от Pavel Mayorov</a></sub></p>\n\n<hr>\n\n<h1>#3.0: Векторизация</h1>\n\n<p>У <code>Microsoft</code> есть следующий прекрасный пакет - <a href=\"https://www.nuget.org/packages/System.Numerics.Vectors\" rel=\"nofollow noreferrer\">System.Numerics.Vectors</a>, описание коиего гласит:</p>\n\n<blockquote>\n  <p>Обеспечивает аппаратно-ускоренные числовые типы, подходящие для высокопроизводительной обработки и графических приложений.</p>\n</blockquote>\n\n<p>В данном пакете нас интересует тип <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1?redirectedfrom=MSDN&amp;view=netcore-2.1\" rel=\"nofollow noreferrer\">Vector&lt;T></a>, которой способен векторизовать входные данные, после чего мы можем применять к полученным векторам нужные нам арифметические операции!</p>\n\n<p>Посмотрим на примере:</p>\n\n<pre><code>public class Calculator&lt;T&gt; where T : struct\n{\n    static Calculator()\n    {\n        // Эту проверку Вы уже наблюдали)\n        if (!new[] { typeof(sbyte), typeof(byte),\n                typeof(short), typeof(ushort),\n                typeof(int), typeof(uint),\n                typeof(long), typeof(ulong),\n                typeof(float), typeof(double)}.Contains(typeof(T)))\n            throw new NotSupportedException($\"Type `{typeof(T).FullName}` isn't supported!\");\n    }\n\n    // Создадим векторы на основе заданных значений,\n    // после чего сложим их и вернем 0-вое измерение\n    // результирующего вектора\n    public T Add(T A, T B) =&gt; (new Vector&lt;T&gt;(A) + new Vector&lt;T&gt;(B))[0];\n}\n</code></pre>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>Никакого дублирования кода</li>\n<li>Высокая производительность (в некоторых тестах векторизация показывает себя даже лучше нативного кода! Какие операции пройдут быстрее - смотрите в <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1?redirectedfrom=MSDN&amp;view=netcore-2.1#remarks\" rel=\"nofollow noreferrer\">данной табличке</a>)</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Необходимость установки дополнительного <code>nuget</code>-пакета</li>\n<li>Необходимость проверять допустимость используемого типа уже во время исполнения</li>\n</ul>\n\n<p><sub>Данный подход был первоначально описан в <a href=\"https://ru.stackoverflow.com/a/562580/248572\">ответе от VladD</a></sub></p>\n\n<hr>\n\n<h1>#4.0: IL позволит Вам то, чего не позволит C#!</h1>\n\n<p>Как известно, код любого <code>.NET</code>-языка транслируется в <a href=\"https://ru.wikipedia.org/wiki/Common_Intermediate_Language\" rel=\"nofollow noreferrer\">IL</a>-код. Этот факт мы и будем использовать)</p>\n\n<p>Напишем такой вот код:</p>\n\n<pre><code>int a = 2;\nint b = 3;\nint c = a + b;\n</code></pre>\n\n<p>Просмотрев <code>IL</code>-код, созданный для данной цепочки выражений, мы увидим нечто такое:</p>\n\n<pre><code>ldc.i4.2    \nstloc a\nldc.i4.3    \nstloc b\nldloc a\nldloc b\nadd         \nstloc c\n</code></pre>\n\n<p><em>(Код примерный, таким он, конечно, не будет. Приведен он в таком виде для ясности происходящего)</em></p>\n\n<p>Что же отвечает за сложение двух чисел типа <code>int</code>? <br>\nСтандартная инструкция <code>add</code>)</p>\n\n<p>Перепишем код:</p>\n\n<pre><code>double a = 2;\ndouble b = 3;\ndouble c = a + b;\n</code></pre>\n\n<p>Теперь <code>IL</code> будет таковым:</p>\n\n<pre><code>ldc.r8 2\nstloc a\nldc.r8 3\nstloc b\nldloc a\nldloc b\nadd         \nstloc c\n</code></pre>\n\n<p>Что изменилось? Только инструкция <strong><em>l</strong>oa<strong>dc</strong>onstant</em>, инструкция же сложения так и осталось на своем законном месте)</p>\n\n<p>Я веду к тому, что на уровне <code>IL</code> <strong>одна и та же</strong> инструкция <code>add</code> спокойненько обрабатывает сложение экземпляров типов <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>float</code>, <code>double</code>)<br>\nА ведь это именно то, что нам нужно!</p>\n\n<p>(К слову, это верно и для инструкций <code>sub</code>, <code>mul</code>, <code>div</code>, <code>rem</code>. Подробный лист инструкций <code>IL</code> с описанием <a href=\"https://en.wikipedia.org/wiki/List_of_CIL_instructions\" rel=\"nofollow noreferrer\">найдете здесь</a>)</p>\n\n<p>Добавим к проекту файл <code>Calc.il</code>, используя расширение <a href=\"https://marketplace.visualstudio.com/items?itemName=ins0mniaque.ILSupport\" rel=\"nofollow noreferrer\">ILSupport</a>, после чего запишем туда следующий код:</p>\n\n<pre><code>.class Calc.Calculator`1&lt;T&gt;\n{\n    .method public !T Add(!T, !T) cil managed\n    {\n        .maxstack 2\n        ldarg.0     // Кладем на стек нулевой аргумент\n        ldarg.1     // Кладем на стек первый аргумент\n        add         // Складываем их\n        ret         // Возвращаем результат\n    }\n}\n</code></pre>\n\n<p>На <code>C#</code> же проделаем следующие манипуляции с классом:</p>\n\n<pre><code>public class Calculator&lt;T&gt;\n{\n    static Calculator()\n    {\n        // Эту проверку Вы уже наблюдали)\n        if (!new[] { typeof(sbyte), typeof(byte),\n                typeof(short), typeof(ushort),\n                typeof(int), typeof(uint),\n                typeof(long), typeof(ulong),\n                typeof(float), typeof(double)}.Contains(typeof(T)))\n            throw new NotSupportedException($\"Type `{typeof(T).FullName}` isn't supported!\");\n    }\n\n    // Сообщаем, что метод реализован где-то в другом месте\n    [MethodImpl(MethodImplOptions.ForwardRef)]\n    public extern T Add(T A, T B);\n}\n</code></pre>\n\n<p>Вот и готово! Скомпилировав проект, мы получим класс, который способен работать с любым стандартным числовым типом)</p>\n\n<h3>Плюсы:</h3>\n\n<ul>\n<li>Никакого дублирования кода</li>\n<li>Не нужно тратить времени и прочих ресурсов на создание метода в <code>runtime</code></li>\n<li>Высокая производительность, совпадающая с таковой нативного кода (ибо это он по сути и есть))</li>\n</ul>\n\n<h3>Минусы:</h3>\n\n<ul>\n<li>Для человека, который не знаком с <code>IL</code>, решение может показаться сложным</li>\n<li>Необходимо настроить проект на <em>\"сожительство\"</em> <code>C#</code> и <code>IL</code></li>\n<li>Необходимость проверять допустимость используемого типа уже во время исполнения</li>\n</ul>\n\n<p><sub>Данный подход был первоначально описан в <a href=\"https://ru.stackoverflow.com/a/894125/248572\">ответе от Kir_Antipov</a></sub></p>\n\n<hr>\n\n<p>Надеюсь, один из предложенных в данном ответе методов помог решить Вам указанную задачу)</p>\n\n<p>А пока у меня есть 2 большие просьбы:</p>\n\n<ol>\n<li><p>Не забывайте благодарить авторов оригинальных ответов (помимо своего решения я собрал в данном ответе и идеи других участников сообщества, приведя на них ссылки)</p></li>\n<li><p>Если у Вас есть еще идеи по решению данной задачи/по исправлению данного ответа - пишите комментарии! Буду безумно рад выслушать Ваше мнение)</p></li>\n</ol>\n"}