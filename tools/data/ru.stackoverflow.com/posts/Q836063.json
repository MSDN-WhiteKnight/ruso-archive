{"tags":["c++","windows","visual-studio","winapi","visual-c++"],"owner":{"reputation":25,"user_id":299140,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128","display_name":"Никита Колесников","link":"https://ru.stackoverflow.com/users/299140/%d0%9d%d0%b8%d0%ba%d0%b8%d1%82%d0%b0-%d0%9a%d0%be%d0%bb%d0%b5%d1%81%d0%bd%d0%b8%d0%ba%d0%be%d0%b2"},"is_answered":true,"view_count":294,"accepted_answer_id":836189,"answer_count":1,"score":2,"last_activity_date":1527825668,"creation_date":1527788061,"last_edit_date":1527788758,"question_id":836063,"link":"https://ru.stackoverflow.com/questions/836063/%d0%a0%d0%b0%d0%b1%d0%be%d1%82%d0%b0-%d1%81-%d1%84%d0%b0%d0%b9%d0%bb%d0%b0%d0%bc%d0%b8-%d0%a1-winapi","title":"Работа с файлами С++ (WinAPI)","body":"<p>Программа должна открывать для чтения и записи \".txt\" файл, в котором хранятся модели и цены ноутбуков, и при необходимости вызывать окно добавления данных в файл и сохранять этот файл.</p>\n\n<p>Проблемы с которыми столкнулся:  </p>\n\n<ol>\n<li><p>При открытии \".txt\" файла в кодировке ANSII в окно выводится куча непонятных символов, однако, если сохранить файл как UNICODE, открывает без проблем. Необходимо поправить код, чтобы программа без проблем открывала кодировку ANSII  </p></li>\n<li><p>Возможно из-за конфликта кодировок при добавлении данных в поле EDIT_2 и последующем их сохранении вместе цены ноутбука, сохраняется рандомный символ.</p></li>\n</ol>\n\n<p></p>\n\n<pre><code> using namespace std;\n\n// Глобальные переменные:  \nHINSTANCE hInst;                                // текущий экземпляр  \nWCHAR szTitle[MAX_LOADSTRING];                  // Текст строки заголовка  \nWCHAR szWindowClass[MAX_LOADSTRING];            // имя класса главного окна  \n\nATOM                MyRegisterClass(HINSTANCE hInstance);  \nBOOL                InitInstance(HINSTANCE, int);  \nLRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);  \nINT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);  \nBOOL CALLBACK DlgProcAdd(HWND, UINT, WPARAM, LPARAM);  \n\nint APIENTRY wWinMain(_In_ HINSTANCE hInstance,  \n                     _In_opt_ HINSTANCE hPrevInstance,  \n                     _In_ LPWSTR    lpCmdLine,  \n                     _In_ int       nCmdShow)    \n{  \n    UNREFERENCED_PARAMETER(hPrevInstance);  \n    UNREFERENCED_PARAMETER(lpCmdLine);  \n\n    // Инициализация глобальных строк  \n    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);  \n    LoadStringW(hInstance, IDC_TEST, szWindowClass, MAX_LOADSTRING);  \n    MyRegisterClass(hInstance);  \n\n    // Выполнить инициализацию приложения:  \n    if (!InitInstance (hInstance, nCmdShow))  \n    {  \n        return FALSE;  \n    }  \n    MSG msg;  \n\n    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_TEST));  \n\n    // Цикл основного сообщения:  \n    while (GetMessage(&amp;msg, nullptr, 0, 0))  \n    {  \n        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))  \n        {  \n            TranslateMessage(&amp;msg);  \n            DispatchMessage(&amp;msg);  \n        }  \n    }  \n\n    return (int) msg.wParam;  \n}  \n\n//  \n//  ФУНКЦИЯ: MyRegisterClass()  \n//  \n//  НАЗНАЧЕНИЕ: регистрирует класс окна.  \n//  \nATOM MyRegisterClass(HINSTANCE hInstance)  \n{\n    WNDCLASSEXW wcex;\n\n    wcex.cbSize = sizeof(WNDCLASSEX);\n\n    wcex.style          = CS_HREDRAW | CS_VREDRAW;\n    wcex.lpfnWndProc    = WndProc;\n    wcex.cbClsExtra     = 0;\n    wcex.cbWndExtra     = 0;\n    wcex.hInstance      = hInstance;\n    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));\n    wcex.hCursor        = LoadCursor(hInstance,MAKEINTRESOURCE (IDC_POINTER));\n    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);\n    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_TEST);\n    wcex.lpszClassName  = szWindowClass;\n    wcex.hIconSm        = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1));\n\n    return RegisterClassExW(&amp;wcex);\n}\n\n//\n//   ФУНКЦИЯ: InitInstance(HINSTANCE, int)\n//\n//   НАЗНАЧЕНИЕ: сохраняет обработку экземпляра и создает главное окно.\n//\n//   КОММЕНТАРИИ:\n//\n//        В данной функции дескриптор экземпляра сохраняется в глобальной переменной, а также\n//        создается и выводится на экран главное окно программы.\n//\nBOOL InitInstance(HINSTANCE hInstance, int nCmdShow)\n{\n   hInst = hInstance; // Сохранить дескриптор экземпляра в глобальной переменной\n\n   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,\n      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);\n\n   if (!hWnd)\n   {\n      return FALSE;\n   }\n\n   ShowWindow(hWnd, nCmdShow);\n   UpdateWindow(hWnd);\n\n   return TRUE;\n}\n//\n//  ФУНКЦИЯ: WndProc(HWND, UINT, WPARAM, LPARAM)\n//\n//  НАЗНАЧЕНИЕ:  обрабатывает сообщения в главном окне.\n//\n//  WM_COMMAND — обработать меню приложения\n//  WM_PAINT — отрисовать главное окно\n//  WM_DESTROY — отправить сообщение о выходе и вернуться\n//\n//\n    //Создаем пользовательскую структуру\n\n    struct laptop {\n        TCHAR model[20];\n        int price;\n    }ms,laptops[25];\n    const int N = 10; //количество ноутбуков на складе\n    laptop Stock[N];//Массив для всех ноутбуков\n    laptop Unit; //Структурные переменные\n    DWORD dwCount;\n\n\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    int wmId, wmEvent;\n    PAINTSTRUCT ps;\n    HDC hdc;\n    HMENU hSubMenu, hMenu;\n    int xpos, ypos;\n    //Переменные для стандартных диалогов \"Open\", \"Save As\"\n    static OPENFILENAME file;\n    static TCHAR name[MAX_PATH];\n    static HANDLE hFile;\n    BOOL succes;\n    TCHAR szT[200];\n    int i = 0;\n    int y = 0;\n    DWORD dw = 0;\n    const DWORD MaxLength = 250;\n    static wchar_t text[MaxLength] ;    \n    switch (message)\n    {\n        case WM_RBUTTONDOWN:\n        xpos = LOWORD(lParam);\n        ypos = HIWORD(lParam);\n        //Загрузим меню из ресурсов приложения\n        hMenu = LoadMenu(GetModuleHandle(NULL), MAKEINTRESOURCE(Context_Menu));\n        //Получим дескриптор подменю\n        hSubMenu = GetSubMenu(hMenu, 0);\n        //Отобразим контекстное меню\n        TrackPopupMenu(hSubMenu, TPM_LEFTALIGN, xpos, ypos, 0, hWnd, NULL);\n        break;\n    case WM_CREATE:\n\n    {\n        file.lStructSize = sizeof(OPENFILENAME);\n        file.hInstance = hInst;\n        file.lpstrFilter = _T(\"Text\\0*.txt\");\n        file.lpstrFile = name;\n        file.nMaxFile = 256;\n        file.lpstrInitialDir = _T(\".\\\\\");\n        file.lpstrDefExt = _T(\"txt\");\n    }\n\n    case WM_COMMAND:\n        wmId = LOWORD(wParam);\n        wmEvent = HIWORD(wParam);\n        // Разобрать выбор в меню:\n        switch (wmId)\n        {\n        case ID_32779:\n            file.lpstrTitle = _T(\"Открыть файл для чтения\");\n            file.Flags = OFN_HIDEREADONLY;\n            if (!GetOpenFileName(&amp;file)) return 1;\n            hFile = CreateFile(name, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n            hdc = GetDC(hWnd);\n            SetFilePointer(hFile, 0, 0, FILE_BEGIN);\n            //ReadFile(hFile, &amp;laptops, sizeof(laptops), &amp;dwCount, NULL);\n            while (ReadFile(hFile, &amp;laptops, sizeof(laptops), &amp;dwCount, NULL) &amp;&amp; dwCount != 0)\n            {\n\n            TextOut(hdc, 0, y, (LPWSTR)laptops, dwCount);\n                y += 16;\n\n            }\n            ReleaseDC(hWnd, hdc);\n            break;\n        case ID_32792:\n            file.lpstrTitle = _T(\"Сохранить файл\");\n            file.Flags = OFN_HIDEREADONLY;\n            succes = GetSaveFileName(&amp;file);\n            if (succes)\n            {\n                MessageBox(hWnd, file.lpstrFile, TEXT(\"Файл сохраняется с именем:\"), MB_OK);\n                hFile = CreateFile(file.lpstrFile, GENERIC_READ | GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);\n                SetFilePointer(hFile, 0, 0, FILE_END);\n                WriteFile(hFile, &amp;laptops, sizeof(laptops), &amp;dwCount, NULL);\n                CloseHandle(hFile);\n            }\n            else\n                MessageBox(hWnd, ESC_OF, TEXT(\"Отказ от выбора или ошибка\"), MB_ICONWARNING);\n            break;\n            // Разобрать выбор в меню:\n        case ID_32807:\n        {\n            DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG1), hWnd, DlgProcAdd);\n            break;\n\n        }\n        case IDM_ABOUT:\n            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);\n            break;\n        case IDM_EXIT:\n            DestroyWindow(hWnd);\n            break;\n        }\n\n    case WM_PAINT:\n    {\n        PAINTSTRUCT ps;\n        HDC hdc = BeginPaint(hWnd, &amp;ps);\n        // TODO: Добавьте сюда любой код прорисовки, использующий HDC...\n        EndPaint(hWnd, &amp;ps);\n    }\n    break;\n    case WM_DESTROY:\n    {   PostQuitMessage(0);\n    break;\n    default:\n        return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    return 0;\n    }\n}\n\nBOOL CALLBACK DlgProcAdd(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    HWND hModel, hPrice;\n    TCHAR str[20];\n    DWORD dw = 0;\n    static HANDLE hFile;\n    static int j = 0;\n    switch (message)\n    {\n    case WM_INITDIALOG:\n        hModel = GetDlgItem(hWnd, IDC_VVOD1);\n        hPrice = GetDlgItem(hWnd, IDC_VVOD2);\n        SetFocus(hModel);\n        return TRUE;\n    case WM_COMMAND:\n        if (LOWORD(wParam) == IDOK)\n        {\n            GetDlgItemText(hWnd, IDC_VVOD1, (LPWSTR)ms.model, sizeof(ms.model));\n            ms.price = GetDlgItemInt(hWnd, IDC_VVOD2, 0, 0);\n            FlushFileBuffers(hFile);\n            WriteFile(hFile, &amp;ms, sizeof(ms), &amp;dw, NULL);\n            SetFilePointer(hFile, 0, 0, FILE_END);\n            laptops[j++] = ms;\n            EndDialog(hWnd, 0);\n        }\n        else if (LOWORD(wParam) == IDCANCEL)\n        {\n            EndDialog(hWnd, LOWORD(wParam));\n            return (INT_PTR)TRUE;\n        }\n        return TRUE;\n        break;\n    case WM_CLOSE:\n        EndDialog(hWnd, 0);\n        return TRUE;\n    }\n    return FALSE;\n}\n// Обработчик сообщений для окна \"О программе\".\nINT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    UNREFERENCED_PARAMETER(lParam);\n    switch (message)\n    {\n    case WM_INITDIALOG:\n        return (INT_PTR)TRUE;\n        break;\n    case WM_COMMAND:\n        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)\n        {\n            EndDialog(hDlg, LOWORD(wParam));\n            return (INT_PTR)TRUE;\n        }\n        break;\n    }\n    return (INT_PTR)FALSE;\n}\n</code></pre>\n"}