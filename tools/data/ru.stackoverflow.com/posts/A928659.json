{"owner":{"reputation":1375,"user_id":298412,"user_type":"registered","profile_image":"https://i.stack.imgur.com/9dol6.jpg?s=128&g=1","display_name":"Aqua","link":"https://ru.stackoverflow.com/users/298412/aqua"},"is_accepted":false,"score":-1,"last_activity_date":1546689563,"creation_date":1546689563,"answer_id":928659,"question_id":927960,"body":"<p>Вот готовый вариант который можно использовать. Лично моё мнение, достаточно нормальной проверки строки на валидность, а после на наличие элемента по данному пути. </p>\n\n<p>Составил регулярное выражение</p>\n\n<p><strong><em>(если что не так, прошу великих гуру отписаться в комментарий)</em></strong>,</p>\n\n<p>подходит только для полного пути, <em>т.е. <code>D:\\\\MyFiles\\Pictures\\pict211.png</code></em>. </p>\n\n<p>Делаем проверку строки, соответствует ли она паттерну, и на наличие файла по заданному пути методом <code>Exist</code> из статического класса <code>File</code></p>\n\n<p>Вот примерный код:</p>\n\n<pre><code>if (new Regex(@\"[A-Z]:\\\\\\\\(\\w+\\\\)+\\w+((.png)|(.jpeg))\").IsMatch(IconPath.Text)\n      &amp;&amp; File.Exists(IconPath.Text))\n{\n    //делаем то что нам нужно.\n}\n</code></pre>\n\n<p>А вообще, вам бы проверки на наличие, было бы достаточно. Ведь если мы в качестве аргумента передадим <em>абракадабру</em>, то метод просто вернет <code>false</code>. </p>\n\n<h2>Удачи в изучении C#</h2>\n\n<p><strong>Aqua</strong></p>\n\n<hr>\n\n<h2>P.S.</h2>\n\n<p>Не сильно напрягался с расширением файла, если нужны другие форматы делайте вот так:</p>\n\n<pre><code>[A-Z]:\\\\\\\\(\\w+\\\\)+\\w+((.png)|(.jpeg)|(.format№3)|(.format№4)|...)\n</code></pre>\n\n<p><em>где вместо <code>format№n</code> пишем нужное нам расширение.</em> </p>\n"}