{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1563879224,"creation_date":1563879224,"answer_id":1005851,"question_id":1005799,"body":"<p>Как вариант, в Windows для определения, является ли файл корректным XLS-файлом, можно использовать Structured Storage API. Согласно спецификации, формат XLS - это файл формата Structured Storage, который содержит поток с именем Workbook.</p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/f67ac5ed-b0a7-4b2c-9b7a-28933eeaac7e\" rel=\"nofollow noreferrer\">MS-XLS: Excel Binary File Format Structure, пункт 2.1.2</a>:</p>\n\n<blockquote>\n  <p>A file of the type specified by this document consists of storages and streams as specified in [MS-CFB]... </p>\n  \n  <p>A workbook MUST contain the workbook stream...</p>\n</blockquote>\n\n<p>Можно использовать следующий код для проверки на XLS, на основе этого правила:</p>\n\n<pre><code>using System;\nusing System.Collections;\nusing System.Runtime.InteropServices;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        [DllImport(\"ole32.dll\")]\n        static extern int StgOpenStorageEx(\n            [MarshalAs(UnmanagedType.LPWStr)] string pwcsName,\n            uint grfMode,\n            uint stgfmt,\n            uint grfAttrs,\n            IntPtr pStgOptions,\n            IntPtr reserved2,\n            [In] ref Guid riid,\n            out IStorage ppObjectOpen);\n\n        const uint STGM_DIRECT = 0;\n        const uint STGM_READ = 0;        \n        const uint STGM_SHARE_EXCLUSIVE = 0x10;        \n        const uint STGFMT_STORAGE = 0;        \n        const uint PID_FIRST_USABLE = 2;\n        const uint STGC_DEFAULT = 0;               \n\n        [Guid(\"0000000B-0000-0000-C000-000000000046\")]\n        [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n        public interface IStorage\n        {\n            void a();\n\n            [PreserveSig]\n            int OpenStream(string pwcsName, \n                IntPtr reserved1, \n                uint grfMode, \n                uint reserved2, \n                [MarshalAs(UnmanagedType.Interface)] out object ppstm);\n\n            void CreateStorage(string pwcsName, uint grfMode,  uint reserved1, uint reserved2, out IStorage ppstg);            \n            void OpenStorage(string pwcsName, IStorage pstgPriority,  uint grfMode,  IntPtr snbExclude, uint reserved, out IStorage ppstg);            \n            void CopyTo( uint ciidExclude, Guid[] rgiidExclude,  IntPtr snbExclude, IStorage pstgDest);            \n            void MoveElementTo(string pwcsName, IStorage pstgDest, string pwcsNewName, uint grfFlags);            \n            void Commit( uint grfCommitFlags);            \n            void Revert();            \n            void b();            \n            void DestroyElement(string pwcsName);            \n            void RenameElement(string pwcsOldName, string pwcsNewName);            \n            void c();            \n            void SetClass( ref Guid clsid);            \n            void SetStateBits( uint grfStateBits,  uint grfMask);            \n            void d();\n        }\n\n        public static bool IsXLS(string path)\n        {            \n            IStorage pStorage = null;\n            object o = null;\n            int hr;            \n            Guid guidStorage = typeof(IStorage).GUID;            \n\n            try\n            {\n                //открываем файл\n                hr = StgOpenStorageEx(path, STGM_READ | STGM_SHARE_EXCLUSIVE, STGFMT_STORAGE,\n                    0, IntPtr.Zero, IntPtr.Zero, ref guidStorage, out pStorage);\n\n                if (hr != 0) return false; //NOT Structured storage file                 \n\n                //открываем поток\n                hr = pStorage.OpenStream(\"Workbook\", IntPtr.Zero, STGM_DIRECT | STGM_READ | STGM_SHARE_EXCLUSIVE, 0, out o);\n\n                return hr == 0;\n            }\n            finally\n            {\n                //освобождение ресурсов                \n                if (pStorage != null) Marshal.ReleaseComObject(pStorage);\n                if (o != null) Marshal.ReleaseComObject(o);\n            }\n        }       \n    }  \n}\n</code></pre>\n\n<p>Так как файл XLSX является ZIP-архивом определенной структуры, можно применить для проверки ту же логику, и воспользоваться любой библиотекой для работы с ZIP-архивами (в .NET 4.5+ есть встроенная <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.compression?view=netcore-2.1\" rel=\"nofollow noreferrer\">System.IO.Compression</a>).</p>\n"}