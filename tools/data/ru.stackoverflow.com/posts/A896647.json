{"owner":{"reputation":1450,"user_id":300864,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/613ec0e47eb7f12c28202d3ac9c925ab?s=128&d=identicon&r=PG&f=1","display_name":"greg zakharov","link":"https://ru.stackoverflow.com/users/300864/greg-zakharov"},"is_accepted":false,"score":2,"last_activity_date":1540281475,"last_edit_date":1540281475,"creation_date":1540275182,"answer_id":896647,"question_id":896643,"body":"<p>В случае использования атрибута <em>DllImport</em> и модификатора <em>extern</em> для вызываемой функции из внешнего модуля необходимость в указанных вами проверках нулевая, если же вы собираетесь вызывать методы посредством делегатов, то лучше реализовать в своем коде класс <em>SafeLibraryHandle</em> на подобие того, как это сделано в самой платформе <em>.NET Framework</em>. В результате проверить был ли загружен модуль или нет можно будет с помощью свойства <em>IsInvalid</em>. Чтобы было понятней:</p>\n\n<pre><code>using System;\nusing System.Security;\nusing Microsoft.Win32.SafeHandles;\nusing System.Runtime.InteropServices;\n\nnamespace SafeLibrary {\n  [SecurityCritical]\n  internal sealed class SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {\n    internal SafeLibraryHandle() : base(true) {}\n\n    [SecurityCritical]\n    override protected Boolean ReleaseHandle() {\n      return NativeMethods.FreeLibrary(handle);\n    }\n  }\n\n  internal static class NativeMethods {\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n    internal static extern SafeLibraryHandle LoadLibrary(String lpLibFileName);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    internal static extern Boolean FreeLibrary(IntPtr hLibModule);\n  }\n\n  internal sealed class Program {\n    static void Main() {\n      SafeLibraryHandle slh = NativeMethods.LoadLibrary(\"some.dll\");\n      if (slh.IsInvalid) {\n        Console.WriteLine(\"IsInvalid: {0} IsClosed: {1}\", slh.IsInvalid, slh.IsClosed);\n        // return;\n      }\n      slh.Dispose();\n      Console.WriteLine(\"IsInvalid: {0} IsClosed: {1}\", slh.IsInvalid, slh.IsClosed);\n    }\n  }\n}\n</code></pre>\n"}