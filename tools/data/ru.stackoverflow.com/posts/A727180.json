{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":7,"last_activity_date":1507224048,"creation_date":1507224048,"answer_id":727180,"question_id":691071,"body":"<p>Для этого можно использовать библиотеку со странным названием Restart Manager. Пример получения списка процессов, занявших файл  (<a href=\"https://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4\" rel=\"noreferrer\">https://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4</a>):</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\nnamespace RMTest\n{\n    public partial class Form1 : Form\n    {\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmStartSession(out UInt32 pSessionHandle, UInt32 dwSessionFlags,\n            string strSessionKey);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmRegisterResources(UInt32 dwSessionHandle,\n        UInt32 nFiles,string[] rgsFilenames,UInt32 nApplications,\n        UInt32 rgApplications,UInt32 nServices,UInt32 rgsServiceNames);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmGetList(UInt32 dwSessionHandle,  out UInt32 pnProcInfoNeeded,\n        ref UInt32 pnProcInfo,[In, Out] RM_PROCESS_INFO[] rgAffectedApps,ref UInt32 lpdwRebootReasons);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32  RmEndSession(UInt32 dwSessionHandle);\n\n        const UInt32 RmRebootReasonNone = 0x0;\n\n        /*Получение списка процессов, имеющих блокировку на файле*/\n        static public List&lt;Process&gt; GetLockProcesses(string path)\n        {\n            uint handle;\n            string key = Guid.NewGuid().ToString();\n            List&lt;Process&gt; processes = new List&lt;Process&gt;();\n            uint res = RmStartSession(out handle, (uint)0, key);\n            if (res != 0)\n            {\n                throw new Exception(\"Could not begin restart session. \" +\n                                    \"Unable to determine file locker.\");\n            }\n            try\n            {\n                const int ERROR_MORE_DATA = 234;\n                uint pnProcInfoNeeded = 0, pnProcInfo = 0,\n                    lpdwRebootReasons = RmRebootReasonNone;\n                string[] resources = new string[] { path };\n                res = RmRegisterResources(handle, (uint)resources.Length,\n                                            resources, 0, 0, 0, 0);\n                if (res != 0)\n                {\n                    throw new Exception(\"Could not register resource.\");\n                }\n\n                res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, null,\n                                ref lpdwRebootReasons);\n                if (res == ERROR_MORE_DATA)\n                {\n                    // Create an array to store the process results. \n                    RM_PROCESS_INFO[] processInfo =\n                        new RM_PROCESS_INFO[pnProcInfoNeeded];                    \n                    pnProcInfo = pnProcInfoNeeded;\n                    // Get the list. \n                    res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo,\n                        processInfo, ref lpdwRebootReasons);\n                    if (res == 0)\n                    {\n                        processes = new List&lt;Process&gt;((int)pnProcInfo);\n                        // Enumerate all of the results and add them to the  \n                        // list to be returned. \n                        for (int i = 0; i &lt; pnProcInfo; i++)\n                        {\n                            try\n                            {\n                                processes.Add(Process.GetProcessById(processInfo[i].\n                                    Process.dwProcessId));\n                            }\n                            // Catch the error in case the process is no longer running. \n                            catch (ArgumentException) { }\n                        }\n                    }\n                    else\n                    {\n                        throw new Exception(\"Could not list processes locking resource\");\n                    }\n                }\n                else if (res != 0)\n                {\n                    throw new Exception(\"Could not list processes locking resource.\" +\n                                        \"Failed to get size of result.\");\n                }\n            }            \n            finally\n            {\n                RmEndSession(handle);\n            }\n            return processes;\n        }\n\n        public Form1()\n        {\n            InitializeComponent();\n\n            string f = \"C:\\\\some_file.pdf\";\n\n            var p = GetLockProcesses(f);\n\n            textBox1.Text = \"\";\n            foreach (Process proc in p)\n            {\n                textBox1.Text += proc.ProcessName + Environment.NewLine;\n            }\n            ;\n\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RM_UNIQUE_PROCESS\n    {\n        // The product identifier (PID). \n        public int dwProcessId;\n        // The creation time of the process. \n        public System.Runtime.InteropServices.ComTypes.FILETIME ProcessStartTime;\n    }\n    /// &lt;summary&gt; \n    /// Describes an application that is to be registered with the Restart Manager. \n    /// &lt;/summary&gt; \n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct RM_PROCESS_INFO\n    {\n        const int CCH_RM_MAX_APP_NAME = 255;\n        const int CCH_RM_MAX_SVC_NAME = 63;\n\n        // Contains an RM_UNIQUE_PROCESS structure that uniquely identifies the \n        // application by its PID and the time the process began. \n        public RM_UNIQUE_PROCESS Process;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_APP_NAME + 1)]\n        // If the process is a service, this parameter returns the  \n        // long name for the service. \n        public string strAppName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_SVC_NAME + 1)]\n        // If the process is a service, this is the short name for the service. \n        public string strServiceShortName;\n        // Contains an RM_APP_TYPE enumeration value. \n        public RM_APP_TYPE ApplicationType;\n        // Contains a bit mask that describes the current status of the application. \n        public uint AppStatus;\n        // Contains the Terminal Services session ID of the process. \n        public uint TSSessionId;\n        // TRUE if the application can be restarted by the  \n        // Restart Manager; otherwise, FALSE. \n        [MarshalAs(UnmanagedType.Bool)]\n        public bool bRestartable;\n    }\n    /// &lt;summary&gt; \n    /// Specifies the type of application that is described by \n    /// the RM_PROCESS_INFO structure. \n    /// &lt;/summary&gt; \n    public enum RM_APP_TYPE\n    {\n        // The application cannot be classified as any other type. \n        RmUnknownApp = 0,\n        // A Windows application run as a stand-alone process that \n        // displays a top-level window. \n        RmMainWindow = 1,\n        // A Windows application that does not run as a stand-alone \n        // process and does not display a top-level window. \n        RmOtherWindow = 2,\n        // The application is a Windows service. \n        RmService = 3,\n        // The application is Windows Explorer. \n        RmExplorer = 4,\n        // The application is a stand-alone console application. \n        RmConsole = 5,\n        // A system restart is required to complete the installation because \n        // a process cannot be shut down. \n        RmCritical = 1000\n    } \n\n}\n</code></pre>\n\n<p>Работает на ОС начиная с Windows Vista.</p>\n"}