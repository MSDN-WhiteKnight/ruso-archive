{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":5,"last_activity_date":1534920361,"last_edit_date":1534920361,"creation_date":1534825625,"answer_id":871220,"question_id":870506,"body":"<p>Вместо того, чтобы парсить XML, лучше воспользоваться <a href=\"https://docs.microsoft.com/ru-ru/windows/desktop/TaskSchd/enumerating-tasks-and-displaying-task-information\" rel=\"nofollow noreferrer\">библиотекой COM-объектов планировщика задач</a>. Она должна быть в составе ОС по крайней мере начиная с Windows 7.</p>\n\n<pre><code>//Reference: COM -&gt; Task scheduler 1.1 type library\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing TaskScheduler;\n\n...       \n\nstatic void PrintFolder(ITaskFolder folder) //метод для рекурсивного обхода каталогов\n{\n    IRegisteredTaskCollection coll = null;\n    ITaskDefinition def = null;\n    ITaskFolderCollection folders = null;\n    IExecAction exec = null;\n\n    try\n    {\n        coll = folder.GetTasks(0); //найдем задачи в каталоге\n\n        foreach (IRegisteredTask item in coll)\n        {\n            if (def != null) { Marshal.ReleaseComObject(def); def = null; }\n            if (exec != null) { Marshal.ReleaseComObject(exec); exec = null; }\n\n            def = item.Definition;\n            bool autostart = false;\n\n            foreach (ITrigger trig in def.Triggers)\n            {\n                //нас интересуют только задачи, запускающиеся при включении или входе пользователя\n                if (trig.Type == _TASK_TRIGGER_TYPE2.TASK_TRIGGER_BOOT ||\n                    trig.Type == _TASK_TRIGGER_TYPE2.TASK_TRIGGER_LOGON)\n                {\n                    autostart = true; break;\n                }\n            }\n\n            if (autostart)\n            {\n                //выведем информацию о задаче\n                Console.Write( item.Name + \" \");\n                foreach (IAction act in def.Actions)\n                {\n                    if (act.Type != _TASK_ACTION_TYPE.TASK_ACTION_EXEC)\n                    {\n                        Console.Write( \"(\" + act.Type.ToString() + \")\");\n                    }\n                    else\n                    {\n                        exec = (IExecAction)act;\n                        //выведем командную строку, запускаемую задачей\n                        Console.Write( \"(\" + exec.Path + \" \" + exec.Arguments + \")\");\n                    }\n                }\n                Console.WriteLine();\n            }\n        }\n\n        //обходим подкаталоги текущего каталога\n        folders = folder.GetFolders(0);\n        foreach (ITaskFolder item in folders)\n        {\n            PrintFolder(item);\n        }\n    }\n    finally\n    {\n        if (coll != null) Marshal.ReleaseComObject(coll);\n        if (def != null) Marshal.ReleaseComObject(def);\n        if (folders != null) Marshal.ReleaseComObject(folders);\n        if (exec != null) Marshal.ReleaseComObject(exec);\n    }\n}\n\npublic static void PrintTasks() \n{\n    TaskScheduler.TaskScheduler ts = null;\n    ITaskService its = null;\n    ITaskFolder folder = null;\n\n    try\n    {\n        ts = new TaskScheduler.TaskScheduler();\n        its = (ITaskService)ts;\n\n        //подключаемся к локальной машине\n        its.Connect();\n\n        //получаем корневой каталог задач\n        folder = its.GetFolder(\"\\\\\");                \n\n        //рекурсивно выводим задачи\n        PrintFolder(folder);\n    }\n    finally\n    {\n        if (folder != null) Marshal.ReleaseComObject(folder);\n        if (its != null) Marshal.ReleaseComObject(its);\n        if (ts != null) Marshal.ReleaseComObject(ts);\n    }\n}\n</code></pre>\n"}