{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":2,"last_activity_date":1541582603,"creation_date":1541582603,"answer_id":903387,"question_id":862954,"body":"<p>У WASAPI-сессий имя часто пустое или бессмысленное. Для идентификации сессий конкретного приложения лучше использовать ID процесса:</p>\n\n<pre><code>private static ISimpleAudioVolume GetVolumeObject(int pid)\n{\n    // get the speakers (1st render + multimedia) device\n    IMMDeviceEnumerator deviceEnumerator = (IMMDeviceEnumerator)(new MMDeviceEnumerator());\n    IMMDevice speakers;\n    deviceEnumerator.GetDefaultAudioEndpoint(EDataFlow.eRender, ERole.eMultimedia, out speakers);\n\n    // activate the session manager. we need the enumerator\n    Guid IID_IAudioSessionManager2 = typeof(IAudioSessionManager2).GUID;\n    object o;\n    speakers.Activate(ref IID_IAudioSessionManager2, 0, IntPtr.Zero, out o);\n    IAudioSessionManager2 mgr = (IAudioSessionManager2)o;\n\n    // enumerate sessions for on this device\n    IAudioSessionEnumerator sessionEnumerator;\n    mgr.GetSessionEnumerator(out sessionEnumerator);\n    int count;\n    sessionEnumerator.GetCount(out count);\n\n    uint val;\n\n    ISimpleAudioVolume volumeControl = null;\n    for (int i = 0; i &lt; count; i++)\n    {\n        IAudioSessionControl ctl;\n        sessionEnumerator.GetSession(i, out ctl);\n\n        IAudioSessionControl2 ctl2 = (IAudioSessionControl2)ctl;\n        ctl2.GetProcessId(out val);\n\n        if (val == pid)\n        {\n            volumeControl = ctl as ISimpleAudioVolume;\n            break;\n        }\n        Marshal.ReleaseComObject(ctl);\n        Marshal.ReleaseComObject(ctl2);\n    }\n    Marshal.ReleaseComObject(sessionEnumerator);\n    Marshal.ReleaseComObject(mgr);\n    Marshal.ReleaseComObject(speakers);\n    Marshal.ReleaseComObject(deviceEnumerator);\n    return volumeControl;\n}\n</code></pre>\n\n<p>Интерфейс IAudioSessionControl2:</p>\n\n<pre><code>[Guid(\"bfb7ff88-7239-4fc9-8fa2-07c950be9c6d\"),\nInterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\ninterface IAudioSessionControl2\n{\n    [PreserveSig]\n    int GetState(out object state);\n    [PreserveSig]\n    int GetDisplayName(out IntPtr name);\n    [PreserveSig]\n    int SetDisplayName(string value, Guid EventContext);\n    [PreserveSig]\n    int GetIconPath(out IntPtr Path);\n    [PreserveSig]\n    int SetIconPath(string Value, Guid EventContext);\n    [PreserveSig]\n    int GetGroupingParam(out Guid GroupingParam);\n    [PreserveSig]\n    int SetGroupingParam(Guid Override, Guid Eventcontext);\n    [PreserveSig]\n    int RegisterAudioSessionNotification(object NewNotifications);\n    [PreserveSig]\n    int UnregisterAudioSessionNotification(object NewNotifications);\n\n    [PreserveSig]\n    int GetSessionIdentifier(out IntPtr retVal);\n    [PreserveSig]\n    int GetSessionInstanceIdentifier(out IntPtr retVal);\n    [PreserveSig]\n    int GetProcessId(out UInt32 retvVal);\n    [PreserveSig]\n    int IsSystemSoundsSession();\n    [PreserveSig]\n    int SetDuckingPreference(bool optOut);\n}\n</code></pre>\n"}