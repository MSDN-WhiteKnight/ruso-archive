{"tags":["c#","generics"],"owner":{"reputation":4498,"user_id":248572,"user_type":"registered","accept_rate":85,"profile_image":"https://i.stack.imgur.com/52azV.png?s=128&g=1","display_name":"Kir_Antipov","link":"https://ru.stackoverflow.com/users/248572/kir-antipov"},"is_answered":true,"view_count":285,"accepted_answer_id":899929,"answer_count":3,"score":15,"last_activity_date":1541161311,"creation_date":1540907254,"question_id":899928,"link":"https://ru.stackoverflow.com/questions/899928/%d0%9a%d0%b0%d0%ba-%d0%bd%d0%b0%d0%bf%d0%b8%d1%81%d0%b0%d1%82%d1%8c-%d0%bc%d0%b5%d1%82%d0%be%d0%b4-%d0%ba%d0%bb%d0%b0%d1%81%d1%81-%d0%ba%d0%be%d1%82%d0%be%d1%80%d1%8b%d0%b9-%d0%b1%d1%8b-%d0%be%d0%b4%d0%b8%d0%bd%d0%b0%d0%ba%d0%be%d0%b2%d0%be-%d1%80%d0%b0%d0%b1%d0%be%d1%82%d0%b0%d0%bb-%d1%81%d0%be-%d0%b2%d1%81%d0%b5%d0%bc%d0%b8-%d1%87%d0%b8%d1%81%d0%bb%d0%be%d0%b2%d1%8b%d0%bc%d0%b8-%d1%82%d0%b8%d0%bf%d0%b0%d0%bc%d0%b8","title":"Как написать метод/класс, который бы одинаково работал со всеми числовыми типами?","body":"<p>Предположим, я хочу описать <code>generic</code>-класс, выполняющий роль калькулятора, таким образом, чтобы он одинаково работал для всех числовых типов. Т.е.:</p>\n\n<ul>\n<li>sbyte </li>\n<li>byte </li>\n<li>short </li>\n<li>ushort </li>\n<li>int </li>\n<li>uint</li>\n<li>long </li>\n<li>ulong </li>\n<li>float </li>\n<li>double </li>\n</ul>\n\n<p>Сложность задачи заключается в том, что пусть все эти типы и объединяет наличие определения для их экземпляров арифметических операций, однако они не наследуют какого-либо общего интерфейса типа <code>IArithmetical</code>, <code>INumber</code>. А также <a href=\"https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/where-generic-type-constraint\" rel=\"noreferrer\">ограничение where</a> в <code>C#</code> не позволяет нам описать нечто вроде:</p>\n\n<pre><code>public static void Add&lt;T&gt;(T A, T B) where T : +, -, *, /, % ...\n</code></pre>\n\n<p>Так что компилятор не может быть уверен в том, что для всех возможных типов, эксплуатирующих метод, определены нужные операции</p>\n\n<p>Это приводит к тому, что подобный код:</p>\n\n<pre><code>public class Calculator&lt;T&gt;\n{\n    public T Add(T A, T B) =&gt; A + B;\n    public T Sub(T A, T B) =&gt; A - B;\n    public T Mul(T A, T B) =&gt; A * B;\n    public T Div(T A, T B) =&gt; A / B;\n    public T Mod(T A, T B) =&gt; A % B;\n}\n</code></pre>\n\n<p>Увы, но просто невозможно скомпилировать: по описанным выше причинам будет выкинута <a href=\"https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/compiler-messages/cs0019\" rel=\"noreferrer\">ошибка CS0019</a></p>\n\n<hr>\n\n<p>Так что же делать в данной ситуации? Возможно-ли вообще средствами <code>C#</code> описать <code>generic</code>-класс/метод, который бы мог работать с числами и только с ними?</p>\n"}