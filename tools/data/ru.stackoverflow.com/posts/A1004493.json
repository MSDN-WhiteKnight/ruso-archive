{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":5,"last_activity_date":1563513862,"last_edit_date":1563513862,"creation_date":1563513207,"answer_id":1004493,"question_id":1004175,"body":"<p>Естественно, это неверно. В С++ 4 битовых поля по 12 бит, расположенных вплотную без пропусков ( <code>__attribute__((packed))</code>). В вашем объявлении для С# 4 обыкновенных поля ushort, накладывающихся друг на друга. Как сделать правильно? В C# нет битовых полей, но есть класс BitConverter и битовые операции, которые позволяют реализовать их. </p>\n\n<p>Битовые маски для установки полей Sync1 и Sync2 выглядят так:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Байт №: |       5|       4|       3|       2|       1|       0| \n                                             00001111 11111111   = 0x0FFF\n                                                   Sync1\n\nБайт №: |       5|       4|       3|       2|       1|       0|\n                                    11111111 11110000 00000000   = 0xFFF000\n                                          Sync2\n</code></pre>\n\n<p>Это приводит нас к такому коду:</p>\n\n<pre><code>[StructLayout(LayoutKind.Sequential)]\npublic struct BURInSyncStruct\n{\n    public static BURInSyncStruct Create()\n    {\n        BURInSyncStruct s = new BURInSyncStruct();\n        s.data = new byte[6];\n        return s;\n    }\n\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6)]\n    public byte[] data;                       \n\n    public ushort Sync1\n    {\n        get\n        {                    \n            byte[] bytes64 = new byte[8];\n            Array.Copy(data, bytes64, data.Length);\n            ulong x = BitConverter.ToUInt64(bytes64, 0);\n\n            ulong y = x &amp; 0x0FFF;                    \n            return (ushort)y;\n        }\n\n        set\n        {\n            byte[] bytes64 = new byte[8];\n            Array.Copy(data, bytes64, data.Length);\n            ulong x = BitConverter.ToUInt64(bytes64, 0);\n            x = x &amp; ~((ulong)0x0FFF);\n\n            ulong y = (ulong)value &amp; 0x0FFF;\n            ulong res = x | y;\n            bytes64 = BitConverter.GetBytes(res);\n            Array.Copy(bytes64, data, data.Length);\n        }\n    }\n\n    public ushort Sync2\n    {\n        get\n        {\n            byte[] bytes64 = new byte[8];\n            Array.Copy(data, bytes64, data.Length);\n            ulong x = BitConverter.ToUInt64(bytes64, 0);\n            ulong y = x &amp; 0xFFF000;\n            y = y &gt;&gt; 12;                       \n            return (ushort)y;\n        }\n\n        set\n        {\n            byte[] bytes64 = new byte[8];\n            Array.Copy(data, bytes64, data.Length);\n            ulong x = BitConverter.ToUInt64(bytes64, 0);\n            x = x &amp; ~((ulong)0xFFF000);\n\n            ulong y = (ulong)(value &lt;&lt; 12) &amp; 0xFFF000;                    \n            ulong res = x | y;\n            bytes64 = BitConverter.GetBytes(res);\n            Array.Copy(bytes64, data, data.Length);\n        }\n    }\n\n\n}\n</code></pre>\n"}