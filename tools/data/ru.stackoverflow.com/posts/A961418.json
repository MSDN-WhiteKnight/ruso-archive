{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":0,"last_activity_date":1553581896,"creation_date":1553581896,"answer_id":961418,"question_id":960619,"body":"<p>Проблема в том, что при таком способе создания BitmapImage исходный файл открывается монопольно и остается открытым так неопределенное время (видимо, пока его не съест сборщик мусора), так как метода закрытия источника у этого класса нет. Вам нужно вместо этого реализовать загрузку изображения в промежуточный буфер в памяти, тогда вы сможете перемещать его как угодно. Например, это можно реализовать так:</p>\n\n<pre><code>&lt;Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"        \n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"400\" Width=\"600\"&gt;\n\n    &lt;Grid HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\" &gt;\n        &lt;TextBox HorizontalAlignment=\"Stretch\" Height=\"60\" Margin=\"20,20,170,20\"\n                 x:Name=\"tbFilename\"\n                 TextWrapping=\"Wrap\" Text=\"{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}\" \n                 VerticalAlignment=\"Top\" /&gt;\n        &lt;Button Content=\"Save\" HorizontalAlignment=\"Right\" Height=\"60\" Margin=\"20,20,20,20\" \n                VerticalAlignment=\"Top\" Width=\"120\" Click=\"Save_Click\"\n                IsEnabled=\"{Binding Path=HasChanges}\"/&gt;\n        &lt;Image HorizontalAlignment=\"Stretch\" Height=\"226\" Margin=\"20,100,20,20\" \n               VerticalAlignment=\"Stretch\" \n               Source=\"{Binding Path=Image}\"/&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre>\n\n<hr>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Reflection;\nusing System.ComponentModel;\n\nnamespace WpfApp1\n{\n    public partial class MainWindow : Window\n    {\n        ImageFile imagefile;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            var directory = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n            directory = System.IO.Path.Combine(directory, \"images\");            \n            imagefile = new ImageFile(directory, \"test\");\n            this.DataContext = imagefile;\n        }     \n\n        private void Save_Click(object sender, RoutedEventArgs e)\n        {\n            imagefile.Save();\n        }        \n    }\n\n    public class ImageFile: INotifyPropertyChanged\n    {\n        string dir;\n        string source_name;\n        BitmapImage img;\n        string new_name;\n\n        static BitmapImage LoadImage(string path)\n        {\n            byte[] data = System.IO.File.ReadAllBytes(path);\n            var ms = new System.IO.MemoryStream(data);\n            BitmapImage im = new BitmapImage();\n            im.BeginInit();\n            im.StreamSource = ms;\n            im.EndInit();\n            return im;\n        }\n\n        public ImageFile(string d,string name)\n        {\n            dir = d;\n            source_name = name;\n            var source_path = System.IO.Path.Combine(dir, source_name+\".png\");\n            img = LoadImage(source_path);\n            new_name = name;\n        }\n\n        public string Name\n        {\n            get { return new_name; }\n            set\n            {\n                new_name = value;\n                OnPropertyChanged(\"Name\");\n                OnPropertyChanged(\"HasChanges\");\n            }\n        }\n\n        public ImageSource Image\n        {\n            get { return img; }\n        }\n\n        public bool HasChanges\n        {\n            get { return new_name != source_name; }\n        }\n\n        public void Save()\n        {\n            if (new_name != source_name)\n            {                \n                var source_path = System.IO.Path.Combine(dir, source_name + \".png\");\n                var dest_path = System.IO.Path.Combine(dir, new_name + \".png\");\n\n                System.IO.File.Move(source_path, dest_path);\n                source_name = new_name;                \n                OnPropertyChanged(\"HasChanges\");\n\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        void OnPropertyChanged(string name)\n        {\n            var handler = PropertyChanged;\n            if (handler != null) handler(this, new PropertyChangedEventArgs(name));\n        }\n    }\n}\n</code></pre>\n"}