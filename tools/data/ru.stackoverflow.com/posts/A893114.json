{"owner":{"reputation":16117,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":5,"last_activity_date":1539541113,"creation_date":1539541113,"answer_id":893114,"question_id":889498,"body":"<p>В Windows Forms нет никаких средств для работы с 3D-графикой. Самый простой способ сделать это - создать 3D-сцену средствами WPF и подключить ее к Windows Forms с помощью элемента <a href=\"https://docs.microsoft.com/ru-ru/dotnet/api/system.windows.forms.integration.elementhost?view=netframework-4.7.2\" rel=\"noreferrer\">ElementHost</a>. В WPF трехмерная модель задается как элемент XAML MeshGeometry3D, состоящий из набора треугольников. По конвертации моделей из 3D Max в XAML см. здесь: <a href=\"http://blogs.microsoft.co.il/maxim/2009/03/31/daily-tip-how-to-import-3d-model-to-wpf-from-3d-max/\" rel=\"noreferrer\">XAML exporter for 3D Studio Max</a>.</p>\n\n<p>Пример модели Земли и текстуры земной поверхности можно взять, например, <a href=\"https://blogs.msdn.microsoft.com/llobo/2006/06/05/rotating-3d-earth-in-wpf/\" rel=\"noreferrer\">здесь</a>.</p>\n\n<hr>\n\n<p>Для примера, создадим проект WinForms и добавим в него ссылки на сборки WPF (PresentationCore, PresentationFramework, System.Xaml, WindowsBase). </p>\n\n<p>Добавим в проект файл <strong>Scene.xaml</strong>, описывающий трехмерную сцену: расположение объектов и камеры, освещение, параметры вращения и т.п. </p>\n\n<pre><code>&lt;Grid xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" Background=\"black\"&gt;\n\n   &lt;Grid.Triggers&gt;\n        &lt;EventTrigger RoutedEvent=\"Canvas.Loaded\"&gt;\n            &lt;BeginStoryboard&gt;\n                &lt;Storyboard&gt;\n                    &lt;DoubleAnimation From=\"360\" To=\"0\" Duration=\"0:0:15\" AutoReverse=\"False\" RepeatBehavior=\"Forever\" Storyboard.TargetName=\"rotation\" Storyboard.TargetProperty=\"Angle\" /&gt;\n                &lt;/Storyboard&gt;\n            &lt;/BeginStoryboard&gt;\n        &lt;/EventTrigger&gt;\n    &lt;/Grid.Triggers&gt;\n\n    &lt;Viewport3D x:Name=\"scene3d\"&gt;\n            &lt;Viewport3D.Camera&gt;\n                &lt;PerspectiveCamera FarPlaneDistance=\"20\" FieldOfView=\"65\" \n                                   LookDirection=\"0,0,-1\" NearPlaneDistance=\"1\" \n                                   Position=\"0,0,4\" UpDirection=\"0,1,0\" /&gt;\n            &lt;/Viewport3D.Camera&gt;\n            &lt;ModelVisual3D&gt;\n                &lt;ModelVisual3D.Content&gt;\n                    &lt;Model3DGroup x:Name=\"modelgroup\"&gt;\n                        &lt;AmbientLight Color=\"#ffffffff\" /&gt;\n                        &lt;GeometryModel3D x:Name=\"earthmodel\" &gt;                            \n                            &lt;GeometryModel3D.Transform&gt;\n                                &lt;Transform3DGroup&gt;                                    \n                                    &lt;RotateTransform3D&gt;\n                                        &lt;RotateTransform3D.Rotation&gt;\n                                            &lt;AxisAngleRotation3D Axis=\"0,1,0\" Angle=\"200\" x:Name=\"rotation\" /&gt;\n                                        &lt;/RotateTransform3D.Rotation&gt;\n                                    &lt;/RotateTransform3D&gt;\n                                &lt;/Transform3DGroup&gt;\n                            &lt;/GeometryModel3D.Transform&gt;\n                        &lt;/GeometryModel3D&gt;\n                    &lt;/Model3DGroup&gt;\n                &lt;/ModelVisual3D.Content&gt;\n            &lt;/ModelVisual3D&gt;\n    &lt;/Viewport3D&gt;\n&lt;/Grid&gt;\n</code></pre>\n\n<p>Добавим файлы <strong>earth.xaml</strong> и <strong>earth.jpg</strong>, содержащие модель и текстуру Земли (XAML не включен в текст ответа из-за размера, см. ссылку на проект ниже).</p>\n\n<p>Добавим модель самолета <strong>plane.xaml</strong>. У меня для примера просто треугольник.</p>\n\n<pre><code>&lt;MeshGeometry3D xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\nxmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \nNormals=\"0,0,1 0,0,1 0,0,1\" \nPositions=\"0.1,0,0 0,-0.04,0 0,0.04,0 \" \nTriangleIndices=\"0 1 2\" /&gt;\n</code></pre>\n\n<p>Для простоты предположим, что путь самолета является параллелью заданной географической широты. Чтобы не заботится о горизонтальной координате самолета (и о том, попадает ли он в кадр или нет), сделаем его неподвижным и вместо этого будем вращать Землю в противоположном направлении, так что видимый результат будет тем же самым. Наша модель Земли располагается в точке (0;0;0), имеет радиус 1 и ее ось совпадает с осью Y. Ось Z направлена в сторону наблюдателя. Тогда формулы для расчета положения самолета в координатах сцены будут определяться следующими формулами:</p>\n\n<blockquote>\n  <p>x = 0</p>\n  \n  <p>y = sin(A)</p>\n  \n  <p>z = cos(A)</p>\n</blockquote>\n\n<p>где А - угол, соответствующий географической широте, переведенный в радианы. Например, 0.5*Pi для северного полюса, 0 для экватора, -0.5*Pi для южного полюса.</p>\n\n<p>Добавим код для инициализации 3D-сцены и добавления в нее самолета на заданной широте:</p>\n\n<pre><code>using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Markup;\nusing System.Windows.Controls;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Media;\nusing System.Windows.Media.Media3D;\nusing System.Diagnostics;\n//Ссылки: PresentationCore, PresentationFramework, System.Xaml, WindowsBase\n\nnamespace WinForms3D\n{\n    public static class Earth3D\n    {\n        //Загружает элемент из XAML-файла по указанному пути\n        public static object LoadXaml(string path)\n        {\n            StreamReader sr = new StreamReader(path);\n            using (sr)\n            {\n                object el = XamlReader.Load(sr.BaseStream);\n                return el;\n            }\n        }\n\n        //Создает трехмерную сцену\n        public static FrameworkElement BuildModel(double shirota)\n        {\n            //Загружаем определение сцены\n            FrameworkElement scene = LoadXaml(\"Scene.xaml\") as FrameworkElement;                        \n            GeometryModel3D earthmodel = (GeometryModel3D)scene.FindName(\"earthmodel\");\n            Model3DGroup modelgroup = (Model3DGroup)scene.FindName(\"modelgroup\");\n\n            //Загружаем модель Земли\n            Geometry3D earth = LoadXaml(\"earth.xaml\") as Geometry3D;\n            earthmodel.Geometry = earth;\n\n            //Задаем текстуру для модели Земли\n            BitmapImage img = new BitmapImage(new Uri(\"earth.jpg\", UriKind.Relative));\n            DiffuseMaterial mat = new DiffuseMaterial(new ImageBrush(img));\n            earthmodel.Material = mat;\n\n            //Загружаем модель самолета\n            Geometry3D g = LoadXaml(\"plane.xaml\") as Geometry3D;\n            GeometryModel3D model = new GeometryModel3D();\n            model.Geometry = g;\n            model.Material = new DiffuseMaterial(new SolidColorBrush(Colors.Red));\n            model.BackMaterial = new DiffuseMaterial(new SolidColorBrush(Colors.Red));\n\n            //Задаем позицию самолета на модели\n            double alpha = (Math.PI / 180.0) * shirota; //перевод из градусов в радианы\n            model.Transform = new TranslateTransform3D(0, Math.Sin(alpha), Math.Cos(alpha) + 0.1);            \n\n            modelgroup.Children.Add(model);\n            return scene;\n        }\n    }\n}\n</code></pre>\n\n<p>В форму добавим ElementHost из раздела \"Взаимодействие с WPF\". Его свойству Child присвоим нашу трехмерную сцену:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace WinForms3D\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n            elementHost1.Child = Earth3D.BuildModel(30.0);\n        }\n    }\n}\n</code></pre>\n\n<p>Так выглядит самолет на параллели в 30 градусов северной широты:</p>\n\n<p><a href=\"https://i.stack.imgur.com/1d45J.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/1d45J.png\" alt=\"3D Earth\"></a></p>\n\n<p>Полный архив с проектом (VS 2012): <a href=\"https://yadi.sk/d/zxu06TjTMx8bdQ\" rel=\"noreferrer\">https://yadi.sk/d/zxu06TjTMx8bdQ</a></p>\n\n<p><strong>Источники</strong></p>\n\n<p><a href=\"https://docs.microsoft.com/ru-ru/dotnet/framework/wpf/graphics-multimedia/how-to-create-a-3-d-scene\" rel=\"noreferrer\">WPF - Создание трехмерной сцены</a></p>\n\n<p><a href=\"https://docs.microsoft.com/ru-ru/dotnet/framework/wpf/advanced/walkthrough-hosting-a-wpf-composite-control-in-windows-forms\" rel=\"noreferrer\">WPF - Размещение составного элемента управления WPF в форме Windows Forms</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/4077318/loading-xaml-xml-through-runtime\">Loading XAML XML through runtime?\n</a></p>\n\n<p><a href=\"https://blogs.msdn.microsoft.com/llobo/2006/06/05/rotating-3d-earth-in-wpf/\" rel=\"noreferrer\">Rotating 3D earth in WPF</a></p>\n"}