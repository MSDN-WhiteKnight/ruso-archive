{"owner":{"reputation":17975,"user_id":184217,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/87aed06c947625b429242fbcdf11f5e0?s=128&d=identicon&r=PG&f=1","display_name":"Alexander Petrov","link":"https://ru.stackoverflow.com/users/184217/alexander-petrov"},"is_accepted":false,"score":2,"last_activity_date":1555773680,"creation_date":1555773680,"answer_id":971989,"question_id":969675,"body":"<p>Давайте я попробую немножко объяснить по-своему.</p>\n\n<p>Зайду с другого конца: зачем на практике могут понадобиться интерфейсы?</p>\n\n<p>Допустим, вам понадобилось выводить на консоль содержимое списка <code>List&lt;int&gt;</code> и вы написали такой метод для этого:</p>\n\n<pre><code>static void Print(List&lt;int&gt; list)\n{\n    foreach (var n in list)\n        Console.Write(n + \" \");\n    Console.WriteLine();\n}\n</code></pre>\n\n<p>Теперь можно его использовать:</p>\n\n<pre><code>List&lt;int&gt; list = new List&lt;int&gt; { 1, 2, 3 };\nPrint(list);\n</code></pre>\n\n<p>Удобно.</p>\n\n<p>Но что, если нам понадобилось вывести массив? Пробуем использовать этот же метод:</p>\n\n<pre><code>int[] array = new int[] { 4, 5, 6 };\nPrint(array);\n</code></pre>\n\n<p>Увы, это невозможно.</p>\n\n<p>Как быть? Давайте разберёмся, что именно делается со списком в этом методе: он <em>перечисляется</em> (enumerate). В него ничего не добавляется, не изменяется, не удаляется. Всё, что от него требуется - позволить себя перечислять (проходить по нему).</p>\n\n<p>Интерфейс <code>IEnumerable</code> как раз и означает, что тип, реализующий его, является <em>перечислым</em> - по нему можно пробежаться в цикле.</p>\n\n<p>Изменим наш метод следующим образом:</p>\n\n<pre><code>static void Print(IEnumerable&lt;int&gt; list)\n{\n    foreach (var n in list)\n        Console.Write(n + \" \");\n    Console.WriteLine();\n}\n</code></pre>\n\n<p>Теперь код <code>Print(array);</code> успешно компилируется и работает.</p>\n\n<p>Теперь мы можем передавать в этот метод любой тип, реализующий интерфейс <code>IEnumerable&lt;int&gt;</code>. Конечно, здесь мы ограничены типом <code>int</code>, но оставим это за рамками обсуждения.</p>\n\n<p>Более того, другой программист, использующий нашу библиотеку с этим методом, по одной лишь сигнатуре этого метода скажет, что может произойти с коллекцией, которую он подаст на вход: она будет перечислена и только. А если метод принимает <code>List&lt;int&gt;</code>, то внутри метода вполне может произойти добавление новых данных в список или их удаление, или другие нежелательные действия...</p>\n\n<p>Таким образом, интерфейсы позволяют использовать не один жёстко заданный тип, а множество разных. А также интерфейсы дают понять, какие действия разрешены.</p>\n\n<p>PS: ещё больше гарантий по неизменности данных дают интерфейсы <code>IReadOnly*</code>.</p>\n"}