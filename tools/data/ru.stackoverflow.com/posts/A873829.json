{"owner":{"reputation":16117,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":1,"last_activity_date":1535355148,"creation_date":1535355148,"answer_id":873829,"question_id":865894,"body":"<p>Можно сделать это с помощью <a href=\"https://docs.microsoft.com/en-us/windows/desktop/dwm/thumbnail-ovw\" rel=\"nofollow noreferrer\">DWM Thumbnail API</a>. Следующий пример демонстрирует показ увеличенного изображения части окна на элементе управления в WPF и перемещение области при нажатии кнопок.  </p>\n\n<p>XAML:</p>\n\n\n\n<pre><code>&lt;Window x:Class=\"WpfApplication1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"MainWindow\" Width=\"500\" Height=\"300\" Loaded=\"Window_Loaded_1\" SizeChanged=\"Window_SizeChanged_1\"\n        &gt;    \n\n    &lt;Grid&gt;\n        &lt;Button Content=\"&gt;\" HorizontalAlignment=\"Left\" Height=\"30\" Margin=\"60,20,0,0\" VerticalAlignment=\"Top\" Width=\"30\" \n                Click=\"Button_Click_Right\"/&gt;\n        &lt;Button Content=\"&amp;lt;\" HorizontalAlignment=\"Left\" Height=\"30\" VerticalAlignment=\"Top\" Width=\"30\" \n                Click=\"Button_Click_Left\" Margin=\"20,20,0,0\"/&gt;\n        &lt;Grid x:Name=\"mygrid\" HorizontalAlignment=\"Stretch\"  Margin=\"20,63,20,20\" VerticalAlignment=\"Stretch\" \n              Background=\"{DynamicResource {x:Static SystemColors.AppWorkspaceBrushKey}}\"/&gt;\n\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Data;\nusing System.Windows.Interop;\nusing System.Runtime.InteropServices;\n\nnamespace WpfApplication1\n{\n    public partial class MainWindow : Window\n    {\n        IntPtr source = IntPtr.Zero; //дескриптор окна, предспросмотр которого будет отображаться\n        IntPtr thumb = IntPtr.Zero; //дескриптор объекта DWM Thumbnail\n        Point position = new Point(0, 0); //начальное положение области предпросмотра\n        double zoom = 2.0; //фактор увеличения\n\n        void UpdateView() //перерисовка окна\n        {\n            //освободим предыдущий Thumbnail\n            if (thumb != IntPtr.Zero) { DwmUnregisterThumbnail(thumb); thumb = IntPtr.Zero; }\n\n            //создадим новый Thumbnail\n            thumb = CreatePreview(mygrid, source, position, zoom);\n        }\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            //получим дескриптор окна, которое нужно отобразить\n            var pr = System.Diagnostics.Process.GetProcessesByName(\"Taskmgr\")[0];\n            source = pr.MainWindowHandle;            \n        }\n\n        private void Window_Loaded_1(object sender, RoutedEventArgs e)\n        {\n            UpdateView();\n        }\n\n        private void Window_SizeChanged_1(object sender, SizeChangedEventArgs e)\n        {\n            UpdateView();\n        }       \n\n        private void Button_Click_Right(object sender, RoutedEventArgs e)\n        {\n            position.X += 10;\n            UpdateView();  \n        }\n\n        private void Button_Click_Left(object sender, RoutedEventArgs e)\n        {\n            position.X -= 10;\n            UpdateView();\n        }\n\n        /// &lt;summary&gt;\n        /// Создает предпросмотр части окна source в указанном элементе с помощью DWM Thumbnail API\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"target\"&gt;Элемент, в котором нужно создать предпросмотр&lt;/param&gt;\n        /// &lt;param name=\"source\"&gt;Дескриптор окна, предпросмотр которого нужно создать&lt;/param&gt;\n        /// &lt;param name=\"pos\"&gt;Положение области в окне source, которую будет отображать предпросмотр&lt;/param&gt;\n        /// &lt;param name=\"zoom\"&gt;Фактор увеличения&lt;/param&gt;\n        /// &lt;returns&gt;Дескриптор объекта DWM Thumbnail&lt;/returns&gt;\n        public static IntPtr CreatePreview(FrameworkElement target, IntPtr source, Point pos, double zoom)\n        {\n\n            HwndSource hwndTarget = (HwndSource)HwndSource.FromVisual(target);\n\n            Point p0 = target.TranslatePoint(new Point(0, 0), Window.GetWindow(target));\n            Point p1 = target.TranslatePoint(new Point(target.ActualWidth, target.ActualHeight), Window.GetWindow(target));\n\n            RECT rcDest = new RECT\n            {\n                Left = (int)p0.X,\n                Top = (int)p0.Y,\n                Right = (int)p1.X,\n                Bottom = (int)p1.Y\n            };\n\n            RECT rcSource = new RECT\n            {\n                Left = (int)pos.X,\n                Top = (int)pos.Y,\n                Right = (int)(pos.X + target.ActualWidth / zoom),\n                Bottom = (int)(pos.Y + target.ActualHeight / zoom)\n            };\n\n\n            IntPtr thumb = IntPtr.Zero;\n            int res = DwmRegisterThumbnail(hwndTarget.Handle, source, out thumb);\n\n            if (res != 0)\n            {\n                throw new System.ComponentModel.Win32Exception(\"DwmRegisterThumbnail failed with code 0x\" + res.ToString(\"X\"));\n            }\n\n\n            DWM_THUMBNAIL_PROPERTIES dskThumbProps = new DWM_THUMBNAIL_PROPERTIES();\n            dskThumbProps.dwFlags =\n                DWM_TNP_SOURCECLIENTAREAONLY | DWM_TNP_VISIBLE | DWM_TNP_OPACITY | DWM_TNP_RECTDESTINATION | DWM_TNP_RECTSOURCE;\n            dskThumbProps.fSourceClientAreaOnly = 0;\n            dskThumbProps.fVisible = 1;\n            dskThumbProps.opacity = (255 * 70) / 100;\n            dskThumbProps.rcDestination = rcDest;\n            dskThumbProps.rcSource = rcSource;\n            res = DwmUpdateThumbnailProperties(thumb, ref dskThumbProps);\n\n            if (res != 0)\n            {\n                throw new System.ComponentModel.Win32Exception(\"DwmUpdateThumbnailProperties failed with code 0x\" + res.ToString(\"X\"));\n            }\n\n            return thumb;\n\n        }\n\n        /***  DWM Api Functions  ***/\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n\n        [DllImport(\"dwmapi.dll\", SetLastError = true)]\n        static extern int DwmRegisterThumbnail(IntPtr dest, IntPtr src, out IntPtr thumb);\n\n        [DllImport(\"dwmapi.dll\", PreserveSig = true)]\n        public static extern int DwmUpdateThumbnailProperties(IntPtr hThumbnail, ref DWM_THUMBNAIL_PROPERTIES props);\n\n        [DllImport(\"dwmapi.dll\")]\n        static extern int DwmUnregisterThumbnail(IntPtr thumb);\n\n        [StructLayout(LayoutKind.Sequential)]\n        public struct RECT\n        {\n            public int Left, Top, Right, Bottom;\n        }\n        [StructLayout(LayoutKind.Sequential)]\n        public struct DWM_THUMBNAIL_PROPERTIES\n        {\n            public uint dwFlags;\n            public RECT rcDestination;\n            public RECT rcSource;\n            public byte opacity;\n            public int fVisible;\n            public int fSourceClientAreaOnly;\n        }\n\n        const uint DWM_TNP_SOURCECLIENTAREAONLY = 0x00000010;\n        const uint DWM_TNP_VISIBLE = 0x00000008;\n        const uint DWM_TNP_RECTDESTINATION = 0x00000001;\n        const uint DWM_TNP_RECTSOURCE = 0x00000002;\n        const uint DWM_TNP_OPACITY = 0x00000004;      \n\n\n    }  \n\n}\n</code></pre>\n"}