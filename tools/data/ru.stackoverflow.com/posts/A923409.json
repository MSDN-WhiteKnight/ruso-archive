{"owner":{"reputation":6074,"user_id":17974,"user_type":"registered","accept_rate":83,"profile_image":"https://www.gravatar.com/avatar/e65c04f96eb45f1dec239d85c76d6afa?s=128&d=identicon&r=PG","display_name":"nick_n_a","link":"https://ru.stackoverflow.com/users/17974/nick-n-a"},"is_accepted":true,"score":7,"last_activity_date":1545324990,"last_edit_date":1545324990,"creation_date":1545316864,"answer_id":923409,"question_id":923326,"body":"<blockquote>\n  <p>возможно ли во время работы программы как-то узнавать где находится\n  переменная,</p>\n</blockquote>\n\n<p>С уровня софта  - нет. С уровня драйвера, или уровня ядра - можно. (через каталог страниц виртуальной памяти). Как конкретно - это очень специфическая область - нужно копать DDK (Driver Development Kit).</p>\n\n<p>UPD: Виртуальный адрес переменной (я бы назвал обычный), при смене физического адреса - не меняется. Физический адрес нужен для DMA (используется в драйверах HDD, USB, сетевой и звуковой карт). Если адрес существует в физической памяти - он всегда будет иметь физический адрес (но при запросе физического адреса он вероятне всего будет назначен).</p>\n\n<blockquote>\n  <p>хотя бы засечь момент когда она переносится в файл подкачки. </p>\n</blockquote>\n\n<p>С уровня драйвер - может быть. Возможно в ядре есть обработчик, скидывающий страницу на диск - найти и перехватить его займет какое-то время (от месяца до года), и требует хороших знаний в этой области. </p>\n\n<blockquote>\n  <p>А также у меня вопрос. Правильно ли я понимаю, что файл подкачки используется только когда не хватает места в оперативной памяти или если есть долго не использующиеся переменные?</p>\n</blockquote>\n\n<p>Алгоритм распределения памяти сложный и сложно-предсказуемый, но есть особенности, я постараюсь все перечислить. Ответ зависит как минимум от двух факторов. Если суммарная памяти всех программ меньше чем обьем оперативки - то да, память может находится в физической памяти. Если нет (сегодня такая ситуация что чаще нет) - то есть большая вероятность, что память может оказаться в файле подкачки. </p>\n\n<p>Так же, в случае когда оперативной памяти на всех не хватает и статистика использовании ноль - память уходит в файл подкачки.</p>\n\n<p>Если область памяти переменной не используется или она забита просто нолями - то такой кусок памяти может пока его не наполнят - вообще нигде не хранится, и не занимать место ни в <em>физической памяти</em> ни в <em>файле подкачки</em>.</p>\n\n<p>Так же вероятность нахождение в файле подкачке зависит от частоты обращений к <em>странице памяти</em> по сравнению с другими программами. Т.е. если вы переменную постоянно пишете/читаете - есть вероятность, что она может оказаться в физической памяти (если других претендетов с более высокой статистикой обращений туда нету).</p>\n\n<p>В некоторых ОС (98/ХР и многих других) можно было отключить файл подкачки - тогда - переменная всегда в оперативке. Боюсь что win10 отключение не переживёт:)</p>\n\n<p>У OS есть специальная метка в памяти - \"невыгружаемая память\" (например части ядра). Если эту метку получить - память выгружаться не будет, и всегда будет в оперативке. Как - уровень драйвера.</p>\n\n<p>UPD: Важная деталь. Любая память, к которой вот сейчас произошло обращение, и страница под неё отстутствует - то страница выделяется, физическая память добывается (если нет свободной, отбирается у другого процесса, а его скидывается на диск), с <em>файла подкачки</em> считывается, т.е. не видно что её не было. Если это не произошло - тогда это \"синий экран смерти\", но думаю такого не бывает, там хорошо прописан алгоритм что б этого не случилось. Страница стека, куда указывает esp (rsp) - может быть выгружена, если идет работа с другим процессом, но \"по первому требованию\" она будет загружена назад. </p>\n\n<p>Как итог, хочу сказать</p>\n\n<p>1) Волноваться за память - не стоит.</p>\n\n<p>2) стоит стараться оптимально использовать память (чем меньше используется тем лучше, но не в ущерб алгоритму)</p>\n\n<p>3) желательно знать сколько вашей программе нужно памяти, и взять сколько нужно, чем брать кусками - тогда OS проще предсказать сколько памяти вам нужно - и ПО будет работать быстрее. </p>\n\n<p>4) Нужно знать что есть размер <em>страницы памяти</em>, он равен 8192 либо 4096(раньше было) (можно узнать через АПИ). Желательно большие структуры выравнивать по границам этого к-ва байт - тогда программа будет работать быстрее.</p>\n\n<p>Ссылка на мой труд, где я обьяснял поведение с массивом <a href=\"https://ru.stackoverflow.com/questions/844846/%d0%af%d0%b7%d1%8b%d0%ba-c-%d0%b3%d0%bb%d0%be%d0%b1%d0%b0%d0%bb%d1%8c%d0%bd%d1%8b%d0%b5-%d0%bc%d0%b0%d1%81%d1%81%d0%b8%d0%b2%d1%8b/844891\">Язык C, глобальные массивы</a></p>\n"}