{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":6,"last_activity_date":1570266590,"creation_date":1570266590,"answer_id":1031357,"question_id":1030893,"body":"<p>Windows - не монолитный проект, собираемый одним определенным набором инструментов. Но большая часть кода Windows, написанная на С и С++, собирается с помощью Microsoft Visual C++. Это можно легко понять по так называемой <a href=\"https://www.ntcore.com/files/richsign.htm\" rel=\"noreferrer\">Rich-сигнатуре</a>, которую компоновщик Visual C++ добавляет во все выходные PE-файлы между DOS-заголовком и заголовком PE. Есть и другие признаки - например, импорт функций из msvcrt.dll (стандартной библиотеки C из Visual C++); хотя само ядро их не импортирует и имеет свою, статически скомпонованную версию CRT. </p>\n\n<p>Какова же версия Visual C++? Для определения (на примере ядра - ntoskrnl.exe) этого войдем в командную строку разработчика Visual Studio и выполним команду</p>\n\n<pre><code>dumpbin \"%systemroot%\\system32\\ntoskrnl.exe\" /headers\n</code></pre>\n\n<p>Результат:  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Microsoft (R) COFF/PE Dumper Version 11.00.50727.1\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file C:\\Windows\\system32\\ntoskrnl.exe\n\nPE signature found\n\nFile Type: EXECUTABLE IMAGE\n\nFILE HEADER VALUES\n            8664 machine (x64)\n              18 number of sections\n        5D673542 time date stamp Thu Aug 29 07:15:30 2019\n               0 file pointer to symbol table\n               0 number of symbols\n              F0 size of optional header\n              22 characteristics\n                   Executable\n                   Application can handle large (&gt;2GB) addresses\n\nOPTIONAL HEADER VALUES\n             20B magic # (PE32+)\n            9.00 linker version\n          4AE200 size of code\n          11F400 size of initialized data\n            3600 size of uninitialized data\n          2A2AE0 entry point (00000001402A2AE0)\n            1000 base of code\n       140000000 image base (0000000140000000 to 00000001405DCFFF)\n            1000 section alignment\n             200 file alignment\n            6.01 operating system version\n            6.01 image version\n            6.01 subsystem version\n               0 Win32 version\n          5DD000 size of image\n             600 size of headers\n          558155 checksum\n               1 subsystem (Native)\n               0 DLL characteristics\n           80000 size of stack reserve\n            2000 size of stack commit\n          100000 size of heap reserve\n            1000 size of heap commit\n               0 loader flags\n              10 number of directories\n          528000 [   10B09] RVA [size] of Export Directory\n          5A0B80 [      78] RVA [size] of Import Directory\n          5A2000 [   34570] RVA [size] of Resource Directory\n          274000 [   28368] RVA [size] of Exception Directory\n          549A00 [    21D0] RVA [size] of Certificates Directory\n          5D7000 [    2130] RVA [size] of Base Relocation Directory\n            1390 [      1C] RVA [size] of Debug Directory\n               0 [       0] RVA [size] of Architecture Directory\n               0 [       0] RVA [size] of Global Pointer Directory\n               0 [       0] RVA [size] of Thread Storage Directory\n               0 [       0] RVA [size] of Load Configuration Directory\n               0 [       0] RVA [size] of Bound Import Directory\n            1000 [     388] RVA [size] of Import Address Table Directory\n               0 [       0] RVA [size] of Delay Import Directory\n               0 [       0] RVA [size] of COM Descriptor Directory\n               0 [       0] RVA [size] of Reserved Directory\n</code></pre>\n\n<p>Нас интересует поле linker version - оно равно 9.00, что соответствует Visual Studio 2008 (см <a href=\"https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering\" rel=\"noreferrer\">таблицу версий Visual C++</a>).</p>\n\n<p>Можно более подробно определить версию вплоть до номера сборки, а также какое количество объектных файлов было скомпилировано каким компилятором, если воспользоваться программой для чтения вышеупомянутой недокументированной Rich-сигнатуры: <a href=\"https://github.com/dishather/richprint\" rel=\"noreferrer\">https://github.com/dishather/richprint</a></p>\n\n<p>Передавая ей ntoskrnl.exe, получаем:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>@comp.id   id version count   description\n00837809   83  30729   119 [ C ] VS2008 SP1 build 30729\n00937809   93  30729    13 [IMP] VS2008 SP1 build 30729\n00010000    1      0   150 [---] Unmarked objects\n00957809   95  30729    81 [ASM] VS2008 SP1 build 30729\n00897809   89  30729   848\n00847809   84  30729    27 [C++] VS2008 SP1 build 30729\n00927809   92  30729     1 [EXP] VS2008 SP1 build 30729\n00947809   94  30729     1\n00917809   91  30729     1 [LNK] VS2008 SP1 build 30729\n</code></pre>\n\n<p>Таким образом, ядро Windows 7 было собрано Visual C++ 9.0 build 30729 (Visual Studio 2008 SP1). Большая часть объектных файлов была скомпилирована компилятором С, меньше - MASM. (На машине, где производился анализ, Windows 7 SP1 Version 6.1.7601) </p>\n"}