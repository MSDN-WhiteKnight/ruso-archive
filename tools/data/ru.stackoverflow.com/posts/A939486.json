{"owner":{"reputation":16137,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":0,"last_activity_date":1549016804,"creation_date":1549016804,"answer_id":939486,"question_id":938498,"body":"<p>Для подключения к запущенному экземпляру Excel необходимо использовать вызов GetActiveObject вместо CoCreateInstance. Далее, для получения доступа к открытому документу нужно заменить вызов метода Add на вызов свойства Item с индексом 1. Получаем такой код:</p>\n\n<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;ole2.h&gt; // OLE2 Definitions\n\n// AutoWrap() - Automation helper function...\nHRESULT AutoWrap(int autoType, VARIANT *pvResult, IDispatch *pDisp, LPOLESTR ptName, int cArgs...) {\n    // Begin variable-argument list...\n    va_list marker;\n    va_start(marker, cArgs);\n\n    if (!pDisp) {\n        MessageBoxA(NULL, \"NULL IDispatch passed to AutoWrap()\", \"Error\", 0x10010);\n        _exit(0);\n    }\n\n    // Variables used...\n    DISPPARAMS dp = { NULL, NULL, 0, 0 };\n    DISPID dispidNamed = DISPID_PROPERTYPUT;\n    DISPID dispID;\n    HRESULT hr;\n    char buf[200];\n    char szName[200];\n\n\n    // Convert down to ANSI\n    WideCharToMultiByte(CP_ACP, 0, ptName, -1, szName, 256, NULL, NULL);\n\n    // Get DISPID for name passed...\n    hr = pDisp-&gt;GetIDsOfNames(IID_NULL, &amp;ptName, 1, LOCALE_USER_DEFAULT, &amp;dispID);\n    if (FAILED(hr)) {\n        printf(\"IDispatch::GetIDsOfNames(\\\"%s\\\") failed w/err 0x%08lx\", szName, hr);        \n        getchar();\n        _exit(0);\n        return hr;\n    }\n\n\n    // Allocate memory for arguments...\n    VARIANT *pArgs = new VARIANT[cArgs + 1];\n    // Extract arguments...\n    for (int i = 0; i &lt; cArgs; i++) {\n        pArgs[i] = va_arg(marker, VARIANT);\n    }\n\n    // Build DISPPARAMS\n    dp.cArgs = cArgs;\n    dp.rgvarg = pArgs;\n\n    // Handle special-case for property-puts!\n    if (autoType &amp; DISPATCH_PROPERTYPUT) {\n        dp.cNamedArgs = 1;\n        dp.rgdispidNamedArgs = &amp;dispidNamed;\n    }\n\n    // Make the call!\n    hr = pDisp-&gt;Invoke(dispID, IID_NULL, LOCALE_SYSTEM_DEFAULT, autoType, &amp;dp, pvResult, NULL, NULL);\n    if (FAILED(hr)) {\n        printf(\"IDispatch::Invoke(\\\"%s\\\"=%08lx) failed w/err 0x%08lx\", szName, dispID, hr);     \n        getchar();\n        _exit(0);\n        return hr;\n    }\n    // End variable-argument section...\n    va_end(marker);\n\n    delete[] pArgs;\n\n    return hr;\n}\n\nint  main(int argc, char **argv)\n{\n    // Initialize COM for this thread...\n    CoInitialize(NULL);\n\n    // Get CLSID for our server...\n    CLSID clsid;\n    HRESULT hr = CLSIDFromProgID(L\"Excel.Application\", &amp;clsid);\n\n    if (FAILED(hr)) {\n        ::MessageBoxA(NULL, \"CLSIDFromProgID() failed\", \"Error\", 0x10010);\n        return -1;\n    }\n\n    IUnknown* pUnk;\n    hr = GetActiveObject(clsid, NULL, &amp;pUnk);\n    if (FAILED(hr)) {\n        ::MessageBoxA(NULL, \"GetActiveObject failed!\", \"Error\", 0x10010);\n        return -2;\n    }\n\n    IDispatch *pXlApp;\n    hr = pUnk-&gt;QueryInterface(IID_IDispatch, (void**)&amp;pXlApp);\n\n    if (FAILED(hr)) {\n        ::MessageBoxA(NULL, \"QueryInterface failed!\", \"Error\", 0x10010);\n        return -2;\n    }\n\n    // Make it visible (i.e. app.visible = 1)\n    {\n\n        VARIANT x;\n        x.vt = VT_I4;\n        x.lVal = 1;\n        AutoWrap(DISPATCH_PROPERTYPUT, NULL, pXlApp, (LPOLESTR)L\"Visible\", 1, x);\n    }\n\n    // Get Workbooks collection\n    IDispatch *pXlBooks;\n    {\n        VARIANT result;\n        VariantInit(&amp;result);\n        AutoWrap(DISPATCH_PROPERTYGET, &amp;result, pXlApp, (LPOLESTR)L\"Workbooks\", 0);\n        pXlBooks = result.pdispVal;\n    }   \n\n    //Open workbook\n    IDispatch *pXlBook;\n    {\n        VARIANT result;\n        VariantInit(&amp;result);\n\n        VARIANT index;\n        VariantInit(&amp;index);\n        index.vt = VT_INT;\n        index.intVal = 1;       \n\n        AutoWrap(DISPATCH_PROPERTYGET, &amp;result, pXlBooks, (LPOLESTR)L\"Item\",1, index);\n        pXlBook = result.pdispVal;\n        VariantClear(&amp;index);\n    }   \n\n    // Create a 15x15 safearray of variants...\n    VARIANT arr;\n    arr.vt = VT_ARRAY | VT_VARIANT;\n    {\n        SAFEARRAYBOUND sab[2];\n        sab[0].lLbound = 1; sab[0].cElements = 15;\n        sab[1].lLbound = 1; sab[1].cElements = 15;\n        arr.parray = SafeArrayCreate(VT_VARIANT, 2, sab);\n    }\n\n    // Fill safearray with some values...\n    for (int i = 1; i &lt;= 15; i++) {\n        for (int j = 1; j &lt;= 15; j++) {\n            // Create entry value for (i,j)\n            VARIANT tmp;\n            tmp.vt = VT_I4;\n            tmp.lVal = i * j;\n            // Add to safearray...\n            long indices[] = { i,j };\n            SafeArrayPutElement(arr.parray, indices, (void *)&amp;tmp);\n        }\n    }\n\n    // Get ActiveSheet object\n    IDispatch *pXlSheet;\n    {\n        VARIANT result;\n        VariantInit(&amp;result);\n        AutoWrap(DISPATCH_PROPERTYGET, &amp;result, pXlApp, (LPOLESTR)L\"ActiveSheet\", 0);\n        pXlSheet = result.pdispVal;\n    }\n\n    // Get Range object for the Range A1:O15...\n    IDispatch *pXlRange;\n    {\n        VARIANT parm;\n        parm.vt = VT_BSTR;\n        parm.bstrVal = ::SysAllocString(L\"A1:O15\");\n\n        VARIANT result;\n        VariantInit(&amp;result);\n        AutoWrap(DISPATCH_PROPERTYGET, &amp;result, pXlSheet, (LPOLESTR)L\"Range\", 1, parm);\n        VariantClear(&amp;parm);\n\n        pXlRange = result.pdispVal;\n    }\n\n    // Set range with our safearray...\n    AutoWrap(DISPATCH_PROPERTYPUT, NULL, pXlRange, (LPOLESTR)L\"Value\", 1, arr);\n\n    // Save workbook\n    VARIANT var_result;\n    VariantInit(&amp;var_result);\n    AutoWrap(DISPATCH_METHOD, &amp;var_result, pXlBook, (LPOLESTR)L\"Save\", 0);\n    VariantClear(&amp;var_result);\n\n    // Release references...\n    pUnk-&gt;Release();\n    pXlRange-&gt;Release();\n    pXlSheet-&gt;Release();\n    pXlBook-&gt;Release();\n    pXlBooks-&gt;Release();\n    pXlApp-&gt;Release();\n    VariantClear(&amp;arr);\n\n    printf(\"All done! Press any key to exit\\n\");\n    getchar();\n\n    // Uninitialize COM for this thread...\n    CoUninitialize();\n    return 0;\n}\n</code></pre>\n"}