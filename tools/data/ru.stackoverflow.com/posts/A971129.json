{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":3,"last_activity_date":1555934911,"last_edit_date":1555934911,"creation_date":1555579349,"answer_id":971129,"question_id":969870,"body":"<p>Создайте свой класс, производный от Stream, который вместо записи данных будет считать их размер:</p>\n\n<pre><code>public class MyStream : Stream\n{\n    int c = 0;\n\n    public override bool CanRead =&gt; false;\n\n    public override bool CanSeek =&gt; false;\n\n    public override bool CanWrite =&gt; true;\n\n    public override long Length =&gt; с;\n\n    public override long Position { get =&gt; c; set =&gt; throw new NotSupportedException(); }\n\n    public override void Flush()\n    {\n        return;\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void SetLength(long value)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        c += count;\n    }\n}\n</code></pre>\n\n<p>Создайте для каждого метода перегрузку, которая будет писать те же данные, но не в файл, а в Stream:</p>\n\n<pre><code>public static void WriteTxtFile(List&lt;Equipment&gt; equipments, Stream s)\n{\n    StreamWriter writer = new StreamWriter(s);\n    equipments.ForEach(equipment =&gt; writer.WriteLine($\"{equipment.Department};{equipment.Name};{equipment.Amount};{equipment.UnitCost};{equipment.TotalCost}\"));\n    writer.Flush();\n}\n</code></pre>\n\n<p>Тогда размер данных вы сможете определить так:</p>\n\n<pre><code>MyStream s = new MyStream();            \nWriteTxtFile(eqlist, s);\nConsole.WriteLine(\"Text file size: \" + s.Position);\n</code></pre>\n"}