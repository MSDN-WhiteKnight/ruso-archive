{"owner":{"reputation":16068,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1524636281,"last_edit_date":1524636281,"creation_date":1524634737,"answer_id":819012,"question_id":818576,"body":"<p>Ваш код будет работать нормально, только если на вход подать данные определенного формата: моно, 1 байт на сэмпл, определенная частота дискретизации и т.п. Кроме того, он не учитывает несколько деталей: из результата БПФ нужно отбросить первое значение (\"постоянная составляющая\") и вторую половину значений (которая не несет полезной информации); количество сэмплов должно быть в степени 2. </p>\n\n<p>Лучше написать код, который может корректно обрабатывать разные форматы, для этого возьмем за основу класс SampleAggregator из <a href=\"https://github.com/SjB/NAudio/blob/master/NAudioWpfDemo/AudioPlaybackDemo/SampleAggregator.cs\" rel=\"nofollow noreferrer\">примера на Github</a>:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Diagnostics;\nusing NAudio.Dsp;\n\nnamespace WindowsFormsTest1\n{    \n    public class SampleAggregator\n    {\n        // volume\n        public event EventHandler&lt;MaxSampleEventArgs&gt; MaximumCalculated;\n        private float maxValue;\n        private float minValue;\n        public int NotificationCount { get; set; }\n        public Complex[] FftBuffer { get { return this.fftBuffer; } }\n        int count;\n\n        // FFT\n        public event EventHandler&lt;FftEventArgs&gt; FftCalculated;\n        public bool PerformFFT { get; set; }\n        private Complex[] fftBuffer;\n        private FftEventArgs fftArgs;\n        private int fftPos;\n        private int fftLength;\n        private int m;\n\n        public SampleAggregator(int fftLength = 1024)\n        {\n            if (!IsPowerOfTwo(fftLength))\n            {\n                throw new ArgumentException(\"FFT Length must be a power of two\");\n            }\n            this.m = (int)Math.Log(fftLength, 2.0);\n            this.fftLength = fftLength;\n            this.fftBuffer = new Complex[fftLength];\n            this.fftArgs = new FftEventArgs(fftBuffer);\n        }\n\n        bool IsPowerOfTwo(int x)\n        {\n            return (x &amp; (x - 1)) == 0;\n        }\n\n\n        public void Reset()\n        {\n            count = 0;\n            maxValue = minValue = 0;\n        }\n\n        public void Add(float value)\n        {\n            if (PerformFFT)\n            {\n                fftBuffer[fftPos].X = (float)(value * FastFourierTransform.HammingWindow(fftPos, fftBuffer.Length));\n                fftBuffer[fftPos].Y = 0;\n                fftPos++;\n                if (fftPos &gt;= fftBuffer.Length)\n                {\n                    fftPos = 0;\n                    // 1024 = 2^10\n                    FastFourierTransform.FFT(true, m, fftBuffer);\n\n                    if(FftCalculated != null) FftCalculated(this, fftArgs);\n                }\n            }\n\n            maxValue = Math.Max(maxValue, value);\n            minValue = Math.Min(minValue, value);\n            count++;\n            if (count &gt;= NotificationCount &amp;&amp; NotificationCount &gt; 0)\n            {\n                if (MaximumCalculated != null)\n                {\n                    MaximumCalculated(this, new MaxSampleEventArgs(minValue, maxValue));\n                }\n                Reset();\n            }\n        }\n    }\n\n    public class MaxSampleEventArgs : EventArgs\n    {\n        [DebuggerStepThrough]\n        public MaxSampleEventArgs(float minValue, float maxValue)\n        {\n            this.MaxSample = maxValue;\n            this.MinSample = minValue;\n        }\n        public float MaxSample { get; private set; }\n        public float MinSample { get; private set; }\n    }\n\n    public class FftEventArgs : EventArgs\n    {\n        [DebuggerStepThrough]\n        public FftEventArgs(Complex[] result)\n        {\n            this.Result = result;\n        }\n        public Complex[] Result { get; private set; }\n    }\n}\n</code></pre>\n\n<p>Тогда для определения частоты порции из первых 1024 сэмплов Wav-файла можно использовать вот такой код:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\n\nusing NAudio;\nusing NAudio.Wave;\nusing NAudio.Wave.SampleProviders;\n\nnamespace WindowsFormsTest1\n{\n    public partial class Form1 : Form\n    {        \n\n        private float parabolic(float[] f, int peak)\n        {\n            if (peak == 0) return f[0];\n            var xv = 0.5f * (f[peak - 1] - f[peak + 1]) / (f[peak - 1] - 2 * f[peak] + f[peak + 1]) + peak;\n\n            return xv;\n        }       \n\n\n        public Form1()\n        {\n            InitializeComponent();            \n        }\n\n        void PrintFrequency(float[] samples, int n_samples, WaveFormat fmt)\n        {\n            textBox1.Text = \"\";\n            for (int i = 0; i &lt; fmt.Channels; i++)\n            {\n                SampleAggregator aggregator = new SampleAggregator(n_samples);\n                aggregator.PerformFFT = true;\n\n                int j;\n                float f;\n\n                //выделяем данные одного канала\n                for (j = 0; j &lt; n_samples; j++)\n                {\n                    int index = (j * fmt.Channels) + i;\n                    f = samples[index];\n                    aggregator.Add(f);\n                }\n\n                float[] fft_x = new float[aggregator.FftBuffer.Length / 2]; //только первая половина БПФ имеет смысл\n\n                for (j = 0; j &lt; fft_x.Length; j++)\n                {\n                   float real = aggregator.FftBuffer[j].X;\n                   float imag = aggregator.FftBuffer[j].Y;\n                   fft_x[j] = (float)Math.Sqrt(real * real + imag * imag); //получаем амплитуду  \n                }\n\n                fft_x[0] = 0.0f;//избавляемся от постоянной составляющей\n\n                int i_peak = fft_x.ToList().IndexOf(fft_x.Max());                \n\n                for (j = 0; j &lt; fft_x.Length; j++)\n                {\n                    fft_x[j] = (float)Math.Log(Math.Abs(aggregator.FftBuffer[j].X));\n                }\n\n                var i_interp = parabolic(fft_x, i_peak);\n\n                float freq = fmt.SampleRate * i_interp / (float)n_samples;\n\n                textBox1.Text += (\"Channel \" + i.ToString() + \": \" + freq.ToString() + \" Hz\" + Environment.NewLine);\n            }\n\n        }\n\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n\n            WaveStream readerStream = new WaveFileReader(\"c:\\\\Test\\\\sound_01.wav\");\n            WaveStream pcmStream;\n            WaveStream stream;\n\n            //создаем поток в PCM-формате\n            if (readerStream.WaveFormat.Encoding != WaveFormatEncoding.Pcm)\n            {\n                pcmStream = WaveFormatConversionStream.CreatePcmStream(readerStream);\n                stream = new BlockAlignReductionStream(pcmStream);\n            }\n            else\n            {\n                pcmStream = readerStream;\n                stream = readerStream;\n            }\n\n            float[] samples;\n            const int N_SAMPLES = 1024; //количество сэмплов для спектрального анализа\n            ISampleProvider prov;\n\n            using(stream)\n            using(readerStream)\n            using (pcmStream)\n            {\n                prov = stream.ToSampleProvider();                \n                samples = new float[N_SAMPLES * prov.WaveFormat.Channels];\n\n                int res = prov.Read(samples, 0, N_SAMPLES * prov.WaveFormat.Channels);\n                if (res &lt; N_SAMPLES * prov.WaveFormat.Channels) throw new Exception(\"Not enough data\");\n\n            }\n\n            PrintFrequency(samples,N_SAMPLES,prov.WaveFormat);\n\n        }  \n\n    }\n\n}\n</code></pre>\n"}