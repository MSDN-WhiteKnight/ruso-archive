{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":0,"last_activity_date":1517767460,"last_edit_date":1517767460,"creation_date":1517762391,"answer_id":780170,"question_id":778618,"body":"<p>На самом деле, некоторую информацию можно получить без всякого P/Invoke.</p>\n\n<p>Класс <em>Environment</em>:</p>\n\n<pre><code>Console.WriteLine(\"OS version: \" + Environment.OSVersion.ToString());\nConsole.WriteLine(\"Processor count: \" + Environment.ProcessorCount.ToString());\n</code></pre>\n\n<p>Ветка реестра <em>HKLM\\Hardware</em>:</p>\n\n<pre><code>using Microsoft.Win32;\n\n//...\n\nobject result = Registry.GetValue(\n\"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor\\\\0\", \n\"ProcessorNameString\",  \"\");\n\nif (result != null) Console.WriteLine(\"Processor name: \" + (result).ToString());\n\nresult = Registry.GetValue(\n\"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor\\\\0\",\n\"~MHz\", 0);\n\nif (result != null) \n{\n    Console.WriteLine(\"Processor frequency: \" + ((int)result).ToString()+\" MHz\");\n}\n\nresult = Registry.GetValue(\n\"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS\"\n, \"BaseBoardManufacturer\", \"\");\n\nif (result != null) Console.WriteLine(\"Motherboard vendor: \" + (result).ToString());\n\nresult = Registry.GetValue(\n\"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\BIOS\"\n, \"BaseBoardProduct\", 0);\n\nif (result != null) Console.WriteLine(\"Motherboard name: \" + (result).ToString());\n</code></pre>\n\n<hr>\n\n<p>Но основная часть информации об устройствах находится в таблице SMBIOS, которую можно получить функцией <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms724379(v=vs.85).aspx\" rel=\"nofollow noreferrer\">GetSystemFirmwareTable</a> (действительно, из kernel32.dll):</p>\n\n<pre><code>[DllImport(\"kernel32.dll\")]\npublic static extern uint GetSystemFirmwareTable(\n    uint FirmwareTableProviderSignature,\n    uint FirmwareTableID,\n    [Out, MarshalAs(UnmanagedType.LPArray)] byte[] pFirmwareTableBuffer,\n    uint BufferSize);\n\n// ...\n\nbyte[] arr = new byte[5000];                \nuint sig = 0x52534D42;//RSMB\n\nuint res = GetSystemFirmwareTable(sig, 0, arr, 5000);\nif (res == 0 || res &gt; 5000) \n{\n      throw new ApplicationException(\"GetSystemFirmwareTable failed\");\n}    \n</code></pre>\n\n<p>Структура таблицы SMBIOS описана в спецификации: <a href=\"https://www.dmtf.org/standards/smbios\" rel=\"nofollow noreferrer\">https://www.dmtf.org/standards/smbios</a></p>\n\n<p>Пример извлечения сведений об оборудовании на языке C можно найти <a href=\"https://ru.stackoverflow.com/a/753935/240512\">здесь</a>. Также, <a href=\"https://github.com/openhardwaremonitor/openhardwaremonitor/blob/da432ef07cf125c019afd3a27f447da428404611/Hardware/SMBIOS.cs\" rel=\"nofollow noreferrer\">здесь</a> есть код парсера SMBIOS на C#, под лицензией MPL.</p>\n"}