{"owner":{"reputation":16068,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":0,"last_activity_date":1527534059,"last_edit_date":1527534059,"creation_date":1525759104,"answer_id":824822,"question_id":819655,"body":"<blockquote>\n  <p>Все же объясните если кто знает почему body = null.</p>\n</blockquote>\n\n<p>Вот поэтому:</p>\n\n<blockquote>\n  <p><code>Thread.Sleep(10000); //думал мб не хватает времени прогрузить</code></p>\n</blockquote>\n\n<p>Использовать <em>Thread.Sleep</em> для ожидания загрузки документа нельзя. <em>WebBrowser</em> - обертка над ActiveX-элементом Internet Explorer, которому для корректной работы требуется обработка сообщений в GUI-потоке. Вызов <em>Thread.Sleep</em> блокирует ее, так что хоть и документ успевает загрузиться \"транспортным уровнем\" за 10 секунд, WebBrowser не может среагировать на это и установить значение свойства <em>Document</em>. Чтобы все сработало, нужно ждать без прерывания обработки сообщений.</p>\n\n<p>К сожалению, WinForms очень старая библиотека и у <em>WebBrowser</em> я не смог найти асинхронного метода загрузки, который бы позволял использовать <em>await</em>. Так что единственный (стандартный) способ - подписка на событие:</p>\n\n<pre><code>private void button1_Click(object sender, EventArgs e)\n{\n    System.Windows.Forms.WebBrowser browser = new System.Windows.Forms.WebBrowser();\n    browser.ScriptErrorsSuppressed = true;\n    browser.DocumentCompleted += browser_DocumentCompleted;\n    browser.Navigate(\"https://temp-mail.org/ru\"); \n}\n\nvoid browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)\n{\n    MessageBox.Show((sender as WebBrowser).Document.Body.InnerHtml);\n}\n</code></pre>\n\n<hr>\n\n<p>Чтобы реализовать ожидание более удобно, создадим вспомогательный метод для ожидания события с помощью <em>TaskCompletionSource</em>:</p>\n\n<pre><code>using System;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\nnamespace WinformsTest\n{\n    public class AsyncTools\n    {\n        /// &lt;summary&gt;\n        /// Получает объект Task, который может использоваться для ожидания срабатывания указанного события\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"o\"&gt;Объект-источник события&lt;/param&gt;\n        /// &lt;param name=\"evt\"&gt;Имя события&lt;/param&gt;       \n        public static Task&lt;object&gt; GetTaskFromEvent(object o, string evt)\n        {\n            if (o == null || evt == null) throw new ArgumentNullException(\"Please pass non-null arguments\");\n\n            EventInfo einfo = o.GetType().GetEvent(evt);\n            if (einfo == null)\n            {\n                throw new ArgumentException(String.Format(\"*{0}* has no *{1}* event\", o, evt));\n            }\n\n            TaskCompletionSource&lt;object&gt; tcs = new TaskCompletionSource&lt;object&gt;();\n            MethodInfo mi = null;\n            Delegate deleg = null;\n            EventHandler handler = null;\n\n            //код обработчика события\n            handler = (s, e) =&gt;\n            {\n                mi = handler.Method;\n                deleg = Delegate.CreateDelegate(einfo.EventHandlerType, handler.Target, mi);\n                einfo.RemoveEventHandler(s, deleg); //отцепляем обработчик события\n                tcs.TrySetResult(null); //сигнализируем о наступлении события\n            };\n\n            mi = handler.Method;\n            deleg = Delegate.CreateDelegate(einfo.EventHandlerType, handler.Target, mi); //получаем делегат нужного типа\n            einfo.AddEventHandler(o, deleg); //присоединяем обработчик события\n            return tcs.Task;\n        }\n    }\n}\n</code></pre>\n\n<p>Тогда ожидание загрузки документа можно осуществлять с помощью <em>await</em> (.NET 4.5+):</p>\n\n<pre><code>var task = AsyncTools.GetTaskFromEvent(webBrowser1,\"DocumentCompleted\");            \nwebBrowser1.Navigate(\"http://example.com/\");\nawait task;\n</code></pre>\n"}