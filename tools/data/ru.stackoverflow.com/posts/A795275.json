{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":1,"last_activity_date":1520519432,"last_edit_date":1520519432,"creation_date":1520509589,"answer_id":795275,"question_id":794122,"body":"<p>По сути, вопрос состоит из двух частей: как работать с ресурсами сборки, и как динамически работать с типами. Для решения данных задач используются классы <code>System.Reflection.Assembly</code> и <code>System.Activator</code>. Следующий упрощенный пример демонстрирует это.</p>\n\n<p>Создадим тестовый проект библиотеки классов <code>ResTestDLL</code>, содержащий текстовый файл <code>file.txt</code>, отмеченный как внедренный ресурс, и класс:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace ResTestDLL\n{\n    public class Cat\n    {\n        public override string ToString()\n        {\n            return \"I am cat\";\n        }\n    }\n}\n</code></pre>\n\n<p>Создадим приложение:</p>\n\n<pre><code>using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Text;\n\nnamespace ResTest\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            /**** Демонстрация загрузки ресурса *****/\n\n            //путь к DLL\n            string path = Path.Combine(Environment.CurrentDirectory, \"ResTestDLL.dll\");\n\n            //имя ресурса: складывается из имени сборки и имени файла\n            string resname = \"ResTestDLL.file.txt\";\n\n            Assembly ass = Assembly.LoadFile(path);//загружаем DLL\n\n            string[] names = ass.GetManifestResourceNames();//получаем все ресурсы\n            if (names.Length == 0)\n            {\n                Console.WriteLine(\"Ошибка: В сборке нет ресурсов\");\n                Console.ReadKey();\n                return;\n            }\n\n            foreach (string name in names)\n            {\n                if (name == resname) //находим нужный ресурс\n                {\n                    //открываем поток для чтения данных\n                    Stream s = ass.GetManifestResourceStream(name);                    \n                    StreamReader read = new StreamReader(s);\n\n                    using (read)\n                    {\n                        //выводим содержимое ресурса\n                        Console.WriteLine(read.ReadToEnd());\n                    }\n                    break;\n                }\n\n            }\n\n            /**** Демонстрация динамической работы с типами *****/\n\n            string classname = \"Cat\"; //имя класса, который мы будем создавать\n            string method = \"ToString\"; //имя вызываемого метода\n\n            var types = ass.GetTypes(); //получаем все классы в сборке           \n\n            foreach (var type in types)\n            {\n                if (type.Name == classname)//находим нужный тип\n                {\n                    object o = Activator.CreateInstance(type);//создаем экземпляр\n\n                    MethodInfo mi = type.GetMethod(method);\n\n                    string res = (string)mi.Invoke( //вызываем метод\n                        o, //ссылка на экземпляр\n                        new object[0] //массив аргументов\n                        );\n\n                    Console.WriteLine(\"Результат вызова метода: \" + res);\n                    break;\n                }\n            }\n\n            Console.ReadKey();            \n\n        }\n    }\n}\n</code></pre>\n\n<p>Cкомпилируем его, и поместим <code>DLL</code> в один каталог с <code>EXE</code>. Приложение должно вывести текст из файла <code>file.txt</code> и результат вызова метода. </p>\n\n<p><strong>Примечание.</strong> Если ресурс добавляется не как элемент проекта, а через вкладку \"Ресурсы\" в свойствах проекта, все будет несколько сложнее: придется использовать класс <a href=\"https://msdn.microsoft.com/ru-ru/library/system.resources.resourcereader(v=vs.110).aspx\" rel=\"nofollow noreferrer\">ResourceReader</a> и вытаскивать ресурсы из <code>dictionary</code>.</p>\n"}