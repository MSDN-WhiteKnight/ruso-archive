{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":1,"last_activity_date":1516942061,"creation_date":1516942061,"answer_id":775831,"question_id":775464,"body":"<p>В современных версиях Visual C++ CRT функция <code>localtime</code> (как большинство других подобных функций) не имеет проблем с доступом из разных потоков: используемый буфер не является настоящей статической переменной, а размещен на самом деле в локальном хранилище потока. Это не значит, что хорошо ее использовать - это просто очень неудачно спроектированный API, с которым легко допустить ошибки. Но таких в С/С++ много, это ни о чем не говорит.</p>\n\n<p>Насколько я знаю, студия на такие функции дает предупреждение, а не ошибку. Вероятно, у вас включена опция компилятора \"обрабатывать предупреждения как ошибки\". Вы можете отключить предупреждение директивой <code>#pragma warning(disable : 4996)</code>, если у вас хватит дисциплины при этом не использовать <strong>действительно</strong> небезопасные функции из CRT, вроде <code>strcpy</code>. Либо переписывать код с использованием безопасных функций, доступных в конкретных компиляторах.</p>\n\n<p>Что касается <code>localtime_s</code>, она введена в стандарте С11, который считается \"экзотикой\", и не все реализации в полной мере его поддерживают. В С++11 ее нету. GLIBC (аналог CRT в GCC) содержит вместо нее <code>localtime_r</code> из POSIX. Чтобы писать код, который будет обрабатываться разными компиляторами, придется воспользоваться условными директивами препроцессора и написать разные ветки кода для разных компиляторов. Иначе никак.</p>\n"}