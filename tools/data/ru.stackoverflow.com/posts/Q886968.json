{"tags":["c++","winapi"],"owner":{"reputation":47,"user_id":293818,"user_type":"registered","profile_image":"https://i.stack.imgur.com/mtG20.png?s=128&g=1","display_name":"Flone","link":"https://ru.stackoverflow.com/users/293818/flone"},"is_answered":true,"view_count":62,"accepted_answer_id":888021,"answer_count":1,"score":3,"last_activity_date":1538456732,"creation_date":1538223506,"question_id":886968,"link":"https://ru.stackoverflow.com/questions/886968/%d0%92%d1%8b%d0%b2%d0%be%d0%b4-%d0%b8%d0%bc%d0%b5%d0%bd%d0%b8-usb-%d0%b4%d0%b5%d0%b2%d0%b0%d0%b9%d1%81%d0%b0","title":"Вывод имени USB-девайса","body":"<p>Пытаюсь вывести имя нового USB-девайса, когда его подключают. Проблема в том, что при вставке флешки messagebox появляется, но на нем ничего нет. Где-то давно находил в интернете: \"Когда приходит WM_DEVICECHANGE, смотрим, чтобы wParam был равен DBT_DEVICEARRIVAL. В lParam тогда будет указатель на DEV_BROADCAST_DEVICEINTERFACE.\nЕсли в его dbcc_devicetype будет значение DBT_DEVTYP_DEVICEINTERFACE, тогда в\ndbcc_name будет имя устройства.\" Я пытался что-то написать и как-то получить этот указатель из lParam (см. код ниже), но этот указатель не содержит поля-имени. Вообщем, я понятия не имею что нужно написать после проверки wParam и просто написал примерный код. Прошу помощи с решением этой задачи.</p>\n\n<p>Глобальная часть:</p>\n\n<pre><code>#include &lt;windows.h&gt;\n//DEV_BROADCAST_DEVICEINTERFACE struct\n#include \"dbt.h\"\n//contains initguid.h and usbiodef.h\n#include \"GUIDheader.h\"\n\nHDEVNOTIFY NotificationHande;\nDEV_BROADCAST_DEVICEINTERFACE DeviceStruct;\n</code></pre>\n\n<p>Оконная процедура:</p>\n\n<pre><code>LRESULT CALLBACK WndProc(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam)\n{\n    switch (uMsg)\n    {\n    case(WM_CREATE):\n        DeviceStruct.dbcc_size = sizeof(DeviceStruct);\n        DeviceStruct.dbcc_classguid = GUID_DEVINTERFACE_USB_DEVICE;\n        DeviceStruct.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;\n        NotificationHande = RegisterDeviceNotification(hWnd, &amp;DeviceStruct, DEVICE_NOTIFY_WINDOW_HANDLE | DEVICE_NOTIFY_ALL_INTERFACE_CLASSES);\n        break;\n    case (WM_DESTROY):\n        PostQuitMessage(0);\n        break;\n    case(WM_DEVICECHANGE):\n        if (wParam == DBT_DEVICEARRIVAL)\n        {\n            DEV_BROADCAST_HDR* NewDevice = (DEV_BROADCAST_HDR*)lParam;\n            if (NewDevice-&gt;dbch_devicetype == DBT_DEVTYP_DEVICEINTERFACE)\n            {\n                MessageBox(0,(LPCSTR)DeviceStruct.dbcc_name, (LPCSTR)\"WOW\", MB_OK);\n            }\n        }\n        break;\n    default:\n        return DefWindowProc(hWnd, uMsg, wParam, lParam);\n    }\n    return 0;\n}\n</code></pre>\n\n<p>Основная функция:</p>\n\n<pre><code>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)\n{\n    // Main window handle\n    HWND hMainWnd;\n\n    WNDCLASSEX wc;                      \n    wc.cbSize = sizeof(wc);\n    wc.style = CS_HREDRAW | CS_VREDRAW;\n    wc.lpfnWndProc = WndProc;\n    wc.lpszMenuName = NULL;             \n    wc.lpszClassName = \"WindowClass\";           \n    wc.cbWndExtra = NULL;\n    wc.cbClsExtra = NULL;\n    wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);\n    wc.hInstance = hInstance;\n    wc.hIcon = LoadIcon(NULL, IDI_WINLOGO);\n    wc.hIconSm = LoadIcon(NULL, IDI_WINLOGO);\n    wc.hCursor = LoadCursor(NULL, IDC_ARROW);\n\n    if (!RegisterClassEx(&amp;wc))\n    {\n        MessageBox(0, \"Cannot register class.\", \"Error\", MB_OK);\n        return 0;\n    }\n\n    hMainWnd = CreateWindowEx(0, \"WindowClass\", \"\", WS_SYSMENU, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, 0, 0, hInstance, 0);\n    if (hMainWnd == 0)\n    {\n        MessageBox(0, \"Cannot create window.\", \"Error\", MB_OK);\n        return 0;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    MSG message;\n    while (GetMessage(&amp;message, NULL, 0, 0))\n    {\n        TranslateMessage(&amp;message);\n        DispatchMessage(&amp;message);\n    }\n\n    DestroyWindow(hMainWnd);\n\n    UnregisterClass(wc.lpszClassName, hInstance);\n\n    return 0;\n}\n</code></pre>\n"}