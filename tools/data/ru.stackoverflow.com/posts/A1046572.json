{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":1,"last_activity_date":1573825573,"creation_date":1573825573,"answer_id":1046572,"question_id":1046558,"body":"<p>Я предполагаю, что вы хотели поместить начало блока try до if (в текущем виде код не имеет смысла).</p>\n\n<p>Большинство методов работы с файлами в .NET автоматически бросают исключение, если файла не существует, так что вам может и не нужна такая проверка в явном виде. У OpenFileDialog по умолчанию есть предупреждение при выборе несуществующего файла. Но так или иначе, нет смысла бросать исключение только из-за того, что пользователь ввел несуществующий файл. Проброс исключений - довольно тяжелая операция, которая предназначена для действительно исключительных ситуаций. Вы могли бы сделать так:</p>\n\n<pre><code>if (!System.IO.File.Exists(openFileDialog1.FileName))\n{\n    MessageBox.Show(\"Некорректный путь к файлу \" + openFileDialog1.FileName);\n    return;\n}\n</code></pre>\n\n<p>Если вы все же бросаете исключения, нет смысла ловить их тут же только для того, чтобы вывести сообщение. Польза исключений отчасти в том, чтобы захватить стек вызовов для облегчения отладки сложного кода. При таком коде эти данные теряются.</p>\n\n<p>Обычная практика относительно исключений это одно из двух:</p>\n\n<ul>\n<li><p>Просто позволить программе упасть. В этом случае выведется сообщение и диагностическая информация попадет в системный журнал</p></li>\n<li><p>Перехватить исключение и вывести сообщение, но при этом логировать с помощью собственного механизма его полные данные (<code>ex.ToString()</code>)</p></li>\n</ul>\n"}