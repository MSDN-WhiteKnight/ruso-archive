{"tags":["c#","fft"],"owner":{"reputation":157,"user_id":317856,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/24a1ed5a5abdc95060009f1e1e5d904b?s=128&d=identicon&r=PG&f=1","display_name":"Valera","link":"https://ru.stackoverflow.com/users/317856/valera"},"is_answered":true,"view_count":114,"accepted_answer_id":913785,"answer_count":2,"score":0,"last_activity_date":1543592976,"creation_date":1543590999,"last_edit_date":1543591818,"question_id":913771,"link":"https://ru.stackoverflow.com/questions/913771/%d0%91%d1%8b%d1%81%d1%82%d1%80%d0%be%d0%b5-%d0%bf%d1%80%d0%b5%d0%be%d0%b1%d1%80%d0%b0%d0%b7%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d0%a4%d1%83%d1%80%d1%8c%d0%b5-%d0%ba%d0%b0%d0%ba-%d1%80%d0%b0%d0%b1%d0%be%d1%82%d0%b0%d1%82%d1%8c-%d1%81-%d0%ba%d0%be%d0%bc%d0%bf%d0%bb%d0%b5%d0%ba%d1%81%d0%bd%d1%8b%d0%bc%d0%b8-%d1%87%d0%b8%d1%81%d0%bb%d0%b0%d0%bc%d0%b8-%d0%b5%d1%81%d0%bb%d0%b8-%d0%b8%d1%85-%d0%bd%d0%b5%d1%82","title":"Быстрое преобразование Фурье, как работать с комплексными числами, если их нет","body":"<pre><code>using System.Numerics;\n\nnamespace BPF\n{\n    public static class danie\n    {\n        public static Complex[] X;\n        public static Complex[] Y;\n\n        public static Complex[] FastPFurie;\n\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            danie.X = GetDan(\"exaX.txt\");\n            danie.Y = GetDan(\"exa.txt\");\n            FFT ff = new FFT();\n            danie.FastPFurie=FFT.fft(danie.X);\n            Form1 f = new Form1();\n            f.ShowDialog();\n            Console.ReadKey();\n        }\n        public static int n = 0;\n\n\n        public static Complex[] GetDan(string fail)//получение данных из файла\n        {\n            n = 0;\n            string s = \"\";\n            StreamReader r = new StreamReader(fail);\n            s = r.ReadLine();\n            n = s.Split(' ').Length;\n            Complex[] matrix = new Complex[n];\n            string[] l = s.Split(' ');\n            for (int k = 0; k &lt; n; k++)\n            {\n                matrix[k] = Convert.ToDouble(l[k]);\n            }\n            r.Close();\n            return matrix;\n        }\n    }\n\n}\n</code></pre>\n\n<p>-</p>\n\n<pre><code>public class FFT\n{\n    /// Вычисление поворачивающего модуля e^(-i*2*PI*k/N)\n\n    private static Complex w(int k, int N)\n    {\n        if (k % N == 0) return 1;\n        double arg = -2 * Math.PI * k / N;\n        return new Complex(Math.Cos(arg), Math.Sin(arg));\n    }\n\n    /// Возвращает спектр сигнала\n\n    /// &lt;param name=\"x\"&gt;Массив значений сигнала. Количество значений должно быть степенью 2&lt;/param&gt;\n    /// &lt;returns&gt;Массив со значениями спектра сигнала&lt;/returns&gt;\n    public static Complex[] fft(Complex[] x)\n    {\n        Complex[] X;\n        int N = x.Length;\n        if (N == 2)\n        {\n            X = new Complex[2];\n            X[0] = x[0] + x[1];\n            X[1] = x[0] - x[1];\n        }\n        else\n        {\n            Complex[] x_even = new Complex[N / 2];\n            Complex[] x_odd = new Complex[N / 2];\n            for (int i = 0; i &lt; N / 2; i++)\n            {\n                x_even[i] = x[2 * i];\n                x_odd[i] = x[2 * i + 1];\n            }\n            Complex[] X_even = fft(x_even);\n            Complex[] X_odd = fft(x_odd);\n            X = new Complex[N];\n            for (int i = 0; i &lt; N / 2; i++)\n            {\n                X[i] = X_even[i] + w(i, N) * X_odd[i];\n                X[i + N / 2] = X_even[i] - w(i, N) * X_odd[i];\n            }\n        }\n        return X;\n    }\n    /// &lt;summary&gt;\n    /// Центровка массива значений полученных в fft (спектральная составляющая при нулевой частоте будет в центре массива)\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"X\"&gt;Массив значений полученный в fft&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public static Complex[] nfft(Complex[] X)\n    {\n        int N = X.Length;\n        Complex[] X_n = new Complex[N];\n        for (int i = 0; i &lt; N / 2; i++)\n        {\n            X_n[i] = X[N / 2 + i];\n            X_n[N / 2 + i] = X[i];\n        }\n        return X_n;\n    }\n}\n</code></pre>\n\n<p>Из файлах содержатся значения сигнала экг: 26,48 24,743 19,478 18,407 20,252 23,051 21,028.... и тд это зачения по Y, по X в другом файле, после преобразований, выдаёт чудо график...</p>\n\n<pre><code>public Form1()\n    {\n        InitializeComponent();\n        chart1.Series[0].ChartType = SeriesChartType.Spline;\n        chart2.Series[0].ChartType = SeriesChartType.Spline;\n    }\n\n    private void button1_Click(object sender, EventArgs e)\n    {\n        foreach (Complex complex in danie.FastPFurie)\n            chart1.Series[0].Points.AddXY(complex.Real, complex.Imaginary);\n    }\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/ybPw1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ybPw1.png\" alt=\"введите сюда описание изображения\"></a></p>\n"}