{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1555388647,"creation_date":1555388647,"answer_id":970141,"question_id":969675,"body":"<blockquote>\n  <p>Здесь, как я понял происходит то, что t2 ссылаться на новый объект IEnumerable с аналогичными значениями</p>\n</blockquote>\n\n<p>Тип времени выполнения в обоих случаях одинаковый - List. Более того, даже если заменить <code>var ...</code> на <code>IEnumerable&lt;int&gt; ...</code>, ничего не изменится, тип времени выполнения останется тем же, так как метод ToList всегда возвращает объект типа List. (Кроме того, объект просто не может иметь тип IEnumerable, так как экземпляр интерфейса создать нельзя.)</p>\n\n<p>Чтобы убедиться на практике, выполните код:</p>\n\n<pre><code>List&lt;int&gt; listValues = new List&lt;int&gt; { 1, 2, 3 };\nvar t1 = listValues.ToList();\nConsole.WriteLine(t1.GetType());\n\nIEnumerable&lt;int&gt; listValues2 = new List&lt;int&gt; { 1, 2, 3 };\nvar t2 = listValues2.ToList();\nConsole.WriteLine(t2.GetType());\n\nIEnumerable&lt;int&gt; listValues3 = new List&lt;int&gt; { 1, 2, 3 };\nIEnumerable&lt;int&gt; t3 = listValues3.ToList();\nConsole.WriteLine(t3.GetType()); \n</code></pre>\n\n<p>Он выведет</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>System.Collections.Generic.List`1[System.Int32]\nSystem.Collections.Generic.List`1[System.Int32]\nSystem.Collections.Generic.List`1[System.Int32]\n</code></pre>\n\n<hr>\n\n<p>Чтобы все-таки получить тип времени выполнения, отличный от List, можно реализовать метод-итератор:</p>\n\n<pre><code>static IEnumerable&lt;int&gt; Foo(List&lt;int&gt; list)\n{\n    for (int i = 0; i &lt; list.Count; i++) yield return list[i];\n}\n</code></pre>\n\n<p>Тогда</p>\n\n<pre><code>var t4 = Foo(listValues);\nConsole.WriteLine(t4.GetType());\n</code></pre>\n\n<p>Выведет имя автоматически сгенерированного компилятором типа-итератора (у меня <code>ConsoleApplication1.Program+&lt;Foo&gt;d__0</code>)</p>\n"}