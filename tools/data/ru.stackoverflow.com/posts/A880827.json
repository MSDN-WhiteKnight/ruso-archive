{"owner":{"reputation":4280,"user_id":192421,"user_type":"registered","accept_rate":48,"profile_image":"https://www.gravatar.com/avatar/e287adb1e5d34863c9e5a5aa6a73d67a?s=128&d=identicon&r=PG","display_name":"pepsicoca1","link":"https://ru.stackoverflow.com/users/192421/pepsicoca1"},"is_accepted":false,"score":2,"last_activity_date":1536917146,"last_edit_date":1536917146,"creation_date":1536829800,"answer_id":880827,"question_id":880745,"body":"<p>Толстый троллинг по поводу \"недостатков\" языка С++ продолжается. Ну что же, ринемся на защиту детища Страуструпа.</p>\n\n<blockquote>\n  <p>1) Я знаю, что с совместимостью компиляторов C++ все очень плохо,</p>\n</blockquote>\n\n<p>С совместимостью компиляторов С++ все очень хорошо, гораздо лучше, чем с совместимостью компиляторов с каких-либо других языков. Вплоть до того, что многие языки имеют компилятор только под одну платформу и/или от одного производителя. Конечно, такой подход улучшает совместимость, но ухудшает переносимость и тормозит развитие. При отказе единственного производителя компилятора от поддержки языка 100500 разработчиков повисают в воздухе. Достаточно вспомнить отказ даже такого гиганта как Микрософт от обратной совместимости в языке Visual Basic при переходе от версии VB6 к версии VB.net.</p>\n\n<blockquote>\n  <p>потому что язык слишком переусложнен,\n  имеет бесконечное количество тонкостей, исключений из правил и\n  пунктов, которые определяются реализацией.</p>\n</blockquote>\n\n<p>Язык С++ не переусложнен. Просто в языке С++ не включена \"защита от дурака\". В награду за не включенную \"защиту от дурака\" пользователи имеют возможность делать то, что им нужно, а не то, что позволяет им язык. Чтобы пользоваться всеми возможностями языка С++ недостаточно выучить синтаксис С++ по первому изданию книжки Страуструпа. Надо еще читать книжки, которые выходят по мере развития языка и в которых обсуждаются как раз те новые возможности, которые некоторых разработчиков приводят к созданию крашащегося кода, а другим разработчикам позволяют съэкономить 100500 часов рабочего времени. Внесение в язык С++ новых возможностей (например шаблонов) порождает взаимодействие этих новых возможностей со старыми возможностями (например с классами). Это взаимодействие может служить как источником ошибок, так и источником новых идей и подходов. Многие достойные люди занимаются исследованиями в этих направлениях и публикуют свои результаты исследований. Изучая эти исследования можно избежать ошибок и воспользоваться новыми подходами. Еще раз повторю что в языке С++ не включена \"защита от дурака\". И поэтому, чтобы не делать ошибок в языке С++, надо точно понимать, что именно ты делаешь.</p>\n\n<blockquote>\n  <p>Поэтому я не очень понимаю, зачем используют всякие export \"C\" и\n  extern \"C\", </p>\n</blockquote>\n\n<p>Как тут правильно заметили это отключает манглинг имен.</p>\n\n<blockquote>\n  <p>если двоичные файлы (например, lib) практически всегда\n  оказываются совместимы лишь с тем компилятором, которым они сделаны.\n  Так в чем смысл?</p>\n</blockquote>\n\n<p>Под совместимостью различных компиляторов языка С++ имеется ввиду совместимость на уровне исходного текста. Двоичную совместимость объектников, бинарников и библиотек lib никто и никогда не гарантировал. Кстати, это относится и к другим языкам (за исключением языков с виртуальными машинами, но там за это платят тем, что приходится за собой таскать все тупиковые решения и ошибки ради обратной совместимости). </p>\n\n<blockquote>\n  <p>2) Если разработка lib, dll и a файлов ведется с использованием языка\n  C, то как в этом случае обстоят дела с совместимостью? Все так же\n  плохо, как если бы разработка велась на C++? Или нет?</p>\n</blockquote>\n\n<p>Кстати, никто не гарантировал совместимость объектников, бинарников и библиотек lib для языка Си. Трансляторы с языка Си от разных производителей производят объектники разного формата. Ну и что в этом такого?</p>\n\n<blockquote>\n  <p>3) Есть ли способы делать двоичные библиотеки максимально\n  совместимыми? Чтобы написанная однажды библиотека dll могла быть\n  подключена в самых разных языках без боли и страданий?</p>\n</blockquote>\n\n<p>Если в системе Windows dll имеет \"pure Си\" интерфейс, то ее можно вызвать из многих других языков. Количество боли и страданий при этом зависит от разработчика интерфейса между dll и этим самым языком, из которого dll вызывается. Собственно языки С/С++ к этому не имеют никакого отношения.</p>\n\n<p>UPD1:</p>\n\n<blockquote>\n  <p>Я не начинал толстый троллинг по поводу недостатков C++, просто это\n  мое мнение, которое основывается на определенном опыте работы с этим\n  языком, в том числе в международных группах разработчиков. – Максим 2\n  минуты назад</p>\n</blockquote>\n\n<p>Уважаемый Максим, количество использующих язык С++ разработчиков в мире (в том числе в международных группах разработчиков) убедительно показывает, что язык C++ вполне жизнеспособен. Если бы это было не так, то от языка С++ давно бы отказались, как отказались в свое время от 100500 других языков.</p>\n\n<p>UPD2:</p>\n\n<blockquote>\n  <p>С тем, что С++ жизнеспособен, никто не спорит. Но все-таки в нем\n  действительно много разных тонкостей и хитростей. – HolyBlackCat 10\n  секунд назад</p>\n</blockquote>\n\n<p>Как я уже сказал, все эти \"тонкости и хитрости\" это следствие того, что новые возможности добавляются в язык и на уровне транслятора отсутствуют семантические и синтаксические ограничения на использование этих новых возможностей. Также  на уровне транслятора отсутствуют семантические и синтаксические ограничения на взаимодействие новых возможностей со старыми возможностями. Это, с одной стороны, добавляет мощи. А с другой стороны, ограничения на использование новых средств должны храниться в голове программиста, а не прошиваются в синтаксисе языка.</p>\n\n<p>В любом случае, все, кому С++ кажется слишком сложным/непонятным/переусложненным/плохо совместимым может пользоваться любыми другими языками вместо того, чтобы перечислять мнимые недостатки С++. Потому что все эти якобы недостатки С++ это вовсе не недостатки, а это такой подход при котором транслятор не мешает Вам выстрелить себе в ногу, но зато дает возможность выстрелить на 100500 километров при правильном использовании. На свете есть 100500 трансляторов, которые мешают программисту выстрелить себе в ногу, но зато и ограничивают возможности.</p>\n\n<p>UPD3:</p>\n\n<p>Извините за частое употребление идиомы 100500, но уж очень она тут подходит. :-)</p>\n"}