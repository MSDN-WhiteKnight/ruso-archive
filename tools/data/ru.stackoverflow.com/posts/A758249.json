{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":9,"last_activity_date":1526968599,"last_edit_date":1526968599,"creation_date":1513252735,"answer_id":758249,"question_id":758190,"body":"<p>Если приложение запускается с правами администратора, можно воспользоваться <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa373646(v=vs.85).aspx\" rel=\"nofollow noreferrer\">Restart Manager API</a>:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Windows.Forms;\n\nnamespace WindowsFormsTest1\n{\n    public partial class Form1 : Form\n    {\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmStartSession(out UInt32 pSessionHandle, UInt32 dwSessionFlags,\n            string strSessionKey);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmRegisterResources(UInt32 dwSessionHandle,\n        UInt32 nFiles, string[] rgsFilenames, UInt32 nApplications,\n        ref RM_UNIQUE_PROCESS rgApplications, UInt32 nServices, string[] rgsServiceNames);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmGetList(UInt32 dwSessionHandle, out UInt32 pnProcInfoNeeded,\n        ref UInt32 pnProcInfo, [In, Out] RM_PROCESS_INFO[] rgAffectedApps, ref UInt32 lpdwRebootReasons);\n\n        [DllImport(\"Rstrtmgr.dll\", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true, ExactSpelling = true)]\n        public static extern UInt32 RmEndSession(UInt32 dwSessionHandle);\n\n        public const UInt32 RmRebootReasonNone = 0x0;\n        public const int ERROR_MORE_DATA = 234;\n\n        /// &lt;summary&gt;\n        /// Преобразование DateTime в структуру FILETIME \n        /// &lt;/summary&gt;        \n        public static System.Runtime.InteropServices.ComTypes.FILETIME FileTimeFromDateTime(DateTime date)\n        {\n            long ftime = date.ToFileTime();\n            System.Runtime.InteropServices.ComTypes.FILETIME ft = new System.Runtime.InteropServices.ComTypes.FILETIME();\n            ft.dwHighDateTime = (int)(ftime &gt;&gt; 32);\n            ft.dwLowDateTime = (int)ftime;\n            return ft;\n        }\n\n        /// &lt;summary&gt;\n        /// Получение типа процесса\n        /// &lt;/summary&gt;        \n        public static RM_APP_TYPE GetProcessType(Process proc)\n        {\n            uint handle;\n            string key = Guid.NewGuid().ToString();            \n\n            uint res = RmStartSession(out handle, (uint)0, key);\n            if (res != 0)\n            {\n                throw new ApplicationException(\"Could not begin restart session. \");\n            }\n\n            try\n            {                \n                uint pnProcInfoNeeded = 0, pnProcInfo = 0,\n                    lpdwRebootReasons = RmRebootReasonNone;\n\n                RM_UNIQUE_PROCESS uniqueprocess = new RM_UNIQUE_PROCESS();\n                uniqueprocess.dwProcessId = proc.Id;\n                System.Runtime.InteropServices.ComTypes.FILETIME ft = FileTimeFromDateTime(proc.StartTime);\n                uniqueprocess.ProcessStartTime = ft;\n\n                res = RmRegisterResources(handle, 0, null, 1, ref uniqueprocess, 0, null);\n\n                if (res != 0)\n                {\n                    throw new ApplicationException(\"Could not register resource.\");\n                }\n\n                res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, null,\n                                ref lpdwRebootReasons);\n                if (res == ERROR_MORE_DATA)\n                {\n                    RM_PROCESS_INFO[] processInfo = new RM_PROCESS_INFO[pnProcInfoNeeded];\n                    pnProcInfo = pnProcInfoNeeded;\n\n                    // Get the list. \n                    res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo,\n                        processInfo, ref lpdwRebootReasons);\n                    if (res == 0)\n                    {\n                        if (pnProcInfo == 0) throw new ApplicationException(\"Process not found\");\n\n                        return processInfo[0].ApplicationType;\n                    }\n                    else\n                    {\n                        throw new ApplicationException(\"Could not list processes\");\n                    }\n                }\n                else if (res != 0)\n                {\n                    throw new ApplicationException(\"Failed to get size of result.\");\n                }\n            }\n            finally\n            {\n                RmEndSession(handle);\n            }\n            throw new ApplicationException(\"Process not found\");\n        }\n\n\n        public Form1()\n        {\n            InitializeComponent();                \n        }               \n\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            //пример использования                            \n            Process p=Process.GetProcessesByName(textBox1.Text)[0];\n            MessageBox.Show(GetProcessType(p).ToString());\n            /*Для системных процессов выведет RmCritical*/\n        }        \n    }\n\n    /* Определения структур */\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RM_UNIQUE_PROCESS\n    {\n        // The product identifier (PID). \n        public int dwProcessId;\n        // The creation time of the process. \n        public System.Runtime.InteropServices.ComTypes.FILETIME ProcessStartTime;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct RM_PROCESS_INFO\n    {\n        const int CCH_RM_MAX_APP_NAME = 255;\n        const int CCH_RM_MAX_SVC_NAME = 63;\n\n        // Contains an RM_UNIQUE_PROCESS structure that uniquely identifies the \n        // application by its PID and the time the process began. \n        public RM_UNIQUE_PROCESS Process;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_APP_NAME + 1)]\n        // If the process is a service, this parameter returns the  \n        // long name for the service. \n        public string strAppName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCH_RM_MAX_SVC_NAME + 1)]\n        // If the process is a service, this is the short name for the service. \n        public string strServiceShortName;\n        // Contains an RM_APP_TYPE enumeration value. \n        public RM_APP_TYPE ApplicationType;\n        // Contains a bit mask that describes the current status of the application. \n        public uint AppStatus;\n        // Contains the Terminal Services session ID of the process. \n        public uint TSSessionId;\n        // TRUE if the application can be restarted by the  \n        // Restart Manager; otherwise, FALSE. \n        [MarshalAs(UnmanagedType.Bool)]\n        public bool bRestartable;\n    }\n\n    public enum RM_APP_TYPE\n    {\n        // The application cannot be classified as any other type. \n        RmUnknownApp = 0,\n        // A Windows application run as a stand-alone process that \n        // displays a top-level window. \n        RmMainWindow = 1,\n        // A Windows application that does not run as a stand-alone \n        // process and does not display a top-level window. \n        RmOtherWindow = 2,\n        // The application is a Windows service. \n        RmService = 3,\n        // The application is Windows Explorer. \n        RmExplorer = 4,\n        // The application is a stand-alone console application. \n        RmConsole = 5,\n        // A system restart is required to complete the installation because \n        // a process cannot be shut down. \n        RmCritical = 1000\n    }\n}\n</code></pre>\n\n<p>Код основан на данном примере: <a href=\"https://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4\" rel=\"nofollow noreferrer\">https://code.msdn.microsoft.com/windowsapps/How-to-know-the-process-704839f4</a></p>\n\n<p>Метод <code>GetProcessType</code> возвращает тип процесса, для системных процессов он равен значению <code>RM_APP_TYPE.RmCritical</code>.</p>\n\n<p>Если приложение не имеет прав администратора, все проще: попытка получить дескриптор системного процесса просто упадет с ошибкой \"Отказано в доступе\". Нужно лишь ловить <code>Win32Exception</code>.</p>\n\n<hr>\n\n<p><strong>Другие способы</strong></p>\n\n<p>С использованием (нерекомендуемой) функции <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms684280%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396\" rel=\"nofollow noreferrer\">NtQueryInformationProcess</a> из Native API:</p>\n\n<pre><code>const uint ProcessBreakOnTermination = 29;\n\n[DllImport(\"NTDLL.DLL\")]\nstatic extern int NtQueryInformationProcess(IntPtr hProcess, uint pic,\nref uint pi, int cb, out int pSize);\n\npublic static bool IsProcessCritical(Process pr)\n{\n\n    uint val = 0;\n    int size;\n    int res = NtQueryInformationProcess(pr.Handle, ProcessBreakOnTermination, ref val,\n        sizeof(uint), out size);\n    if (res != 0 || size != sizeof(uint)) throw new Win32Exception(\"NtQueryInformationProcess failed\");\n\n    return (val != 0);\n}\n</code></pre>\n\n<p>Начиная с Windows 8.1 можно использовать функцию <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dn386160%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396\" rel=\"nofollow noreferrer\">IsProcessCritical</a> - <a href=\"https://ru.stackoverflow.com/questions/831381/%D0%9D%D0%B5-%D0%BD%D0%B0%D0%B9%D0%B4%D0%B5%D0%BD%D0%B0-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F-%D0%B8%D0%B7-ntdll-dll\">пример</a>.</p>\n"}