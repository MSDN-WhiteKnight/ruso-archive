{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":0,"last_activity_date":1549867866,"creation_date":1549867866,"answer_id":943375,"question_id":703209,"body":"<p>Для мониторинга производительности DirectX в Windows существуют несколько провайдеров <a href=\"https://docs.microsoft.com/en-us/windows/desktop/ETW/event-tracing-portal\" rel=\"nofollow noreferrer\">Event Tracing for Windows</a>. Наиболее интересны <code>Microsoft-Windows-D3D9</code> и <code>Microsoft-Windows-DXGI</code>, которые позволяют отследить событие рендеринга кадра. Простейший способ вычисления FPS заключается в том, чтобы посчитать количество событий рендеринга кадров (\"PresentStart\") в интервале времени и разделить на величину этого интервала. </p>\n\n<p>Для того, чтобы задействовать ETW в C#, понадобится подключить пакет <a href=\"https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent/\" rel=\"nofollow noreferrer\">Microsoft.Diagnostics.Tracing.TraceEvent</a>.</p>\n\n<p>Пример кода для отображения FPS всех запущенных процессов:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Diagnostics;\nusing System.Threading;\nusing Microsoft.Diagnostics.Tracing.Session;\n\nnamespace ConsoleApp1\n{\n    //вспомогательный класс для хранения моментов времени отрисовки кадров\n    public class TimestampCollection\n    {\n        const int MAXNUM = 1000;\n\n        public string Name { get; set; }\n\n        List&lt;long&gt; timestamps = new List&lt;long&gt;(MAXNUM + 1);\n        object sync = new object();\n\n        //добавление значения в коллекцию\n        public void Add(long timestamp)\n        {\n            lock (sync)\n            {\n                timestamps.Add(timestamp);\n                if (timestamps.Count &gt; MAXNUM) timestamps.RemoveAt(0);\n            }\n        }\n\n        //получение числа значений в определенном интервале времени\n        public int QueryCount(long from, long to)\n        {\n            int c = 0;\n\n            lock (sync)\n            {\n                foreach (var ts in timestamps)\n                {\n                    if (ts &gt;= from &amp;&amp; ts &lt;= to) c++;\n                }\n            }\n            return c;\n        }\n    }\n\n    class Program\n    {\n        //коды событий (https://github.com/GameTechDev/PresentMon/blob/40ee99f437bc1061a27a2fc16a8993ee8ce4ebb5/PresentData/PresentMonTraceConsumer.cpp)\n        public const int EventID_D3D9PresentStart = 1;\n        public const int EventID_DxgiPresentStart = 42;\n\n        //коды провайдеров ETW\n        public static readonly Guid DXGI_provider = Guid.Parse(\"{CA11C036-0102-4A2D-A6AD-F03CFED5D3C9}\");\n        public static readonly Guid D3D9_provider = Guid.Parse(\"{783ACA0A-790E-4D7F-8451-AA850511C6B9}\");\n\n        static TraceEventSession m_EtwSession;\n        static Dictionary&lt;int, TimestampCollection&gt; frames = new Dictionary&lt;int, TimestampCollection&gt;();       \n        static Stopwatch watch = null;\n        static object sync = new object();\n\n        static void EtwThreadProc()\n        {            \n            //запускает отслеживание событий\n            m_EtwSession.Source.Process();\n        }\n\n        static void OutputThreadProc()\n        {\n            //цикл вывода результатов в консоль\n            while (true)\n            {    \n                long t1, t2;\n                long dt = 2000;\n                Console.Clear();\n                Console.WriteLine(DateTime.Now.ToString() + \".\" + DateTime.Now.Millisecond.ToString());\n                Console.WriteLine();\n\n                lock (sync)\n                {\n                    t2 = watch.ElapsedMilliseconds;\n                    t1 = t2 - dt;\n\n                    foreach (var x in frames.Values)\n                    {\n                        Console.Write(x.Name + \": \");   \n\n                        //получаем количество кадров в интервале времени\n                        int count = x.QueryCount(t1, t2);\n\n                        //вычисляем FPS\n                        Console.WriteLine(\"{0} FPS\", (double)count / dt * 1000.0);\n                    }\n                }\n\n                Console.WriteLine();\n                Console.WriteLine(\"Press any key to stop tracing...\");\n                Thread.Sleep(1000);\n            }\n        }\n\n        public static void Main(string[] argv)\n        {\n            //создаем сессию ETW и регистрируем провайдеры\n            m_EtwSession = new TraceEventSession(\"mysess\");\n            m_EtwSession.StopOnDispose = true;\n            m_EtwSession.EnableProvider(\"Microsoft-Windows-D3D9\");\n            m_EtwSession.EnableProvider(\"Microsoft-Windows-DXGI\");\n\n            //подписываемся на событие\n            m_EtwSession.Source.AllEvents += data =&gt;\n            {\n                //интересуют только события рендеринга кадров\n                if (((int)data.ID == EventID_D3D9PresentStart &amp;&amp; data.ProviderGuid == D3D9_provider) ||\n                ((int)data.ID == EventID_DxgiPresentStart &amp;&amp; data.ProviderGuid == DXGI_provider))\n                {\n                    int pid = data.ProcessID;\n                    long t;\n\n                    lock (sync)\n                    {\n                        t = watch.ElapsedMilliseconds; \n\n                        //если найден новый процесс, добавляем в Dictionary\n                        if (!frames.ContainsKey(pid))\n                        {\n                            frames[pid] = new TimestampCollection();\n\n                            string name = \"\";\n                            var proc = Process.GetProcessById(pid);\n                            if (proc != null)\n                            {\n                                using (proc)\n                                {\n                                    name = proc.ProcessName;\n                                }\n                            }\n                            else name = pid.ToString();\n\n                            frames[pid].Name = name;\n                        }\n\n                        //добавляем кадр в коллекцию\n                        frames[pid].Add(t);\n                    }\n                }\n            };\n\n            watch = new Stopwatch();\n            watch.Start();            \n\n            Thread thETW = new Thread(EtwThreadProc);\n            thETW.IsBackground = true;\n            thETW.Start();\n\n            Thread thOutput = new Thread(OutputThreadProc);\n            thOutput.IsBackground = true;\n            thOutput.Start();\n\n            Console.ReadKey();\n            m_EtwSession.Dispose();\n        }\n    }\n}\n</code></pre>\n\n<p>Основан на коде проекта <a href=\"https://github.com/GameTechDev/PresentMon\" rel=\"nofollow noreferrer\">PresentMon</a></p>\n"}