{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1522662035,"last_edit_date":1522662035,"creation_date":1522649889,"answer_id":808189,"question_id":799293,"body":"<p>Можно использовать вот такую простую программу для управления громкостью заданного устройства с помощью глобальных горячих клавиш:</p>\n\n<pre><code>/*\nSmall Volume Control\nAuthor: MSDN.WhiteKnight\nLicense: WTFPL\nRequirements: Windows Vista, .NET 4.5 (or newer)\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\nusing System.Runtime.Serialization;\nusing System.Xml;\nusing System.Xml.Serialization;\n\nnamespace SmallVolumeControl\n{\n    static class Program\n    {\n        /// &lt;summary&gt;\n        /// Главная точка входа для приложения.\n        /// &lt;/summary&gt;\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n\n    public class Form1 : Form\n    {\n        /// &lt;summary&gt;\n        /// Требуется переменная конструктора.\n        /// &lt;/summary&gt;\n        private System.ComponentModel.IContainer components = null;\n\n        /// &lt;summary&gt;\n        /// Освободить все используемые ресурсы.\n        /// &lt;/summary&gt;\n        /// &lt;param name=\"disposing\"&gt;истинно, если управляемый ресурс должен быть удален; иначе ложно.&lt;/param&gt;\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing &amp;&amp; (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Код, автоматически созданный конструктором форм Windows\n\n        /// &lt;summary&gt;\n        /// Обязательный метод для поддержки конструктора - не изменяйте\n        /// содержимое данного метода при помощи редактора кода.\n        /// &lt;/summary&gt;\n        private void InitializeComponent()\n        {\n            this.SuspendLayout();\n            // \n            // Form1\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(290, 117);\n            this.Name = \"Form1\";\n            this.Text = \"Form1\";\n            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.Form1_FormClosed);\n            this.Load += new System.EventHandler(this.Form1_Load);\n            this.ResumeLayout(false);\n        }\n\n        #endregion\n\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        public static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        static extern bool UnregisterHotKey(IntPtr hWnd, int id);\n\n        public const int WM_HOTKEY = 0x312;\n\n        public Form1()\n        {\n            InitializeComponent();\n        }\n\n        protected override void OnLoad(EventArgs e)\n        {\n            Visible = false;\n            ShowInTaskbar = false;\n            base.OnLoad(e);\n        }\n\n        protected override void WndProc(ref Message m)\n        {\n            try\n            {\n                if (m.Msg == WM_HOTKEY)\n                {\n                    if ((int)m.WParam == 3) { this.Close(); return; }\n                    float f = Audio.Volume;\n                    switch ((int)m.WParam)\n                    {\n                        case 1: f -= Conf.Instance.Increment; break;\n                        case 2: f += Conf.Instance.Increment; break;\n                    }\n                    if (f &lt; 0.0f) f = 0.0f;\n                    if (f &gt; 1.0f) f = 1.0f;\n                    Audio.Volume = f;\n                    m.Result = (IntPtr)0;\n                    return;\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(\"Error: \" + ex.ToString(), \"Small Volume Control\");\n            }\n\n            base.WndProc(ref m);\n        }\n\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            string path = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"volume.xml\");\n\n            try\n            {\n                Conf conf;\n                if (System.IO.File.Exists(path)) conf = Conf.Load(path);\n                else { conf = new Conf(); conf.Save(path); }\n                Conf.Instance = conf;\n\n                bool res = RegisterHotKey(this.Handle, 1, 0, conf.DownKeyCode);\n                if (res == false) MessageBox.Show(\"Error: RegisterHotKey failed\", \"Small Volume Control\");\n\n                res = RegisterHotKey(this.Handle, 2, 0, conf.UpKeyCode);\n                if (res == false) MessageBox.Show(\"Error: RegisterHotKey failed\", \"Small Volume Control\");\n                this.Visible = false;\n\n                res = RegisterHotKey(this.Handle, 3, 0, conf.ExitKeyCode);\n                if (res == false) MessageBox.Show(\"Error: RegisterHotKey failed\", \"Small Volume Control\");\n                this.Visible = false;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(\"Error: \" + ex.ToString(), \"Small Volume Control\");\n            }\n        }\n\n        private void Form1_FormClosed(object sender, FormClosedEventArgs e)\n        {\n            try\n            {\n                UnregisterHotKey(this.Handle, 1);\n                UnregisterHotKey(this.Handle, 2);\n                UnregisterHotKey(this.Handle, 3);\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(\"Error: \" + ex.ToString(), \"Small Volume Control\");\n            }\n        }\n    }\n\n    [Serializable]\n    public class Conf\n    {\n        public string DeviceID { get; set; }\n        public float Increment { get; set; }\n        public uint DownKeyCode { get; set; }\n        public uint UpKeyCode { get; set; }\n        public uint ExitKeyCode { get; set; }\n\n        public static Conf Instance { get; set; }\n\n        public Conf()\n        {\n            Increment = 0.1f;\n            DownKeyCode = (uint)Keys.F10;\n            UpKeyCode = (uint)Keys.F11;\n            ExitKeyCode = (uint)Keys.F9;\n            DeviceID = \"\";\n            //Example: {0.0.0.00000000}.{954b1750-0438-45f0-87ed-a4c1167eb4f2}\n        }\n\n        public void Save(string file)\n        {\n            XmlSerializer xs = new XmlSerializer(typeof(Conf));\n            var obj = new Conf();\n\n            using (XmlWriter writer = XmlWriter.Create(file))\n            {\n                xs.Serialize(writer, obj);\n            }\n        }\n\n        public static Conf Load(string file)\n        {\n            XmlSerializer xs = new XmlSerializer(typeof(Conf));\n            using (XmlReader reader = XmlReader.Create(file))\n            {\n                return (Conf)xs.Deserialize(reader);\n            }\n        }\n    }\n\n\n    [Guid(\"5CDF2C82-841E-4546-9722-0CF74078229A\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    interface IAudioEndpointVolume\n    {\n        int f(); int g(); int h(); int i(); // Unused\n        int SetMasterVolumeLevelScalar(float fLevel, System.Guid pguidEventContext);\n        int j();\n        int GetMasterVolumeLevelScalar(out float pfLevel);\n        int k(); int l(); int m(); int n();\n        int SetMute([MarshalAs(UnmanagedType.Bool)] bool bMute, System.Guid pguidEventContext);\n        int GetMute(out bool pbMute);\n    }\n    [Guid(\"D666063F-1587-4E43-81F1-B948E807363F\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    interface IMMDevice\n    {\n        int Activate(ref System.Guid id, int clsCtx, int activationParams, out IAudioEndpointVolume aev);\n    }\n    [Guid(\"A95664D2-9614-4F35-A746-DE8DB63617E6\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    interface IMMDeviceEnumerator\n    {\n        int f(); // Unused\n        int GetDefaultAudioEndpoint(int dataFlow, int role, out IMMDevice endpoint);\n        int GetDevice(string pwstrId, out IMMDevice endpoint);\n    }\n    [ComImport, Guid(\"BCDE0395-E52F-467C-8E3D-C4579291692E\")]\n    class MMDeviceEnumeratorComObject { }\n\n    public class Audio\n    {\n        static IAudioEndpointVolume Vol()\n        {\n            IMMDeviceEnumerator enumerator = new MMDeviceEnumeratorComObject() as IMMDeviceEnumerator;\n            IMMDevice dev = null;\n            Marshal.ThrowExceptionForHR(enumerator.GetDevice(Conf.Instance.DeviceID, out dev));\n            IAudioEndpointVolume epv = null;\n            System.Guid epvid = typeof(IAudioEndpointVolume).GUID;\n            Marshal.ThrowExceptionForHR(dev.Activate(ref epvid, /*CLSCTX_ALL*/ 23, 0, out epv));\n            return epv;\n        }\n        public static float Volume\n        {\n            get { float v = -1; Marshal.ThrowExceptionForHR(Vol().GetMasterVolumeLevelScalar(out v)); return v; }\n            set { Marshal.ThrowExceptionForHR(Vol().SetMasterVolumeLevelScalar(value, System.Guid.Empty)); }\n        }\n        public static bool Mute\n        {\n            get { bool mute; Marshal.ThrowExceptionForHR(Vol().GetMute(out mute)); return mute; }\n            set { Marshal.ThrowExceptionForHR(Vol().SetMute(value, System.Guid.Empty)); }\n        }\n    }\n\n}\n</code></pre>\n\n<p>Команда для сборки:</p>\n\n<pre><code>%WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\Csc.exe /noconfig /nowarn:1701,1702,2008 /nostdlib+ /platform:anycpu32bitpreferred /errorreport:prompt /warn:4 /define:TRACE /errorendlocation /preferreduilang:ru-RU /highentropyva+ /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\Microsoft.CSharp.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\mscorlib.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Core.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Data.DataSetExtensions.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Data.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Deployment.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Drawing.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Windows.Forms.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Xml.dll\" /reference:\"%ProgramFiles(x86)%\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\System.Xml.Linq.dll\" /debug:pdbonly /filealign:512 /optimize+ /out:SmallVolumeControl.exe /subsystemversion:6.00 /target:winexe /utf8output Program.cs\n</code></pre>\n\n<p>Конфигурируется через файл <strong>Мои документы\\volume.xml</strong>:</p>\n\n<p><strong>DeviceID</strong> - Строка вида \"{0.0.0.00000000}.{GUID}\", где GUID - название подраздела в разделе реестра HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\MMDevices\\Audio\\Render, соответствующее нужному устройству</p>\n\n<p><strong>Increment</strong> - Шаг изменения громкости (0.1 = 10%)</p>\n\n<p><strong>DownKeyCode</strong> - Виртуальный код клавиши для уменьшения громкости</p>\n\n<p><strong>UpKeyCode</strong>  - Виртуальный код клавиши для увеличения громкости</p>\n\n<p><strong>ExitKeyCode</strong>  - Виртуальный код клавиши для выхода из программы</p>\n\n<p>Использован код из ответа на SO: <a href=\"https://stackoverflow.com/a/31751275/8674428\">https://stackoverflow.com/a/31751275/8674428</a></p>\n"}