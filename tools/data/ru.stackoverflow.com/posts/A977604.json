{"owner":{"reputation":10115,"user_id":9784,"user_type":"registered","profile_image":"https://i.stack.imgur.com/diiT0.png?s=128&g=1","display_name":"Zergatul","link":"https://ru.stackoverflow.com/users/9784/zergatul"},"is_accepted":true,"score":2,"last_activity_date":1556896188,"creation_date":1556896188,"answer_id":977604,"question_id":977595,"body":"<p>Аналогов нет, так что придется писать самим. Я взял за основу код с ответа, на который вы сослались, и немного доделал его. Там мантисса получается типа лонг потому что внутри бинарного представления там действительно целое чисто стоит на месте мантиссы. В моем коде я дополнительно уменьшаю мантиссу, что бы получить результат согласно спецификации функции <code>frexp</code>:</p>\n\n<pre><code>static void frexp(double value, out double mantissa, out int exponent)\n{\n    long bits = BitConverter.DoubleToInt64Bits(value);\n    bool negative = (bits &amp; (1L &lt;&lt; 63)) != 0;\n    exponent = (int)((bits &gt;&gt; 52) &amp; 0x7FFL);\n    long mantissaLong = bits &amp; 0xFFFFFFFFFFFFFL;\n\n    if (exponent == 0)\n    {\n        exponent++;\n    }\n    else\n    {\n        mantissaLong = mantissaLong | (1L &lt;&lt; 52);\n    }\n\n    exponent -= 1075;\n\n    if (mantissaLong == 0)\n    {\n        mantissa = 0;\n        exponent = 0;\n        return;\n    }\n\n    while ((mantissaLong &amp; 1) == 0)\n    {\n        mantissaLong &gt;&gt;= 1;\n        exponent++;\n    }\n\n    mantissa = mantissaLong;\n    while (mantissa &gt;= 1)\n    {\n        mantissa /= 2;\n        exponent++;\n    }\n\n    if (negative)\n        mantissa = -mantissa;\n}\n</code></pre>\n\n<p>Несколько тестов:</p>\n\n<pre><code>void TestNum(double value)\n{\n    double mantissa;\n    int exponent;\n    frexp(value, out mantissa, out exponent);\n    Console.WriteLine($\"{value} = {mantissa} * 2^{exponent}\");\n}\n\nTestNum(0);\nTestNum(10);\nTestNum(-100);\nTestNum(1024);\nTestNum(double.MaxValue);\n</code></pre>\n\n<p>Результат:</p>\n\n<pre><code>0 = 0 * 2^0\n10 = 0,625 * 2^4\n-100 = -0,78125 * 2^7\n1024 = 0,5 * 2^11\n1,79769313486232E+308 = 1 * 2^1024\n</code></pre>\n\n<p>В последнем выводит 1, хотя в дебагере видно, что там <code>0,99999999999999989</code>. Такова специфика работы <code>double.ToString</code>.</p>\n"}