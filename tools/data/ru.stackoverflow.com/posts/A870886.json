{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":false,"score":2,"last_activity_date":1534911265,"last_edit_date":1534911265,"creation_date":1534756588,"answer_id":870886,"question_id":868305,"body":"<p><strong>Способ 1 - С использованием WPF</strong></p>\n\n<p>Можно создать такой класс на основе Viewport3D из WPF:</p>\n\n<pre><code>//References: PresentationCore, PresentationFramework, WindowsBase, System.XAML\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Media.Media3D;\nusing System.Windows.Media.Imaging;\n\nnamespace WindowsFormsTest\n{\n    public class ImageTransformer\n    {\n        /*Применяет произвольное 3D-преобразование к изображению*/\n        public static void ApplyTransform(string input, string output, Matrix3D matr)\n        {\n            Viewport3D myViewport3D;\n            BitmapImage image = new BitmapImage(new Uri(input));\n\n            // Declare scene objects.\n            myViewport3D = new Viewport3D();\n            Model3DGroup myModel3DGroup = new Model3DGroup();\n            GeometryModel3D myGeometryModel = new GeometryModel3D();\n            ModelVisual3D myModelVisual3D = new ModelVisual3D();\n            // Defines the camera used to view the 3D object. In order to view the 3D object,\n            // the camera must be positioned and pointed such that the object is within view \n            // of the camera.\n            PerspectiveCamera myPCamera = new PerspectiveCamera();\n\n            // Specify where in the 3D scene the camera is.\n            myPCamera.Position = new Point3D(0, 0, Math.Max(image.PixelWidth,image.PixelHeight)*2);\n\n            // Specify the direction that the camera is pointing.\n            myPCamera.LookDirection = new Vector3D(0, 0, -1);\n\n            // Define camera's horizontal field of view in degrees.\n            myPCamera.FieldOfView = 60;\n\n            // Asign the camera to the viewport\n            myViewport3D.Camera = myPCamera;\n\n            // Define the lights cast in the scene. Without light, the 3D object cannot \n            // be seen. Note: to illuminate an object from additional directions, create \n            // additional lights.                        \n            AmbientLight al = new AmbientLight(Colors.White);\n            myModel3DGroup.Children.Add(al);\n\n            // The geometry specifes the shape of the 3D plane. In this sample, a flat sheet \n            // is created.\n            MeshGeometry3D myMeshGeometry3D = new MeshGeometry3D();\n\n            // Create a collection of normal vectors for the MeshGeometry3D.\n            Vector3DCollection myNormalCollection = new Vector3DCollection();\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myNormalCollection.Add(new Vector3D(0, 0, 1));\n            myMeshGeometry3D.Normals = myNormalCollection;\n\n            // Create a collection of vertex positions for the MeshGeometry3D. \n            Point3DCollection myPositionCollection = new Point3DCollection();\n            myPositionCollection.Add(new Point3D(-image.PixelWidth / 2.0, -image.PixelHeight / 2.0, 0.5));\n            myPositionCollection.Add(new Point3D(image.PixelWidth / 2.0, -image.PixelHeight / 2.0, 0.5));\n            myPositionCollection.Add(new Point3D(image.PixelWidth / 2.0, image.PixelHeight / 2.0, 0.5));\n            myPositionCollection.Add(new Point3D(image.PixelWidth / 2.0, image.PixelHeight / 2.0, 0.5));\n            myPositionCollection.Add(new Point3D(-image.PixelWidth / 2.0, image.PixelHeight / 2.0, 0.5));\n            myPositionCollection.Add(new Point3D(-image.PixelWidth / 2.0, -image.PixelHeight / 2.0, 0.5));\n            myMeshGeometry3D.Positions = myPositionCollection;\n\n            // Create a collection of texture coordinates for the MeshGeometry3D.\n            PointCollection myTextureCoordinatesCollection = new PointCollection();\n\n            Point p5 = new Point(0, 0);\n            Point p34 = new Point(1, 0);\n            Point p2 = new Point(1, 1);\n            Point p16 = new Point(0, 1);\n\n            myTextureCoordinatesCollection.Add(p16);\n            myTextureCoordinatesCollection.Add(p2);\n            myTextureCoordinatesCollection.Add(p34);\n            myTextureCoordinatesCollection.Add(p34);\n            myTextureCoordinatesCollection.Add(p5);\n            myTextureCoordinatesCollection.Add(p16);\n\n            myMeshGeometry3D.TextureCoordinates = myTextureCoordinatesCollection;\n\n            // Create a collection of triangle indices for the MeshGeometry3D.\n            Int32Collection myTriangleIndicesCollection = new Int32Collection();\n            myTriangleIndicesCollection.Add(0);\n            myTriangleIndicesCollection.Add(1);\n            myTriangleIndicesCollection.Add(2);\n            myTriangleIndicesCollection.Add(3);\n            myTriangleIndicesCollection.Add(4);\n            myTriangleIndicesCollection.Add(5);\n            myMeshGeometry3D.TriangleIndices = myTriangleIndicesCollection;\n\n            // Apply the mesh to the geometry model.\n            myGeometryModel.Geometry = myMeshGeometry3D;\n\n            // The material specifies the material applied to the 3D object.\n\n            ImageBrush br = new ImageBrush(image);\n\n            // Define material and apply to the mesh geometries.\n            DiffuseMaterial myMaterial = new DiffuseMaterial(br);\n            myGeometryModel.Material = myMaterial;\n            myGeometryModel.BackMaterial = myMaterial;\n\n            MatrixTransform3D transform = new MatrixTransform3D(matr);\n            myGeometryModel.Transform = transform;\n\n            // Add the geometry model to the model group.\n            myModel3DGroup.Children.Add(myGeometryModel);\n\n            // Add the group of models to the ModelVisual3d.\n            myModelVisual3D.Content = myModel3DGroup;\n            myViewport3D.Children.Add(myModelVisual3D);\n\n            //render Viewport3D into bitmap      \n            int width = image.PixelWidth ;\n            int height = image.PixelHeight;\n            myViewport3D.Width = width;\n            myViewport3D.Height = height;\n            myViewport3D.Measure(new Size(width, height));\n            myViewport3D.Arrange(new Rect(0, 0, width, height));\n\n            RenderTargetBitmap rtb = new RenderTargetBitmap(width, height, 96, 96, PixelFormats.Pbgra32);\n            rtb.Render(myViewport3D);\n\n            //Save bitmap to file\n            using (var fileStream = new FileStream(output, FileMode.Create))\n            {\n                BitmapEncoder encoder = new JpegBitmapEncoder();\n                encoder.Frames.Add(BitmapFrame.Create(rtb));\n                encoder.Save(fileStream);\n            }\n\n        }\n\n        /*Поворачивает изображение вокруг указанной оси на указанный угол*/\n        public static void RotateImage(string input, string output, Vector3D axis, int angle)\n        {\n            var myRotateTransform3D = new RotateTransform3D();\n            var myAxisAngleRotation3d = new AxisAngleRotation3D();\n            myAxisAngleRotation3d.Axis = axis;\n            myAxisAngleRotation3d.Angle = angle;\n            myRotateTransform3D.Rotation = myAxisAngleRotation3d;\n\n            ImageTransformer.ApplyTransform(input, output, myRotateTransform3D.Value);\n\n        }\n\n    }\n}\n</code></pre>\n\n<p>Пример использования (поворот на 30 градусов вокруг оси Y):</p>\n\n<pre><code>ImageTransformer.RotateImage( \n    \"c:\\\\images\\\\image.jpg\", \n    \"c:\\\\images\\\\image2.jpg\",\n    new System.Windows.Media.Media3D.Vector3D(0, 1, 0), \n    30);\n</code></pre>\n\n<p>Применение произвольного преобразования, заданного матрицей:</p>\n\n<pre><code>ImageTransformer.ApplyTransform(\n   \"c:\\\\images\\\\image.jpg\",\n   \"c:\\\\images\\\\image2.jpg\",\n   new System.Windows.Media.Media3D.Matrix3D(.615, 0, 0, .00015, 0, .615, 0, -.000005, 0, 0, 1, 0, -151, -120, 0, 1));\n</code></pre>\n\n<p>При использовании в проекте WinForms нужно добавить ссылки на необходимые сборки, но делать отдельный поток для обработки сообщений WPF (Application.Run) не обязательно.</p>\n\n<p><strong>Способ 2 - С использованием MSHTML</strong></p>\n\n<p>При наличии IE 10+ можно программно растеризовать приведенный HTML+CSS с помощью такого кода:</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing System.ComponentModel;\n//Reference: COM -&gt; Microsoft HTML Object Library\n\nnamespace WindowsFormsTest\n{\n    public class HtmlVisualizer\n    {\n        public static void DrawHtml(string content, string output)\n        {\n            RECTL rcClient = new RECTL();\n            bool b = SystemParametersInfo(SPI_GETWORKAREA, 0, ref rcClient, 0);\n            if (b == false) { rcClient.bottom = 480; rcClient.right = 640; }\n\n            int width = (int)(rcClient.right - rcClient.left);\n            int height = (int)(rcClient.bottom - rcClient.top);\n            IntPtr screendc = GetDC(IntPtr.Zero);\n\n\n            mshtml.HTMLDocument doc = null;\n            mshtml.IHTMLDocument2 d2 = null;\n            IOleObject pObj = null;\n            IViewObject pView = null;\n\n            try\n            {\n                doc = new mshtml.HTMLDocument(); //создание документа\n                d2 = (mshtml.IHTMLDocument2)doc;\n                int hr;\n\n                //установка размера документа\n                pObj = (IOleObject)d2;\n                SIZEL sz = new SIZEL();\n\n                sz.x = (uint)MulDiv(width, HIMETRIC_INCH, GetDeviceCaps(screendc, LOGPIXELSX));\n                sz.y = (uint)MulDiv(height, HIMETRIC_INCH, GetDeviceCaps(screendc, LOGPIXELSY));\n                ;\n                hr = pObj.SetExtent((int)System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT, ref sz);\n                if (hr != 0) throw Marshal.GetExceptionForHR(hr);\n\n                d2.write(content);\n                d2.close();                \n\n                while (d2.readyState != \"complete\") System.Windows.Forms.Application.DoEvents(); \n\n                //преобразование в Bitmap\n                pView = (IViewObject)d2;\n                Bitmap bmp = new Bitmap(width, height);\n                Graphics g = Graphics.FromImage(bmp);\n                using (g)\n                {\n\n                    IntPtr hdc = g.GetHdc();\n                    hr = pView.Draw((int)System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT,\n                        -1, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, hdc, ref rcClient, IntPtr.Zero,\n                        IntPtr.Zero, 0);\n                    if (hr != 0) throw Marshal.GetExceptionForHR(hr);\n                    g.ReleaseHdc(hdc);\n                }\n\n                //сохранение в PNG\n                bmp.Save(output, System.Drawing.Imaging.ImageFormat.Png);\n\n\n            }\n            finally\n            {\n                //освобождение ресурсов                \n                if (d2 != null) Marshal.ReleaseComObject(d2);\n                if (pObj != null) Marshal.ReleaseComObject(pObj);\n                if (pView != null) Marshal.ReleaseComObject(pView);\n                if (doc != null) Marshal.ReleaseComObject(doc);\n            }\n        }\n\n        [DllImport(\"gdi32.dll\")]\n        static extern int GetDeviceCaps(IntPtr hdc, int nIndex);\n\n        [DllImport(\"user32.dll\")]\n        static extern IntPtr GetDC(IntPtr hWnd);\n\n        [DllImport(\"user32.dll\")]\n        static extern bool SystemParametersInfo(int nAction, int nParam, ref RECTL rc, int nUpdate);\n\n        public static int MulDiv(int number, int numerator, int denominator)\n        {\n            return (int)(((long)number * numerator) / denominator);\n        }\n\n        const int LOGPIXELSX = 88;\n        const int LOGPIXELSY = 90;\n        const int HIMETRIC_INCH = 2540;\n        const int SPI_GETWORKAREA = 48;\n\n    }\n\n    [ComImport()]\n    [GuidAttribute(\"0000010d-0000-0000-C000-000000000046\")]\n    [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]\n    public interface IViewObject\n    {\n        int Draw([MarshalAs(UnmanagedType.U4)] int dwDrawAspect, int lindex, IntPtr pvAspect, IntPtr ptd, IntPtr hdcTargetDev, IntPtr hdcDraw,\n            ref RECTL lprcBounds, IntPtr lprcWBounds, IntPtr pfnContinue, int dwContinue);\n        int a();\n        int b();\n        int c();\n        int d();\n        int e();\n    }\n\n    [ComImport()]\n    [Guid(\"00000112-0000-0000-C000-000000000046\")]\n    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    public interface IOleObject\n    {\n        void f();\n        void g();\n        void SetHostNames(object szContainerApp, object szContainerObj);\n        void Close(uint dwSaveOption);\n        void SetMoniker(uint dwWhichMoniker, object pmk);\n        void GetMoniker(uint dwAssign, uint dwWhichMoniker, object ppmk);\n        void x();\n        void y();\n        void DoVerb(uint iVerb, uint lpmsg, object pActiveSite, uint lindex, uint hwndParent, uint lprcPosRect);\n        void EnumVerbs(ref object ppEnumOleVerb);\n        void Update();\n        void IsUpToDate();\n        void GetUserClassID(uint pClsid);\n        void GetUserType(uint dwFormOfType, uint pszUserType);\n        int SetExtent(uint dwDrawAspect, ref SIZEL psizel);\n        void GetExtent(uint dwDrawAspect, uint psizel);\n        void Advise(object pAdvSink, uint pdwConnection);\n        void Unadvise(uint dwConnection);\n        void EnumAdvise(ref object ppenumAdvise);\n        void GetMiscStatus(uint dwAspect, uint pdwStatus);\n        void SetColorScheme(object pLogpal);\n    };\n\n    public struct RECTL\n    {\n        public uint left;\n        public uint top;\n        public uint right;\n        public uint bottom;\n    }\n\n    public struct SIZEL\n    {\n        public uint x;\n        public uint y;\n    }\n}\n</code></pre>\n\n<p>На вход подавать HTML такого вида:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;&lt;head&gt;\n\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=10\" /&gt;    \n&lt;style&gt;\nhtml{width:100%;overflow:hidden;}body{margin:0;position:relative;transform-origin:top left;}@supports(transform:scale(1)){body{-ms-zoom:1!important;zoom:1!important;}}\n.camera{pointer-events:none;}.screen:hover{z-index:2;outline:10px solid rgba(255,0,0,.5);}\n\nbody {\n  width: 1920px;\n  height: 1080px;\n}\n\nimg {\n  position: absolute;\n}\n\n.camera {\n  width: 1920px;\n  height: 1080px;\n}\n\n.screen {\n  width: 1600px;\n  height: 900px;\n  transform: matrix3d(.615,0,0,.00015,0,.615,0,-.000005,0,0,1,0,-151,-120,0,1);\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img class=\"screen\" src=\"file://localhost/c:/images/screen.png\"&gt;\n&lt;img class=\"camera\" src=\"file://localhost/c:/images/kamera.png\"&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p><strong>Источники:</strong></p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/graphics-multimedia/how-to-create-a-3-d-scene\" rel=\"nofollow noreferrer\">How to: Create a 3-D Scene</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/2945762/projecting-an-object-into-a-scene-based-on-world-coordinates-only\">Projecting an object into a scene based on world coordinates only\n</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/10208798/wpf-c-rendertargetbitmap-of-viewport3d-without-assigning-it-to-a-window/10231068\">wpf, c#, renderTargetBitmap of viewport3D without assigning it to a window\n</a></p>\n\n<p><a href=\"http://paige-rudnick.com/2014/01/30/using-ie-to-save-svgs-as-bitmaps-to-wherever/\" rel=\"nofollow noreferrer\">Using IE to Save SVGs as Bitmaps to Wherever</a></p>\n"}