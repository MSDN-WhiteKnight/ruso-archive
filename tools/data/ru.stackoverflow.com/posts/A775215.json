{"owner":{"reputation":16058,"user_id":240512,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Ew6lG.png?s=128&g=1","display_name":"MSDN.WhiteKnight","link":"https://ru.stackoverflow.com/users/240512/msdn-whiteknight"},"is_accepted":true,"score":7,"last_activity_date":1516816944,"creation_date":1516816944,"answer_id":775215,"question_id":774883,"body":"<p>На самом деле, WinRT не является заменой или оберткой для какой либо из предыдущих технологий. <strong>WinRT</strong> - это принципиально новая технология, направленная на разработку приложений, которые имеют смысл на разных типах устройств. Приложение WinRT может использовать базовый API и работать на всех типах устройств, или использовать расширения API и работать под набором конкретных устройств (например, под ПК и смартфоном, ПК и Xbox и т.п.)</p>\n\n<p>Первоначально эта технология возникла под Windows 8 и называлась WinRT. Позднее в Windows 10 она была заменена на аналогичную технологию <strong>UWP</strong>, которая охватывает больший набор устройств. Сейчас можно приближенно считать, что это одно и то же.</p>\n\n<p>Приложения UWP/WinRT обладают следующими особенностями:</p>\n\n<ul>\n<li>Взаимодействие с ОС с помощью специального API Windows Runtime или ограниченного подмножества разрешенных API из Win32/COM и .NET</li>\n<li>Запуск в ограниченной среде, где приложения не имеют прямой доступ к оборудованию, реестру, всей файловой системе и т.п. WinRT приложения имеют доступ только к своей папке данных, а к другим папкам могут получать доступ с явного разрешения пользователя</li>\n<li>Распространение преимущественно через Магазин Windows, подобно распространению мобильных приложений, в противоположность обычному скачиванию инсталляторов с разных сайтов</li>\n<li>Разработка может осуществляться либо на С++ (с расширениями С++/CX для взаимодействия с компонентами WinRT), либо на .NET-языках</li>\n<li>Построение графического интерфейса с помощью XAML-фреймворка, похожего на WPF. В отличие от WPF, приложение строится не как набор окон, а как набор страниц, между которыми пользователь переходит внутри одного окна (как в веб-приложениях). Это позволяет создавать адаптивный интерфейс, имеющий смысл на разных типах устройств.</li>\n</ul>\n\n<p><strong>WinRT не является \"убийцей COM\"</strong>, что бы это не значило. COM жив и будет жить, более того, сами компоненты WinRT API внутри представляют из себя COM-объекты. WinRT-приложения, написанные на С++, могут взаимодействовать с ними либо традиционно, как с COM-объектами, либо с использованием специальных расширений языка C++/CX. </p>\n\n<p><strong>WinRT не является \"убийцей WinAPI\"</strong>, что бы это не значило. WinRT приложения, написанные на С++, могут как обычно взаимодействовать с подмножеством разрешенных Win32/COM API. Например, функция <code>CreateFile</code> будет доступна, а функции работы с реестром - нет. Конечно, это не позволяет обойти ограничения платформы, т.е. функция <code>CreateFile</code> также будет работать только с файлами в разрешенных папках. <em>Забавный факт: в WinRT нельзя этой функцией открыть устройство NUL, как следствие - <a href=\"https://social.msdn.microsoft.com/Forums/windows/ru-RU/d66c545f-dc6d-406c-873f-ea9ee0c86239/uwp-nul-device?forum=desktopprogrammingru&amp;forum=desktopprogrammingru\" rel=\"noreferrer\">код, написанный из предположения, что оно всегда доступно, сломается при портировании под WinRT</a></em>.</p>\n\n<p><strong>WinRT не является средством для организации взаимодействия между управляемым и неуправляемым кодом</strong> (в  целом). Тем не менее, расширения языка C++/CX предоставляют возможность организовать взаимодействие между кодом на стандартном С++ и компонентами WinRT.</p>\n\n<p>Подробнее: <a href=\"https://docs.microsoft.com/ru-ru/windows/uwp/get-started/universal-application-platform-guide\" rel=\"noreferrer\">Введение в работу с UWP приложениями</a></p>\n"}